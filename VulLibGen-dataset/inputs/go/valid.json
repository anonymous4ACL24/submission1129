[{"id": "GHSA-2w6m-q946-399r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Dapr Dashboard v0.1.0 through v0.10.0 is vulnerable to Incorrect Access Control that allows attackers to obtain sensitive data.. Top 1 search result is go:github.com/dapr/dashboard. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dapr/dashboard."}]}, {"id": "GHSA-f4mm-2r69-mg5f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Overview\nDuring our internal security assessment, it was discovered that OpenFGA versions `v0.2.3` and prior are vulnerable to authorization bypass under certain conditions.\n\n### Am I Affected?\nYou are affected by this vulnerability if you are using `openfga/openfga` version `v0.2.3` or prior, and your model has a relation defined as a tupleset (the right hand side of a \u2018from\u2019 statement) that involves anything other than a direct relationship (e.g. \u2018as self\u2019)\n\n### How to fix that?\nUpgrade to version `v0.2.4`.\n\n### Backward Compatibility\nThis update is not backward compatible.\nAny model involving rewritten tupleset relations will no longer be acceptable and has to be modified.\n  . Top 1 search result is go:github.com/openfga/openfga. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openfga/openfga."}]}, {"id": "GHSA-vj4m-83m8-xpw5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Overview\nDuring our internal security assessment, it was discovered that OpenFGA versions `v0.2.3` and prior are vulnerable to authorization bypass under certain conditions.\n\n### Am I affected?\nYou are affected by this vulnerability if you are using `openfga/openfga` version `v0.2.3` and you added a tuple with a wildcard (*) assigned to a tupleset relation (the right hand side of a \u2018from\u2019 statement).\n\n### How to fix that?\nUpgrade to version `v0.2.4`.\n\n### Backward Compatibility\nThis update is not backward compatible with any authorization model that uses wildcard on a tupleset relation.\n\n. Top 1 search result is go:github.com/openfga/openfga. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openfga/openfga."}]}, {"id": "GHSA-mcjj-2fvq-mc3r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Gogs, versions v0.6.5 through v0.12.10 are vulnerable to Stored Cross-Site Scripting (XSS) that leads to an account takeover.. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gogs.io/gogs."}]}, {"id": "GHSA-h8g9-6gvh-5mrc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Vulnerability type\nAuthentication\n\n### Workarounds\nRefer to the [gateway documentation](https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/gateway.md). The vulnerability was spotted due to unclear documentation of how the gateway handles endpoints validation. \n\n### Detail\nThe gateway only authenticates endpoints detected from DNS SRV records, and it only authenticates the detected endpoints once. Therefore, if an endpoint changes its authentication settings, the gateway will continue to assume the endpoint is still authenticated. The auditors has noted that appropriate documentation of this validation functionality plus deprecation of this misleading functionality is an acceptable path forward.\n\n### References\nFind out more on this vulnerability in the [security audit report](https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Contact the [etcd security committee](https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc). Top 1 search result is go:github.com/etcd-io/etcd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:go.etcd.io/etcd/v3 go:go.etcd.io/etcd/v3."}]}, {"id": "GHSA-67x4-qr35-qvrm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nUsers who enable the default [Flyte\u2019s authorization server](https://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server) without changing the default clientid hashes will be exposed to the public internet.\n\nIn an effort to make enabling authentication easier for Flyte administrators, the default configuration for Flyte Admin allows access for Flyte Propeller even after turning on authentication via a hardcoded hashed password.  This password is also set on the default Flyte Propeller configmap in the various Flyte Helm charts.  Users who enable auth but do not override this setting in Flyte Admin\u2019s configuration may unknowingly allow public traffic in by way of this default password with attackers effectively impersonating propeller.  This only applies to users who have not specified the ExternalAuthorizationServer setting.  Using an external auth server automatically turns off this default configuration is not susceptible to this vulnerability.\n\n### Patches\n1.1.44\n\n### Workarounds\nUsers should manually set the staticClients in the selfAuthServer section of their configuration if they intend to rely on Admin\u2019s internal auth server.  \n\n### References\nhttps://github.com/flyteorg/flyteadmin/pull/478\nhttps://docs.flyte.org/en/latest/deployment/cluster_config/auth_setup.html#oauth2-authorization-server \n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Flyte](https://github.com/flyteorg/flyte/issues)\n* Email us [here](mailto:admin@flyte.org). Top 1 search result is go:github.com/flyteorg/flyteadmin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/flyteorg/flyteadmin."}]}, {"id": "GHSA-m5m3-46gj-wch8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe `github.com/sylabs/sif/v2/pkg/integrity` package does not verify that the hash algorithm(s) used are cryptographically secure when verifying digital signatures.\n\n### Patches\n\nA patch is available in version >= v2.8.1 of the module. Users are encouraged to upgrade.\n\nThe patch is commit https://github.com/sylabs/sif/commit/07fb86029a12e3210f6131e065570124605daeaa\n\n### Workarounds\n\nUsers may independently validate that the hash algorithm(s) used for metadata digest(s) and signature hash are cryptographically secure.\n\n### References\n\n* [CVE-2004-2761](https://nvd.nist.gov/vuln/detail/cve-2004-2761)\n* [CVE-2005-4900](https://nvd.nist.gov/vuln/detail/cve-2005-4900)\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [github.com/sylabs/sif](https://github.com/sylabs/sif/issues/new)\n* Email us at [security@sylabs.io](mailto:security@sylabs.io). Top 1 search result is go:github.com/sylabs/sif. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/sylabs/sif/v2."}]}, {"id": "GHSA-p658-8693-mhvg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Description \n\nTendermint Core v0.34.0 introduced a new way of handling evidence of misbehavior. As part of this, [we added a new `Timestamp` field to `Evidence` structs](https://github.com/tendermint/tendermint/pull/5219). This timestamp would be calculated using the same algorithm that is used when a block is created and proposed. (This algorithm relies on the timestamp of the last commit from this specific block.) \n\nIn Tendermint Core v0.34.0-v0.34.2, the `consensus` reactor is responsible for forming `DuplicateVoteEvidence` whenever double signs are observed. However, the current block is still \u201cin flight\u201d when it is being formed by the `consensus` reactor. It hasn\u2019t been finalized through network consensus yet. This means that different nodes in the network may observe different \u201clast commits\u201d when assigning a timestamp to `DuplicateVoteEvidence.`\n\nIn turn, different nodes could form `DuplicateVoteEvidence` objects at the same height but with different timestamps. One `DuplicateVoteEvidence` object (with one timestamp) will then eventually get finalized in the block, but this means that any `DuplicateVoteEvidence` with a different timestamp is considered invalid. Any node that formed invalid `DuplicateVoteEvidence` will continue to propose invalid evidence; its peers may see this, and choose to disconnect from this node. This bug means that double signs are DoS vectors in Tendermint Core v0.34.0-v0.34.2. \n\nTendermint Core v0.34.3 is a security release which fixes this bug. As of v0.34.3, `DuplicateVoteEvidence` is no longer formed by the `consensus` reactor; rather, the `consensus` reactor passes the `Vote`s themselves into the `EvidencePool`, which is now responsible for forming `DuplicateVoteEvidence`. The `EvidencePool` has timestamp info that should be consistent across the network, which means that `DuplicateVoteEvidence` formed in this reactor should have consistent timestamps. \n\nThis release changes the API between the `consensus` and `evidence` reactors. \n\n### Impact\n\nThis is a denial-of-service vector which impacts networks running Tendermint Core v0.34.0 - v0.34.2.\n\n### Remediation\n\nThis problem has been patched in Tendermint Core v0.34.3. Networks running impacted versions of Tendermint Core should update immediately.\n\n### Workarounds\n\nThere are no workarounds, other than upgrading to a patched version of Tendermint Core.\n\n### Credits \n\n* Crypto.com (@cyril-crypto, @brianatcrypto, @tomtau and  @yihuang) for finding and submitting this vulnerability\n* @melekes and @cmwaters for identifying the root cause and patching the problem \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [tendermint/tendermint](https://github.com/tendermint/tendermint)\n* Email us at [security@tendermint.com](mailto:security@tendermint.com). Top 1 search result is go:github.com/tendermint/tendermint. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/tendermint/tendermint."}]}, {"id": "GHSA-mqqv-chpx-vq25", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: This affects all versions of package github.com/russellhaering/goxmldsig prior to 1.1.1. There is a crash on nil-pointer dereference caused by sending malformed XML signatures. This issue is patched in version 1.1.1.. Top 1 search result is go:github.com/russellhaering/goxmldsig. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/russellhaering/goxmldsig go:github.com/russellhaering/gosaml2."}]}, {"id": "GHSA-mxrx-fg8p-5p5j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThe admin and monitor user groups need to be authenticated by username and password. If we delete the X-Requested-With: XMLHttpRequest field in the request header,the authentication will be bypassed.\n\n### Patches\nhttps://github.com/brockercap/Bifrost/pull/201\n\n### Workarounds\nUpgrade to the latest version. Top 1 search result is go:github.com/brokercap/Bifrost. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/brokercap/Bifrost."}]}, {"id": "GHSA-69ch-w2m2-3vjp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language. Top 1 search result is go:github.com/dhowden/tag. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/text."}]}, {"id": "GHSA-x279-68rr-jp4p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nBlst versions v0.3.0 to v0.3.2 can produce the incorrect outputs for some inputs to the blst_fp_eucl_inverse function. This could theoretically result in the creation of an invalid signature from correct inputs. However, fuzzing of higher level functions such as sign and verify were unable to produce incorrect results and there has been no reported occurrences of this issue being encountered in production use.\n\n### Description\nDuring the course of differential fuzzing of the blst library by @guidovranken it was discovered that blst would produce the incorrect result for some input values in the inverse function. This was the result of the introduction of a new inversion formula in version v0.3.0. This source of these incorrect outputs was due to two issues:\n\n1. The amount of inner loop iterations was not sufficient for the algorithm to converge.\n2. It was erroneously assumed that the absolute value of the intermediate result would be capped at 767-bits. As a result, some output values were truncated by one bit or the most significant bit was misinterpreted as the sign.\n\n### Patches\nThis issue has been resolved in the v0.3.3 release and users are recommended to upgrade immediately.\n\n### References\nThe software used to uncover this issue can be found [here](https://github.com/guidovranken/cryptofuzz).\n\n### Credits\nA special thanks to Guido Vranken (@guidovranken) for his discovery and disclosure of this vulnerability.\n\n### For more information\nIf you have any questions or comments about this advisory please email us at [hello@supranational.net](mailto:hello@supranational.net). Top 1 search result is go:github.com/supranational/blst. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/supranational/blst."}]}, {"id": "GHSA-93m7-c69f-5cfj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: xmlquery before 1.3.1 lacks a check for whether a LoadURL response is in the XML format, which allows attackers to cause a denial of service (SIGSEGV) at xmlquery.(*Node).InnerText or possibly have unspecified other impact.. Top 1 search result is go:github.com/antchfx/xmlquery. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/antchfx/xmlquery."}]}, {"id": "GHSA-f2rj-m42r-6jm2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nSkipper prior to version v0.13.236 is vulnerable to server-side request forgery (SSRF). An attacker can exploit a vulnerable version of proxy to access the internal metadata server or other unauthenticated URLs by adding an specific header (X-Skipper-Proxy) to the http request.\n\n### Patches\nThe problem was patched in version https://github.com/zalando/skipper/releases/tag/v0.13.237.\nUsers need to upgrade to skipper `>=v0.13.237`.\n\n### Workarounds\n\nUse `dropRequestHeader(\"X-Skipper-Proxy\")` filter\n\n### References\n\nhttps://github.com/zalando/skipper/releases/tag/v0.13.237\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/zalando/skipper/issues/new/choose\n* Chat with us in slack: https://app.slack.com/client/T029RQSE6/C82Q5JNH5. Top 1 search result is go:github.com/zalando/skipper. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/zalando/skipper."}]}, {"id": "GHSA-mwwc-3jv2-62j3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In AdGuardHome, versions v0.95 through v0.108.0-b.13 are vulnerable to Cross-Site Request Forgery (CSRF), in the custom filtering rules functionality. An attacker can persuade an authorized user to follow a malicious link, resulting in deleting/modifying the custom filtering rules.\n\nThe file that contains the vulnerable code is no longer present as of v0.108.0-b.16.. Top 1 search result is go:github.com/AdguardTeam/AdGuardHome. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/AdguardTeam/AdGuardHome."}]}, {"id": "GHSA-95x7-mh78-7w2r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Overview\nDuring our internal security assessment, it was discovered that `streamed-list-objects` endpoint was not validating the authorization header resulting in the disclosure of objects in the store.\n\n### Am I Affected?\nYou are affected by this vulnerability if you are using `openfga/openfga` version `v0.2.3` or prior and you are exposing the OpenFGA service to the internet.\n\n### How to fix that?\nUpgrade to version `v0.2.4`.\n\n### Backward Compatibility\nThis update is backward compatible.. Top 1 search result is go:github.com/openfga/openfga. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openfga/openfga."}]}, {"id": "GHSA-f4p5-x4vc-mh4v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Flux controllers within the affected versions range are vulnerable to a denial of service attack. Users that have permissions to change Flux\u2019s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields `.spec.interval` or `.spec.timeout` (and structured variations of these fields), causing the entire object type to stop being processed.\n\nThe issue has two root causes: a) the Kubernetes type `metav1.Duration` not being fully compatible with the Go type `time.Duration` as explained on [upstream report](https://github.com/kubernetes/apimachinery/issues/131); b) lack of validation within Flux to restrict allowed values.\n\n### Workarounds\n\nAdmission controllers can be employed to restrict the values that can be used for fields `.spec.interval` and `.spec.timeout`, however upgrading to the latest versions is still the recommended mitigation.\n\n### Credits\n\nThis issue was reported by Alexander Block (@codablock) through the Flux security mailing list (as [recommended](https://fluxcd.io/security/#report-a-vulnerability)).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n- Open an issue in any of the affected repositories.\n- Contact us at the CNCF Flux channel.\n\n### References\n\n- https://github.com/kubernetes/apimachinery/issues/131\n\n. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/fluxcd/flux2 go:github.com/fluxcd/source-controller go:github.com/fluxcd/kustomize-controller go:github.com/fluxcd/helm-controller go:github.com/fluxcd/notification-controller go:github.com/fluxcd/image-automation-controller go:github.com/fluxcd/image-reflector-controller."}]}, {"id": "GHSA-vh7g-p26c-j2cw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nDex instances with public clients (and by extension, clients accepting tokens issued by those Dex instances) are affected by this vulnerability.\n\nAn attacker can exploit this vulnerability by making a victim navigate to a malicious website and guiding them through the OIDC flow, stealing the OAuth authorization code in the process. The authorization code then can be exchanged by the attacker for a token, gaining access to applications accepting that token.\n\n### Steps to reproduce\n\n1) A victim navigates to a malicious website\n\n2) The webserver initiates a connection with a Dex instance directly - https://dexexample.com/auth/https:%252F%252Faccounts.google.com?access_type=online&client_id=example&nonce=2AaJAimQU9CbeOFsNra1d7CJTWB&redirect_uri=http%3A%2F%2Flocalhost%3A40393%2Fauth%2Fcallback&response_type=code&scope=openid+email&state=2AaJAjhpUmsB25csCo5muvorMTl. In this example, the Dex instance is hosted on `dexexample.com`, and the connector is `accounts.google.com`.\n\n3) Dex returns a 302 Redirect to the connector IDP, https://accounts.google.com/o/oauth2/v2/auth?client_id=237800849078-hri2ndt7gdafpf34kq8crd5sik9pe3so.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fdexexample.com%2Fauth%2Fcallback&response_type=code&scope=openid+email&state=g3dkmpontsr3ugocoddjx72ef. The attacker records the state parameter value g3dkmpontsr3ugocoddjx72ef which will be used as the request ID later on.\n\n4) The malicious website redirects the victim\u2019s browser to the connector IDP.\n\n5) The user authenticates to the connector IDP. If they have authenticated before, they may not be presented with an authentication challenge. The user will silently be taken through the following steps:\n\n    Authentication with the connector IDP, which redirects the browser to the Dex callback with a code - https://dexexample.com/callback?state=g3dkmpontsr3ugocoddjx72ef&code=4%2F0AX4XfWizg1PQEQNl18hmP0_YQ3iUYII2ed13n9ikKr_ZcV7uCZpZaPcIlxBzX5QwFIcs-w&scope=email+openid+https%3A%2F%[2Fwww.googleapis.com](http://2fwww.googleapis.com/)%2Fauth%2Fuserinfo.email&authuser=0&hd=[google.com](http://google.com/)&prompt=none\n\n    Dex handles the callback, fetching the user claims from the connector IDP, persisting them and generating an OAuth code. Then Dex redirects the browser to the approval endpoint https://dexexample.com/approval?req=g3dkmpontsr3ugocoddjx72ef. Note that the req parameter is the same as the attacker's recorded state parameter.\n\n    Dex uses the request ID to look up the OAuth code, and builds a redirect to the original callback with the code - http://localhost:40393/auth/callback?code=bz5p3oov2wlh5k3rboa4atxas&state=2AaJAjhpUmsB25csCo5muvorMTl.\n\n\nIn step 2., when the webserver initiates the connection to Dex and receives the redirect to the connector IDP, the webserver will persist the connector state parameter (`g3dkmpontsr3ugocoddjx72ef`), which is used as the request ID to later look up the OAuth code. As the user goes through the authentication flow with the connector IDP, the webserver will repeatedly request `/approval?req=<state>`. Once the user has successfully authenticated, if the webserver is able to call /approval before the victim\u2019s browser calls `/approval`, then an attacker can fetch the Dex OAuth code which can be exchanged for an ID token using the `/token` endpoint.\n\nNote that PKCE does not defend against this attack since the webserver initiates the request to Dex with a known code challenge.\n\n### Fix\n\nThe request has been made unpredictable with message authentication. This was accomplished by creating an [HMAC](https://en.wikipedia.org/wiki/HMAC) using a randomly generated per-request secret. This secret is persisted between the initial login request and the approval request. Since the HMAC is derived using a secret key, its value cannot be known to an attacker, so they will be unable to poll `/approval` for the code.\n\n### Patches\nUpdate to 2.35.0.\n\n### Workarounds\nNo known workarounds (without impacting behavior) for existing versions.\n\nDisabling public clients is the only way to defend against attacks exploiting this vulnerability.\n\n### References\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Start a new [discussion](https://github.com/dexidp/dex/discussions/new?category=q-a)\n* Email us at [cncf-dex-maintainers@lists.cncf.io](mailto:cncf-dex-maintainers@lists.cncf.io)\n. Top 1 search result is go:github.com/concourse/dex. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dexidp/dex."}]}, {"id": "GHSA-xqv2-3vvq-qg6r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Hashicorp Boundary is vulnerable to Clickjacking which allow for the interception of login credentials, re-direction of users to malicious sites, or causing users to perform malicious actions on the site.. Top 1 search result is go:github.com/hashicorp/boundary. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/boundary."}]}, {"id": "GHSA-pmw9-567p-68pc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAttackers can create long chains of CAs that would lead to OctoRPKI exceeding its max iterations parameter. In consequence it would cause the program to crash, preventing it from finishing the validation and leading to a denial of service. Credits to Donika Mirdita and Haya Shulman - Fraunhofer SIT, ATHENE, who discovered and reported this vulnerability.\n\n### Specific Go Packages Affected\ngithub.com/cloudflare/cfrpki/cmd/octorpki\n\n### Patches\nThis issue is fixed in v1.4.4\n\n### Workarounds\nNone.. Top 1 search result is go:github.com/cloudflare/cfrpki. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cloudflare/cfrpki."}]}, {"id": "GHSA-w8xw-7crf-h23x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gitea before 1.17.3 does not sanitize and escape refs in the git backend. Arguments to git commands are mishandled.. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/go-gitea/gitea."}]}, {"id": "GHSA-9rpw-2h95-666c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThe sflow decode package prior to version 3.4.4 does not employ sufficient packet sanitisation which can lead to a denial of service attack. Attackers can craft malformed packets causing the process to consume huge amounts of memory resulting in a denial of service.\n\n### Specific Go Packages Affected\ngithub.com/cloudflare/goflow/v3/decoders/sflow\n\n### Patches\nVersion 3.4.4 contains patches fixing this.\n\n### Workarounds\nA possible workaround is to not have your goflow collector publicly reachable.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [goflow repo](https://github.com/cloudflare/goflow)\n* Email us [netdev[@]cloudflare.com ](mailto:netdev@cloudflare.com)\n. Top 1 search result is go:github.com/cloudflare/goflow/v3. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cloudflare/goflow/v3."}]}, {"id": "GHSA-4993-m7g5-r9hh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Vulnerability type\nAccess Control\n\n### Workarounds\nThe etcdctl and etcd API do not enforce a specific password length during user creation or user password update operations. [It is the responsibility of the administrator to enforce these requirements](https://github.com/etcd-io/etcd/blob/master/Documentation/op-guide/authentication.md#notes-on-password-strength).\n\n### Detail\netcd does not perform any password length validation, which allows for very short passwords, such as those with a length of one. This may allow an attacker to guess or brute-force users\u2019 passwords with little computational effort.\n\n### References\nFind out more on this vulnerability in the [security audit report](https://github.com/etcd-io/etcd/blob/master/security/SECURITY_AUDIT.pdf)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Contact the [etcd security committee](https://github.com/etcd-io/etcd/blob/master/security/security-release-process.md#product-security-committee-psc). Top 1 search result is go:github.com/etcd-io/etcd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:go.etcd.io/etcd/client/v3 go:go.etcd.io/etcd/client/v3."}]}, {"id": "GHSA-jcxc-rh6w-wf49", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: This affects all versions of package github.com/kataras/iris; all versions of package github.com/kataras/iris/v12. The unsafe handling of file names during upload using UploadFormFiles method may enable attackers to write to arbitrary locations outside the designated target folder.. Top 1 search result is go:github.com/kataras/iris. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/kataras/iris/v12 go:github.com/kataras/iris."}]}, {"id": "GHSA-mvff-h3cj-wj9c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nContainers launched through containerd\u2019s CRI implementation on Linux systems which use the SELinux security module and containerd versions since v1.5.0 can cause arbitrary files and directories on the host to be relabeled to match the container process label through the use of specially-configured bind mounts in a hostPath volume. This relabeling elevates permissions for the container, granting full read/write access over the affected files and directories. Kubernetes and crictl can both be configured to use containerd\u2019s CRI implementation.\n\nIf you are not using containerd\u2019s CRI implementation (through one of the mechanisms described above), you are not affected by this issue.\n\n### Patches\n\nThis bug has been fixed in containerd 1.5.9.  Because file labels persist independently of containerd, users should both update to these versions as soon as they are released and validate that all files on their host are correctly labeled.\n\n### Workarounds\n\nEnsure that no sensitive files or directories are used as a hostPath volume source location.  Policy enforcement mechanisms such a Kubernetes Pod Security Policy [AllowedHostPaths](https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems) may be specified to limit the files and directories that can be bind-mounted to containers.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io). Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containerd/containerd."}]}, {"id": "GHSA-vc3p-29h2-gpcp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: net/http in Go before 1.16.12 and 1.17.x before 1.17.5 allows uncontrolled memory consumption in the header canonicalization cache via HTTP/2 requests.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net/http2."}]}, {"id": "GHSA-3cf2-x423-x582", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A flaw was found in podman. The `podman machine` function (used to create and manage Podman virtual machine containing a Podman process) spawns a `gvproxy` process on the host system. The `gvproxy` API is accessible on port 7777 on all IP addresses on the host. If that port is open on the host's firewall, an attacker can potentially use the `gvproxy` API to forward ports on the host to ports in the VM, making private services on the VM accessible to the network. This issue could be also used to interrupt the host's services by forwarding all ports to the VM.. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman/v3."}]}, {"id": "GHSA-mh3m-8c74-74xh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis is a DoS vulnerability that is possible due to a bug in the library that would allow an attacker with specifically designed queries to cause stack overflow panics. Any user with access to the GraphQL handler can send these queries and cause stack overflows. This in turn could potentially compromise the ability of the server to serve data to its users. To make things worse the only mitigation in affected versions creates opportunities for other attacks. This issue is only available if you are using `graphql.MaxDepth` option in your schema (which is highly recommended in most cases).\n\n### Patches\nThe issue has been patched in version `v1.3.0`. We have been trying to maintain backwards compatibility and avoid breaking changes so upgrading should not be problematic. \n\n### Workarounds\nThe best workaround is to patch to a version greater than or equal to `v1.3.0`. \nOtherwise, the only workaround in versions prior to `v1.3.0` is to disable the `graphql.MaxDepth` option from your schema. Unfortunately, this could potentially create opportunities for other attacks.\n\n### References\nThere are no references or links. This issue was reported privately and was fixed before creating this Security Advisory.\n\n### For more information\nIf you have any questions or comments feel free to reach out to @pavelnikolov or @tony on the Gopher Slack.. Top 1 search result is go:github.com/graphql-go/graphql. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/graph-gophers/graphql-go."}]}, {"id": "GHSA-7p8f-8hjm-wm92", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAny user making use of a wildcard relationship under the right hand branch of an `exclusion` or within an `intersection` operation will see `Lookup`/`LookupResources` return a resource as \"accessible\" if it is *not* accessible by virtue of the inclusion of the wildcard in the intersection or the right side of the exclusion.\n\nFor example, given schema:\n\n```zed\ndefinition user {}\n\ndefinition resource {\n   relation viewer: user\n   relation banned: user | user:*\n   permission view = viewer - banned\n}\n```\n\nIf `user:*` is placed into the `banned` relation for a particular resource, `view` should return false for *all* resources. in `v1.3.0`, the wildcard is ignored entirely in lookup's dispatch, resulting in the `banned` wildcard being ignored in the exclusion.\n\n### Workarounds\nDon't make use of wildcards on the right side of intersections or within exclusions. \n\n### References\nhttps://github.com/authzed/spicedb/issues/358\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [SpiceDB](https://github.com/authzed/spicedb)\n* Ask a question in the [SpiceDB Discord](https://authzed.com/discord)\n. Top 1 search result is go:go.etcd.io/etcd/v3. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/authzed/spicedb."}]}, {"id": "GHSA-gp6j-vx54-5pmf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: # Summary\n\nIn the threshold signature scheme, participants start by dividing secrets into shares using a secret sharing scheme. The Verifiable Secret Sharing scheme generates shares from the user\u2019s IDs but does not properly validate them. Using a malicious ID will make other users reveal their secrets during the secret-sharing procedure. In addition, a second issue resulting from lack of validation could cause nodes to crash when sent maliciously formed user IDs.\n\n# Details\n\nThe creation of Parties IDs does not properly validate for maliciously chosen IDs. Parties generate the secret shares in `binance-chain/tss-lib` codebase that `keep-network/keep-ecdsa` uses by evaluating the polynomial with the other parties\u2019 IDs. It is critical that these party ids are non-zero because evaluating the polynomial at point 0 reveals the secret.\n\nThere is a check that these ids are not zero, but this is insufficient since it is not performed modulo the curve order. Therefore, one can set their ID equal to the order of the elliptic curve, which equals 0 during the polynomial evaluation modulo the curve order.\n```\n    shares := make(Shares, num)\n    for i := 0; i < num; i++ {\n        if indexes[i].Cmp(big.NewInt(0)) == 0 {\n            return nil, nil, fmt.Errorf(\"party index should not be 0\")\n        }\n        share := evaluatePolynomial(ec, threshold, poly, indexes[i])\n        shares[i] = &Share{Threshold: threshold, ID: indexes[i], Share: share}\n    }\n```\n(https://github.com/binance-chain/tss-lib/blob/73560daec7f83d7355107ea9b5e59d16de8765be/crypto/vss/feldman_vss.go#L64-L70)\n\nThus, a party with an ID equal to the order of the curve will receive the secret key as its share.\n\nAnother issue with the tss-lib implementation was the lack of verification for modularly equal user IDs that can cause nodes to crash during key generation or resharing.\n\n# Timeline\n\n### 6 December 2021, 20:28 CET\nThe team is informed by Trail of Bits about the issue in `binance-chain/tss-lib`. The vulnerability was already disclosed with Binance and they have implemented fixes in their recent commits. We are advised to update our dependency to the most recent `binance-chain/tss-lib` version.\n\n### 7 December 2021, 9:10 CET\nThe team confirms with Trail of Bits we started the work on a fix.\n\n### 7 December 2021, 20:03 CET\nThe team informs Trail of Bits that we found a potential problem in Binance's fix that may lead to the signing code failing with Go panic. We identified the problematic line and suggested its removal.\n\nTo address the vulnerability in the protocol, it is required to ensure that:\n- all indexes are non-zero,\n- all indexes are non-zero modulo the curve order,\n- all indexes are unique modulo the curve order.\n\nThe first two are guarded in `CheckIndexes` function by:\n```\nvMod := new(big.Int).Mod(v, ec.Params().N)\nif vMod.Cmp(zero) == 0 {\n  return nil, errors.New(\"party index should not be 0\")\n}\n```\nThe last one is guarded by:\n```\nif sortutil.Dedupe(sortutil.BigIntSlice(dup)) < len(indexes) {\n  return nil, errors.New(\"duplicate in indexes\")\n}\n```\nHowever, `CheckIndexes` was additionally modified to update values of passed indexes by doing `indexes[i] = vMod`.\n\nThis line was not backward-compatible and caused signatures to fail with `panic: runtime error: invalid memory address or nil pointer dereference` in case the signing group was generated with at least one `PartyID.Key` higher than `ec.Params().N`. This would also be problematic for new code that constructs such `PartyID` - we tested that key generation completed successfully but signing failed with the mentioned panic.\n\n### 8 December 2021, 12:49 CET\nTrail of Bits confirmed the line we flagged is not critical to the security of the protocol.\n\n### 8 December 2021, 15:29 CET\nThe team informed Trail of Bits we are planning to open a PR to `binance-chain/tss-lib` with a fix and we suggest extending the embargo for communicating this issue for one more week, until Friday, Dec 17h to give everyone more time update their code given the problem was found. We also ask Trail of Bits to get in touch with Binance to review our fix given that we are not going to provide a sufficient explanation in the commit and PR description to do not threaten the security of projects that have already upgraded their dependency.\n\n### 8 December 2021, 18:17 CET\n\nThe team informs Trail of Bits about opening a PR https://github.com/binance-chain/tss-lib/pull/155 and explains all the details of the issue.\n\nThe problematic scenario is:\n\n1. We start the keygen by creating `PartyID` for each member. The `PartyID` struct has `Id` and `Key` fields. We set `PartyID.Key` that is higher than the elliptic curve's `N`.\n2. This goes to tss-lib which starts the round 1 code (`ecdsa/keygen/round_1.go`). It takes `PartyID.Key` of each member and assembles the `ids` slice. This slice is thrown into `CheckIndexes` which overwrites each element by doing the modulo `N`.\n3. After returning from `CheckIndexes` the modified `ids` slice is used to set the `Ks` slice in the final `LocalPartySaveData` which is received by each group member as keygen final result.\n4. Each member takes this `LocalPartySaveData` and saves it on disk.\n5. Upon signing, we do the same as in point 1, so we construct `PartyID`s in the same way and start the protocol. At this point, `PartyID.Key` is higher than curve's `N`.\n6. Before starting round 1 of signing, `LocalPartySaveData` obtained at keygen and our `PartyID`s built at point 5 are used in `BuildLocalSaveDataSubset` to build a new `LocalPartySaveData` instance.\n7. `BuildLocalSaveDataSubset` is the place where things go wrong because `Key` field of each `PartyID` from point 5 doesn't correspond to encoded `Ks` elements of `LocalPartySaveData` obtained after keygen, the final `LocalPartySaveData` is corrupted, and cause panic upon validation before signing round 1.\n\n### 8 December 2021, 21:50 CET\n\nTrail of Bits confirms they are going to followup with Binance and they agree to extend the embargo by a week.\n\n### 8 December 2021, 15:16 CET\n\nTrail of Bits validates the problematic scenario we described and our fix. Trail of Bits reaches to Binance and recommends merging our fix and in addition to some other fixes that would secure the code to do not panic even if `LocalPartySaveData` has corrupted data.\n\n### 10 December 2021, 8:16 CET\n\nBinance merges our fix https://github.com/binance-chain/tss-lib/commit/cd95cee01ea2af6d4aa8316612803be944d5369a\n\n### 13 December 2021, 8:35 CET\n\nBinance applies more fixes so that even in case of `LocalPartySaveData` corrupted, the code is not going to panic.\n\n### 15 December 2021\n\nThe team releases a new version of the client, v1.8.1, and announces the need for an upgrade.\nhttps://github.com/keep-network/keep-ecdsa/releases/tag/v1.8.1. Top 1 search result is go:code.vegaprotocol.io/vega. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/keep-network/keep-ecdsa."}]}, {"id": "GHSA-f9jg-8p32-2f55", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: kubectl (k8s.io/kubernetes/pkg/kubectl) does not neutralize escape, meta or control sequences contained in the raw data it outputs to a terminal. This includes but is not limited to the unstructured string fields in objects such as Events.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kubernetes."}]}, {"id": "GHSA-5r5w-h76p-m726", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A Broken or Risky Cryptographic Algorithm exists in Max Mazurov Maddy before 0.5.2, which is an unnecessary risk that may result in the exposure of sensitive information.. Top 1 search result is go:github.com/foxcpp/maddy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/foxcpp/maddy."}]}, {"id": "GHSA-pmcr-2rhp-36hr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: model/criteria/criteria.go in Navidrome before 0.47.5 is vulnerable to SQL injection attacks when processing crafted Smart Playlists. An authenticated user could abuse this to extract arbitrary data from the database, including the user table (which contains sensitive information such as the users' encrypted passwords).. Top 1 search result is go:github.com/navidrome/navidrome. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/navidrome/navidrome."}]}, {"id": "GHSA-m36x-mgfh-8g78", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A domain configured with interactsh server was vulnerable to subdomain takeover for specfic subdomain, i.e `app`, Interactsh server before `< 1.0.0` used to create cname entries for `app` pointing to `projectdiscovery.github.io` as default which intended to used for hosting interactsh [web client](https://github.com/projectdiscovery/interactsh-web) using GitHub pages. It turns out to be a security issue with a self-hosted interactsh server in which the user may not have configured a web client but still have a cname entry pointing to GitHub pages, making them vulnerable to subdomain takeover.\n\nThis issue was initially reported to us as a subdomain takeover for one of our domains that runs interactsh server by **Melih** at `security@projectdiscovery.io`, and after conducting an internal investigation, we determined that it was an issue with the default config of interactsh server affecting all the server running self-hosted instance of interactsh, as a result - cname entry has been removed in the latest release.\n\n#### Impact\nThis allows one to host / run arbitrary client side code (XSS) in a user's browser when browsing the vulnerable subdomain, for more details on the impact, please read this [detailed blogpost](https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/) from Detectify.\n#### Patches\nUpdate to [Interactsh server v1.0.0 ](https://github.com/projectdiscovery/interactsh/releases/tag/v1.0.0)with `go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-server@latest`\n\n#### References\nhttps://github.com/projectdiscovery/interactsh/issues/136\n\n#### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@projectdiscovery.io](mailto:security@projectdiscovery.io)\n. Top 1 search result is go:github.com/projectdiscovery/interactsh. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/projectdiscovery/interactsh."}]}, {"id": "GHSA-f854-hpxv-cw9r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIn Cronos nodes running versions before v0.6.5, it is possible to take transaction fees from Cosmos SDK's FeeCollector for the current block by sending a custom crafted MsgEthereumTx.\n\nUser funds and balances are safe.\n\n\n### Patches\nThis problem has been patched in Cronos v0.6.5 on the mempool level.\nThe next network upgrade with consensus-breaking changes will patch it on the consensus level.\n\n### Workarounds\nThere are no tested workarounds. All validator node operators are recommended to upgrade to Cronos v0.6.5 at their earliest possible convenience.\n\n### Credits\nThank you to @zb3 for reporting this issue on [Cronos Immunefi Bug Bounty Program](https://immunefi.com/bounty/cronos/), to @cyril-crypto for reproducing the issue and to @yihuang and @thomas-nguy for patching the issue on the CheckTx (mempool) and the DeliverTx (consensus) levels.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open a discussion in [crypto-org-chain/cronos](https://github.com/crypto-org-chain/cronos/discussions/new)\n* Email us at [chain@crypto.org](mailto:chain@crypto.org)\n. Top 1 search result is go:github.com/cosmos/cosmos-sdk. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/crypto-org-chain/cronos go:github.com/tharsis/ethermint go:github.com/tharsis/evmos go:github.com/tharsis/ethermint."}]}, {"id": "GHSA-m7vp-hqwv-7m5x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThe net/http Go package has a reported vulnerability tracked under CVE-2021-44716 which allows attacker controlled HTTP/2 requests to trigger unbounded memory usage in HTTP/2 endpoints. gRPC endpoints are not vulnerable as they rely on their own HTTP/2 implementation instead of the net/http package. HTTP/2 endpoints consuming the net/http package within SPIRE server and agent (or other components in this repository) that are _on by default_ include the following:\n- OIDC Discovery Provider\n- K8s Workload Registrar in webhook mode\n\nThe following endpoints are vulnerable _when enabled_:\n- SPIRE server bundle endpoint (i.e. Federation API)\n\nThe following endpoints are _NOT_ vulnerable, since HTTP/2 support in go is not enabled on non-TLS protected endpoints:\n- SPIRE server/agent metrics endpoint when configured for Prometheus\n- SPIRE server/agent health endpoints\n- SPIRE server/agent profiling endpoints\n\n### Patches\nSPIRE 1.0.3 and 1.1.3 have been released with an upgraded Go toolchain which patches the vulnerability\n\n### Workarounds\nThe vulnerability can be worked around entirely by including the `http2server=0` value in the `GODEBUG` environment variable (see https://github.com/golang/go/issues/50058). This turns off HTTP/2 support on all non-gRPC endpoints. They will still function with HTTP/1.1.\n\nThe risk associated with this vulnerability can be somewhat mitigated by limiting the exposure of the endpoints in question. If necessary, vulnerable components or endpoints that are optionally configured can be disabled temporarily.\n\n### References\n- https://github.com/golang/go/issues/50058\n- https://go-review.googlesource.com/c/go/+/370574/\n- https://nvd.nist.gov/vuln/detail/CVE-2021-44716\n. Top 1 search result is go:google.golang.org/grpc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/spiffe/spire go:github.com/spiffe/spire."}]}, {"id": "GHSA-r34v-gqmw-qvgj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Podman in libpod before 1.6.0. It resolves a symlink in the host context during a copy operation from the container to the host, because an undesired glob operation occurs. An attacker could create a container image containing particular symlinks that, when copied by a victim user to the host filesystem, may overwrite existing files with others from the host.. Top 1 search result is go:github.com/containers/libpod. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman/v4."}]}, {"id": "GHSA-mjqc-5c9x-xfcc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Duplicate Advisory\nThis advisory is a duplicate of [GHSA-hj57-j5cw-2mwp](https://github.com/advisories/GHSA-hj57-j5cw-2mwp). This link is preserved to maintain external references.\n\n## Original Description\nA vulnerability was found in Ignition where ignition configs are accessible from unprivileged containers in VMs running on VMware products. This issue is only relevant in user environments where the Ignition config contains secrets. The highest threat from this vulnerability is to data confidentiality. Possible workaround is to not put secrets in the Ignition config.. Top 1 search result is go:github.com/coreos/ignition. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/coreos/ignition/v2."}]}, {"id": "GHSA-c9gm-7rfj-8w5h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: GJSON <= 1.9.2 allows attackers to cause a redos via crafted JSON input.. Top 1 search result is go:github.com/tidwall/gjson. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/tidwall/gjson."}]}, {"id": "GHSA-mj73-5x75-9phh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Insecure permissions (777) are set on `$HOME/.singularity` when it is newly created by Singularity (version from 3.3.0 to 3.5.1), which could lead to an information leak, and malicious redirection of operations performed against Sylabs cloud services.. Top 1 search result is go:github.com/sylabs/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/sylabs/singularity."}]}, {"id": "GHSA-vvmq-fwmg-2gjc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Flux2 can reconcile the state of a remote cluster when provided with a [kubeconfig](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#file-references) with the correct access rights. `Kubeconfig` files can define [commands](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins) to be executed to generate on-demand authentication tokens. A malicious user with write access to a Flux source or direct access to the target cluster, could craft a `kubeconfig` to execute arbitrary code inside the controller\u2019s container.\n\nIn multi-tenancy deployments this can also lead to privilege escalation if the controller's service account has elevated permissions.\n\n### Impact\n\nWithin the affected versions range, one of the permissions set below would be required for the vulnerability to be exploited:\n- Direct access to the cluster to create Flux `Kustomization` or `HelmRelease` objects and Kubernetes Secrets.\n- Direct access to the cluster to modify existing Kubernetes secrets being used as `kubeconfig` in existing Flux `Kustomization` or `HelmRelease` objects.\n- Direct access to the cluster to modify existing Flux `Kustomization` or `HelmRelease` objects and access to create or modify existing Kubernetes secrets.\n- Access rights to make changes to a configured Flux Source (i.e. Git repository).\n\n### Patches\n\nThis vulnerability was fixed in kustomize-controller [v0.23.0](https://github.com/fluxcd/kustomize-controller/releases/tag/v0.23.0) and helm-controller [v0.19.0](https://github.com/fluxcd/helm-controller/releases/tag/v0.19.0), both included in flux2 [v0.29.0](https://github.com/fluxcd/flux2/releases/tag/v0.29.0). Starting from the fixed versions, both controllers disable the use of command execution from `kubeconfig` files by default, users have to opt-in by adding the flag `--insecure-kubeconfig-exec` to the controller\u2019s command arguments. Users are no longer allowed to refer to files in the controller\u2019s filesystem in the `kubeconfig` files provided for the remote apply feature.\n\n### Workarounds\n\n- The functionality can be disabled via Validating Admission webhooks (e.g. OPA Gatekeeper, Kyverno) by restricting users from being able to set the `spec.kubeConfig` field in Flux `Kustomization` and `HelmRelease` objects.\n- Applying restrictive AppArmor and SELinux profiles on the controller\u2019s pod to limit what binaries can be executed.\n\n### Credits\n\nThe Flux engineering team found and patched this vulnerability.\n\n### For more information\n\nIf you have any questions or comments about this advisory please open an issue in the [flux2 repository](http://github.com/fluxcd/flux2).\n. Top 1 search result is go:github.com/fluxcd/flux2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/fluxcd/flux2 go:github.com/fluxcd/kustomize-controller go:github.com/fluxcd/helm-controller."}]}, {"id": "GHSA-6p8v-8cq8-v2r3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nUsers with host file system access on a node and the privileges to run as group ID 1000 can gain access to the per node API of Cilium via Unix domain socket on the host where Cilium is running. If a malicious user is able to gain unprivileged access to a user corresponding to this group, then they can leverage this access to compromise the integrity as well as system availability on that host. Operating Systems that have unprivileged users **not** belonging the group ID 1000 are **not** affected by this vulnerability.\n\nBest practices for managing the secure deployment of Kubernetes clusters will typically limit the ability for a malicious user to deploy pods with access to this group or to access the host filesystem, and limit user access to the nodes for users belonging to this group. These best practices include (but are not limited to) enforcing Admission Control policies to limit the configuration of Kubernetes Pod [hostPath](https://kubernetes.io/docs/concepts/storage/volumes/#hostpath) and [SecurityContext](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/) fields.\n\n### Patches\n\nCilium versions >=1.9.16, >=1.10.11, >=1.11.5 mitigate this issue by setting the default group to 0 (root).\n\n### Workarounds\n\nPrevent Cilium from running with group 1000 by modifying Cilium's DaemonSet to run with the following command:\n\n```yaml\n      containers:\n      - name: cilium-agent\n        args:\n        - -c\n        - \"groupdel cilium && cilium-agent --config-dir=/tmp/cilium/config-map\"\n        command:\n        - bash\n```\ninstead of\n```yaml\n      containers:\n      - name: cilium-agent\n        args:\n        - --config-dir=/tmp/cilium/config-map\n        command:\n        - cilium-agent\n```\n\n### Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent and Form 3 to prepare these mitigations.  Special thanks to Daniel Iziourov and Daniel Teixeira for their cooperation.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at [security@cilium.io](mailto:security@cilium.io)\n. Top 1 search result is go:github.com/cilium/cilium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cilium/cilium go:github.com/cilium/cilium go:github.com/cilium/cilium."}]}, {"id": "GHSA-2h9c-34v6-3qmr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Kubernetes in OpenShift3 allows remote authenticated users to use the private images of other users should they know the name of said image.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kubernetes."}]}, {"id": "GHSA-fp37-c92q-4pwq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Kubernetes kube-apiserver mistakenly allows access to a cluster-scoped custom resource if the request is made as if the resource were namespaced. Authorizations for the resource accessed in this manner are enforced using roles and role bindings within the namespace, meaning that a user with access only to a resource in one namespace could create, view update or delete the cluster-scoped resource (according to their namespace role privileges). Kubernetes affected versions include versions prior to 1.13.9, versions prior to 1.14.5, versions prior to 1.15.2, and versions 1.7, 1.8, 1.9, 1.10, 1.11, 1.12.. Top 1 search result is go:k8s.io/apiserver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/apiextensions-apiserver go:k8s.io/apiextensions-apiserver go:k8s.io/apiextensions-apiserver."}]}, {"id": "GHSA-x24g-9w7v-vprh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp go-getter before 2.0.2 allows Command Injection.. Top 1 search result is go:github.com/hashicorp/go-getter. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter/v2 go:github.com/hashicorp/go-getter/s3/v2 go:github.com/hashicorp/go-getter/gcs/v2."}]}, {"id": "GHSA-qcvw-82hh-gq38", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Istio before 1.1.13 and 1.2.x before 1.2.4 mishandles regular expressions for long URIs, leading to a denial of service during use of the JWT, VirtualService, HTTPAPISpecBinding, or QuotaSpecBinding API.. Top 1 search result is go:github.com/istio/istio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:istio.io/istio go:istio.io/istio."}]}, {"id": "GHSA-r3fq-cmmw-cpmm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: types/types.go in Containous Traefik 1.7.x through 1.7.11, when the `--api` flag is used and the API is publicly reachable and exposed without sufficient access control (which is contrary to the API documentation), allows remote authenticated users to discover password hashes by reading the Basic HTTP Authentication or Digest HTTP Authentication section, or discover a key by reading the ClientTLS section. These can be found in the JSON response to a `/api` request.. Top 1 search result is go:github.com/containous/traefik/api. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/traefik/traefik."}]}, {"id": "GHSA-r642-gv9p-2wjj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA critical vulnerability has been discovered in Argo CD which would allow unauthenticated users to impersonate as any Argo CD user or role, including the `admin` user, by sending a specifically crafted JSON Web Token (JWT) along with the request. In order for this vulnerability to be exploited, [anonymous access](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#anonymous-access) to the Argo CD instance must have been enabled. \n\nIn a default Argo CD installation, anonymous access is disabled. To find out if anonymous access is enabled in your instance, please see the *Workarounds* section of this advisory below.\n\nThe vulnerability can be exploited to impersonate as any user or role, including the built-in `admin` account regardless of whether that account is enabled or disabled. Also, the attacker does not need an account on the Argo CD instance in order to exploit this.\n\nIf anonymous access to the instance is enabled, an attacker can:\n\n* Escalate their privileges, effectively allowing them to gain the same privileges on the cluster as the Argo CD instance, which is cluster admin in a default installation. This will allow the attacker to create, manipulate and delete any resource on the cluster.\n\n* Exfiltrate data by deploying malicious workloads with elevated privileges, thus bypassing any redaction of sensitive data otherwise enforced by the Argo CD API\n\nWe **strongly recommend** that all users of Argo CD update to a version containing this patch as soon as possible, regardless of whether or not anonymous access is enabled in your instance.\n\nPlease see below for a list of versions containing a fix for this vulnerability and any possible workarounds existing for this issue.\n\n### Patches\n\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.3.4\n* v2.2.9\n* v2.1.15\n\n### Workarounds\n\n#### Disable anonymous access\n\nIf you are not able to upgrade to a patched version quickly, we highly suggest disabling anonymous access if it is enabled. \n\nTo find out whether anonymous access is enabled for your Argo CD instance, you can query the `argocd-cm` ConfigMap in the Argo CD's installation namespace. The below example assumes you have installed Argo CD to the `argocd` namespace:\n\n```shell\n$ kubectl get -n argocd cm argocd-cm -o jsonpath='{.data.users\\.anonymous\\.enabled}'\n```\n\nIf the result of this command is either empty or `\"false\"`, anonymous access to that instance is not enabled. If the result is `\"true\"`, your instance is vulnerable.\n\nTo disable anonymous access, patch the `argocd-cm` ConfigMap to either remove the `users.anonymous.enabled` field or set this field to `\"false\"`. \n\nTo set the field to `\"false\"`:\n\n```shell\n$ kubectl patch -n argocd cm argocd-cm --type=json -p='[{\"op\":\"add\", \"path\":\"/data/users.anonymous.enabled\", \"value\":\"false\"}]'\n```\nOr you can remove the field completely, thus disabling anonymous access because the default is `false`:\n\n```shell\n$ kubectl patch -n argocd cm argocd-cm --type=json -p='[{\"op\":\"remove\", \"path\":\"/data/users.anonymous.enabled\"}]'\n```\n\n### Credits\n\nThe Argo CD team would like to thank Mark Pim and Andrzej Hajto, who discovered this vulnerability and reported it in a responsible way to us.\n\n### For more information\n\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd."}]}, {"id": "GHSA-6452-jr93-r5qm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: b3log Wide before 1.6.0 allows three types of attacks to access arbitrary files. First, the attacker can write code in the editor, and compile and run it approximately three times to read an arbitrary file. Second, the attacker can create a symlink, and then place the symlink into a ZIP archive. An unzip operation leads to read access, and write access (depending on file permissions), to the symlink target. Third, the attacker can import a Git repository that contains a symlink, similarly leading to read and write access.. Top 1 search result is go:github.com/b3log/wide. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/b3log/wide."}]}, {"id": "GHSA-27mh-3343-6hg5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper bounds checking, a number of methods in dhowden tag before 0.0.0-20201120070457-d52dcb253c63 can trigger a panic due to attempted out-of-bounds reads. If the package is used to parse user supplied input, this may be used as a vector for a denial of service attack.. Top 1 search result is go:github.com/dhowden/tag. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dhowden/tag."}]}, {"id": "GHSA-cjr4-fv6c-f3mv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp go-getter through 2.0.2 does not safely perform downloads. Arbitrary host access was possible via go-getter path traversal, symlink processing, and command injection flaws.. Top 1 search result is go:github.com/hashicorp/go-getter. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter/v2 go:github.com/hashicorp/go-getter/s3/v2 go:github.com/hashicorp/go-getter/gcs/v2."}]}, {"id": "GHSA-w3x4-9854-95x8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Rancher Labs rancher server 1.2.0+ is vulnerable to authenticated users disabling access control via an API call. This is fixed in versions rancher/server:v1.2.4, rancher/server:v1.3.5, rancher/server:v1.4.3, and rancher/server:v1.5.3.. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-px5r-fqj6-r2f8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Gogs 0.11.53, an attacker can use a crafted .eml file to trigger MIME type sniffing, which leads to XSS, as demonstrated by Internet Explorer, because an \"X-Content-Type-Options: nosniff\" header is not sent.. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gogs.io/gogs."}]}, {"id": "GHSA-3vm4-22fp-5rfm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers. An attacker can craft an authentication request message for the `gssapi-with-mic` method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.. Top 1 search result is go:golang.org/x/crypto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/crypto."}]}, {"id": "GHSA-jmrx-5g74-6v2f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Kubernetes client-go library logs request headers at verbosity levels of 7 or higher. This can disclose credentials to unauthorized users via logs or command output. Kubernetes components (such as kube-apiserver) prior to v1.16.0, which make use of basic or bearer token authentication, and run at high verbosity levels, are affected.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/client-go go:k8s.io/kubernetes."}]}, {"id": "GHSA-wg79-2cgp-qrjm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper bounds checking, a number of methods in dhowden tag before 0.0.0-20201120070457-d52dcb253c63 can trigger a panic via `readAtomData` due to attempted out-of-bounds reads. If the package is used to parse user supplied input, this may be used as a vector for a denial of service attack.. Top 1 search result is go:github.com/dhowden/tag. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dhowden/tag."}]}, {"id": "GHSA-h62f-wm92-2cmw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Docker Registry before 2.6.2 in Docker Distribution does not properly restrict the amount of content accepted from a user, which allows remote attackers to cause a denial of service (memory consumption) via the manifest endpoint.\n### Specific Go Packages Affected\ngithub.com/docker/distribution/registry/storage\ngithub.com/docker/distribution/registry/handlers. Top 1 search result is go:github.com/docker/docker. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/docker/distribution."}]}, {"id": "GHSA-4fc7-hc63-7fjg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis issue only happens when the user configures access credentials to a private repository in Rancher inside `Apps & Marketplace > Repositories`. It affects Rancher versions 2.5.0 up to and including 2.5.11 and from 2.6.0 up to and including 2.6.2.\n\nAn insufficient check of the same-origin policy when downloading Helm charts from a configured private repository can lead to exposure of the repository credentials to a third-party provider. This exposure happens when the private repository:\n\n1. Does an HTTP redirect to a third-party repository or external storage provider.\n2. Downloads an icon resource for the chart hosted on a third-party provider.\n\nThe address of the private repository is not leaked, only the credentials are leaked in the HTTP `Authorization` header in base64 format.\n\nWith the patched versions, the default behavior now is to only send the private repository credentials when subdomain or domain hostname match when following the redirect or downloading external resources.\n\n### Patches\nPatched versions include releases 2.5.12, 2.6.3 and later versions.\n\n### Workarounds\n1. Update Rancher to a patched version.\n2. Check the Helm charts in your configured private repository for possible redirects to third-party storage, and for Helm chart icons from third-party sources.\n3. Evaluate any Helm chart that might lead to the mentioned scenario and change affected credentials if deemed necessary.\n\n### References\nInformation about the same-origin check and how to disable it is available in Rancher [documentation](https://rancher.com/docs/rancher/v2.6/en/helm-charts/#repositories).\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Reach out to [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n* Open an issue in [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n* Verify our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-7pwf-jg34-hxwp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The kustomize-controller enables the use of Kustomize\u2019s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use a specially crafted `kustomization.yaml` to cause Denial of Service at controller level.\n\nIn multi-tenancy deployments this can lead to multiple tenants not being able to apply their Kustomizations until the malicious `kustomization.yaml` is removed and the controller restarted.\n\n### Impact\n\nWithin the affected versions, users with write access to a Flux source are able to craft a malicious `kustomization.yaml` file which causes the controller to enter an endless loop.\n\n### Patches\n\nThis vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce better handling of Kustomization files blocking references that could lead to endless loops.\n\n### Credits\n\nThe Flux engineering team found and patched this vulnerability.\n\n### For more information\n\nIf you have any questions or comments about this advisory please open an issue in the [flux2 repository](http://github.com/fluxcd/flux2).. Top 1 search result is go:github.com/fluxcd/kustomize-controller. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/fluxcd/kustomize-controller go:github.com/fluxcd/flux2."}]}, {"id": "GHSA-4r78-hx75-jjj2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka `x/net/html`) through 2018-09-25 in Go mishandles `<svg><template><desc><t><svg></template>`, leading to a `panic: runtime error` (index out of range) in `(*nodeStack).pop` in node.go, called from `(*parser).clearActiveFormattingElements`, during an `html.Parse` call.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-hp87-p4gw-j4gq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue in the Unmarshal function in Go-Yaml v3 can cause a program to panic when attempting to deserialize invalid input.. Top 1 search result is go:github.com/go-yaml/yaml. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gopkg.in/yaml.v3."}]}, {"id": "GHSA-j77r-2fxf-5jrw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The kustomize-controller enables the use of Kustomize\u2019s functionality when applying Kubernetes declarative state onto a cluster. A malicious user can use built-in features and a specially crafted `kustomization.yaml` to expose sensitive data from the controller\u2019s pod filesystem. In multi-tenancy deployments this can lead to privilege escalation if the controller's service account has elevated permissions.\n\nWithin the affected versions, users with write access to a Flux source are able to use built-in features to expose sensitive data from the controller\u2019s pod filesystem using a malicious `kustomization.yaml` file.\n\nThis vulnerability was fixed in kustomize-controller v0.24.0 and included in flux2 v0.29.0 released on 2022-04-20. The changes introduce a new Kustomize file system implementation which ensures that all files being handled are contained within the Kustomization working directory, blocking references to any files that do not meet that requirement.\n\nAutomated tooling (e.g. conftest) could be employed as a workaround, as part of a user's CI/CD pipeline to ensure that their `kustomization.yaml` files conform with specific policies, blocking access to sensitive path locations.. Top 1 search result is go:github.com/fluxcd/kustomize-controller. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/fluxcd/kustomize-controller go:github.com/fluxcd/flux2."}]}, {"id": "GHSA-w45j-f832-hxvh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA DTLS Client could provide a Certificate that it doesn't posses the private key for and Pion DTLS wouldn't reject it. \n\nThis issue affects users that are using Client certificates only. The connection itself is still secure. The Certificate provided by clients can't be trusted when using a Pion DTLS server prior to v2.1.5\n\n### Patches\nUpgrade to Pion DTLS v2.1.5\n\n### Workarounds\nNo workarounds available, upgrade to Pion DTLS v2.1.5\n\n### References\nThank you to [Juho Nurminen](https://github.com/jupenur) and the Mattermost team for discovering and reporting this. \n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Pion DTLS](http://github.com/pion/dtls)\n* Email us at [team@pion.ly](mailto:team@pion.ly). Top 1 search result is go:github.com/pion/dtls. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/pion/dtls go:github.com/pion/dtls/v2."}]}, {"id": "GHSA-r5c5-pr8j-pfp7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in supplementary Go cryptography libraries, aka golang-googlecode-go-crypto, before 2019-03-20. A flaw was found in the amd64 implementation of golang.org/x/crypto/salsa20 and golang.org/x/crypto/salsa20/salsa. If more than 256 GiB of keystream is generated, or if the counter otherwise grows greater than 32 bits, the amd64 implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.\n\n### Specific Go Packages Affected\ngolang.org/x/crypto/salsa20/salsa. Top 1 search result is go:golang.org/x/crypto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/crypto."}]}, {"id": "GHSA-xmg8-99r8-jc2j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerability was found in Argo CD that allows an attacker to spoof error messages on the login screen when SSO is enabled.\n\nIn order to exploit this vulnerability, an attacker would have to trick the victim to visit a specially crafted URL which contains the message to be displayed.\n\nAs far as the research of the Argo CD team concluded, it is not possible to specify any active content (e.g. Javascript) or other HTML fragments (e.g. clickable links) in the spoofed message.\n\n### Patched versions\n\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.3.4\n* v2.2.9\n* v2.1.15\n\n### Workarounds\n\nNo workaround available.\n\n#### Mitigations\n\nIt is advised to update to an Argo CD version containing a fix for this issue (see *Patched versions* above).\n\n### Credits\n\nThis vulnerability was discovered by Naufal Septiadi (<naufal@horangi.com>) and reported to us in a responsible way. \n\n### For more information\n\n<!-- Use only one of the paragraphs below. Remove all others. -->\n\n<!-- For Argo CD -->\n\n* Open an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\n* Join us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd."}]}, {"id": "GHSA-wp7w-vx86-vj9h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: It has been discovered that podman before version 0.6.1 does not drop capabilities when executing a container as a non-root user. This results in unnecessary privileges being granted to the container.. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman/v4."}]}, {"id": "GHSA-q4rr-64r9-fwgf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In all Kubernetes versions prior to v1.11.8, v1.12.6, and v1.13.4, users that are authorized to make patch requests to the Kubernetes API Server can send a specially crafted patch of type \"json-patch\" (e.g. `kubectl patch --type json` or `\"Content-Type: application/json-patch+json\"`) that consumes excessive resources while processing, causing a Denial of Service on the API Server.. Top 1 search result is go:github.com/evanphx/json-patch. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kubernetes go:k8s.io/kubernetes go:k8s.io/kubernetes go:k8s.io/kubernetes."}]}, {"id": "GHSA-6h8c-gw33-cjm2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The UI in DevSpace 4.13.0 allows web sites to execute actions on pods (on behalf of a victim) because of a lack of authentication for the WebSocket protocol. This leads to remote code execution.. Top 1 search result is go:github.com/loft-sh/devspace. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/loft-sh/devspace."}]}, {"id": "GHSA-ph3w-2843-72mx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository go-gitea/gitea prior to 1.16.9 via unfiltered pdfs. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:code.gitea.io/gitea."}]}, {"id": "GHSA-p5f9-c9j9-g8qx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gitea before 1.16.7 does not escape the shell out for `git fetch remote` allowing for shell command injection. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:code.gitea.io/gitea."}]}, {"id": "GHSA-9pg5-3pjc-f8wm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In ginadmin through 05-10-2022 the incoming path value is not filtered, resulting in directory traversal. A [patch](https://github.com/gphper/ginadmin/commit/726109f01ad23523715f36f7d272958064666a30) is available on the `master` branch of the repository.. Top 1 search result is go:github.com/gphper/ginadmin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gphper/ginadmin."}]}, {"id": "GHSA-66x3-6cw3-v5gj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\n[go-tuf](https://github.com/theupdateframework/go-tuf) does not correctly implement the [client workflow](https://theupdateframework.github.io/specification/v1.0.28/index.html#detailed-client-workflow) for updating the metadata files for roles other than the root role. Specifically, checks for rollback attacks are not implemented correctly meaning an attacker can cause clients to install software that is older than the software which the client previously knew to be available, and may include software with known vulnerabilities.\n\nIn more detail, the client code of go-tuf has several issues in regards to preventing rollback attacks:\n1. It does not take into account the content of any previously trusted metadata, if available, before proceeding with updating roles other than the root role (i.e., steps 5.4.3.1 and 5.5.5 of the detailed client workflow). This means that any form of version verification done on the newly-downloaded metadata is made using the default value of zero, which always passes. \n1. For both timestamp and snapshot roles, go-tuf saves these metadata files as trusted before verifying if the version of the metafiles they refer to is correct (i.e., steps 5.5.4 and 5.6.4 of the detailed client workflow).\n\n### Patches\n\nA fix is available in version 0.3.0 or newer.\n\n### Workarounds\n\nNo workarounds are known for this issue apart from upgrading.\n\n### References\n\n* Commit resolving the issue https://github.com/theupdateframework/go-tuf/commit/ed6788e710fc3093a7ecc2d078bf734c0f200d8d\n* TUF specification version against which this vulnerability is observed is [v.1.0.28](https://theupdateframework.github.io/specification/v1.0.28/index.html#detailed-client-workflow). For more details, refer to Section 5.\n* Codebase that is affected is [go-tuf@f0c3294f63b9145029464164f9bce49553b77cbb](https://github.com/theupdateframework/go-tuf/tree/f0c3294f63b9145029464164f9bce49553b77cbb)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [go-tuf](https://github.com/theupdateframework/go-tuf/issues)\n* Email us at TUF's [mailing list](mailto:theupdateframework@googlegroups.com)\n* The [#tuf](https://cloud-native.slack.com/archives/C8NMD3QJ3) channel on [CNCF Slack](https://slack.cncf.io/).. Top 1 search result is go:github.com/theupdateframework/go-tuf. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/theupdateframework/go-tuf."}]}, {"id": "GHSA-p83v-8vmr-qfv9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Sylabs Singularity 2.4 to 2.6 allows local users to conduct Improper Input Validation attacks.. Top 1 search result is go:github.com/sylabs/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/sylabs/singularity."}]}, {"id": "GHSA-4x32-h296-rg6j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Singularity 2.3.0 through 2.5.1 is affected by an incorrect access control on systems supporting overlay file system. When using the overlay option, a malicious user may access sensitive information by exploiting a few specific Singularity features.. Top 1 search result is go:github.com/sylabs/singularity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hpcng/singularity."}]}, {"id": "GHSA-5824-6jfv-xr3r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In ginadmin through 05-10-2022, the incoming path value is not filtered, resulting in arbitrary file reading. A [patch](https://github.com/gphper/ginadmin/commit/726109f01ad23523715f36f7d272958064666a30) is available on the `master` branch of the repository.. Top 1 search result is go:github.com/gphper/ginadmin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gphper/ginadmin."}]}, {"id": "GHSA-w4xh-w33p-4v29", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: GitHub Git LFS before 2.1.1 allows remote attackers to execute arbitrary commands via an ssh URL with an initial dash character in the hostname, located on a `url =` line in a `.lfsconfig` file within a repository.\n### Specific Go Packages Affected\ngithub.com/git-lfs/git-lfs/lfsapi. Top 1 search result is go:github.com/git-lfs/git-lfs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/git-lfs/git-lfs."}]}, {"id": "GHSA-2wmf-p7f8-w42h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Envoy 1.9.0 and before does not normalize HTTP URL paths. A remote attacker may craft a relative path, e.g., `something/../admin`, to bypass access control, e.g., a block on `/admin`. A backend server could then interpret the non-normalized path and provide an attacker access beyond the scope provided for by the access control policy.. Top 1 search result is go:github.com/envoyproxy/envoy. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/envoyproxy/envoy."}]}, {"id": "GHSA-rh5f-2w6r-q7vj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A path traversal vulnerability has been discovered in podman before version 1.4.0 in the way it handles symlinks inside containers. An attacker who has compromised an existing container can cause arbitrary files on the host filesystem to be read/written when an administrator tries to copy a file from/to the container.. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman."}]}, {"id": "GHSA-q7fx-wm2p-qfj8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Consul 1.4.3 lacks server hostname verification for agent-to-agent TLS communication. In other words, the product behaves as if `verify_server_hostname` were set to false, even when it is actually set to true. This is fixed in 1.4.4.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/consul."}]}, {"id": "GHSA-jw82-xjgr-g6f8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Withdrawn Advisory\nThis advisory has been withdrawn. This link is maintained to preserve external references.\n\n## Original Description\nAn insecure modification vulnerability flaw was found in containers using nmstate/kubernetes-nmstate-handler. An attacker with access to the container could use this flaw to modify /etc/passwd and escalate their privileges. Versions before kubernetes-nmstate-handler-container-v2.3.0-30 are affected.. Top 1 search result is go:github.com/nmstate/kubernetes-nmstate. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/nmstate/kubernetes-nmstate."}]}, {"id": "GHSA-x5fh-fvvr-892f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Grafana version confirmed for 5.2.4 and 5.3.0 contains a Cross Site Scripting (XSS) vulnerability in Influxdb and Graphite query editor that can result in Running arbitrary js code in victims browser.. This attack appear to be exploitable via Authenticated user must click on the input field where the payload was previously inserted... Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/grafana/grafana."}]}, {"id": "GHSA-2wp2-chmh-r934", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka x/net/html) through 2018-09-17 in Go mishandles <math><template><mo><template>, leading to a \"panic: runtime error\" in parseCurrentToken in parse.go during an html.Parse call.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-r4m4-pmvw-m6j5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Apache Thrift Go client library exposed the potential during code generation for command injection due to using an external formatting tool. Affected Apache Thrift 0.9.3 and older, Fixed in Apache Thrift 0.10.0.. Top 1 search result is go:github.com/apache/thrift. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/apache/thrift."}]}, {"id": "GHSA-gc62-j469-9gjm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Rancher 1 and 2 through 2.2.3, unprivileged users (if allowed to deploy nodes) can gain admin access to the Rancher management plane because node driver options intentionally allow posting certain data to the cloud. The problem is that a user could choose to post a sensitive file such as /root/.kube/config or /var/lib/rancher/management-state/cred/kubeconfig-system.yaml.. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-f4w6-3rh6-6q4q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper input validation in Kubernetes CSI sidecar containers for external-provisioner (<v0.4.3, <v1.0.2, v1.1, <v1.2.2, <v1.3.1), external-snapshotter (<v0.4.2, <v1.0.2, v1.1, <1.2.2), and external-resizer (v0.1, v0.2) could result in unauthorized PersistentVolume data access or volume mutation during snapshot, restore from snapshot, cloning and resizing operations.. Top 1 search result is go:github.com/kubernetes-csi/external-provisioner. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/kubernetes-csi/external-provisioner go:github.com/kubernetes-csi/external-provisioner go:github.com/kubernetes-csi/external-provisioner go:github.com/kubernetes-csi/external-provisioner go:github.com/kubernetes-csi/external-provisioner go:github.com/kubernetes-csi/external-snapshotter/v6 go:github.com/kubernetes-csi/external-snapshotter/v6 go:github.com/kubernetes-csi/external-snapshotter/v6 go:github.com/kubernetes-csi/external-resizer go:github.com/kubernetes-csi/external-resizer."}]}, {"id": "GHSA-c92w-72c5-9x59", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A security issue was discovered in the kube-state-metrics versions v1.7.0 and v1.7.1. An experimental feature was added to the v1.7.0 release that enabled annotations to be exposed as metrics. By default, the kube-state-metrics metrics only expose metadata about Secrets. However, a combination of the default `kubectl` behavior and this new feature can cause the entire secret content to end up in metric labels thus inadvertently exposing the secret content in metrics. This feature has been reverted and released as the v1.7.2 release. If you are running the v1.7.0 or v1.7.1 release, please upgrade to the v1.7.2 release as soon as possible.. Top 1 search result is go:k8s.io/kube-state-metrics. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kube-state-metrics."}]}, {"id": "GHSA-6q5m-22mq-q2xv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Istio before 1.8.6 and 1.9.x before 1.9.5 has a remotely exploitable vulnerability where an HTTP request path with multiple slashes or escaped slash characters (%2F or %5C) could potentially bypass an Istio authorization policy when path based authorization rules are used.. Top 1 search result is go:github.com/istio/istio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:istio.io/istio go:istio.io/istio."}]}, {"id": "GHSA-8vrw-m3j9-j27c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: jsonparser before 1.1.1 allows attackers to cause a denial of service via a GET call.. Top 1 search result is go:github.com/buger/jsonparser. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/buger/jsonparser."}]}, {"id": "GHSA-cmv8-6362-r5w9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes.\n\n* The attacker creates a workflow that produces a HTML artifact that contains a HTML file that contains a script which uses XHR calls to interact with the Argo Server API.\n* The attacker emails the deep-link to the artifact to their victim. The victim opens the link, the script starts running.\n\nAs the script has access to the Argo Server API (as the victim), so may do the following (if the victim may):\n\n* Read information about the victim\u2019s workflows.\n* Create or delete workflows.\n\nNotes:\n\n* The attacker must be an insider: they must have access to the same cluster as the victim and must already be able to run their own workflows. \n* The attacker must have an understanding of the victim\u2019s system. They won\u2019t be able to repeatedly probe due to the social engineering  aspect.\n* The attacker is likely leave an audit trail.\n\nWe have seen no evidence of this in the wild. While the impact is high, it is very hard to exploit. \n\nWe urge all users to upgrade to the fixed versions. Disabling the Argo Server is the only known workaround. Note version 2.12 has been out of support for sometime. No fix is currently planned.\n. Top 1 search result is go:github.com/argoproj/argo-workflows. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/argoproj/argo-workflows/v3 go:github.com/argoproj/argo-workflows/v3."}]}, {"id": "GHSA-fg3x-rwq9-74cw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An SSRF vulnerability in webhooks in Gitea through 1.5.0-rc2 and Gogs through 0.11.53 allows remote attackers to access intranet services.. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:code.gitea.io/gitea go:gogs.io/gogs."}]}, {"id": "GHSA-2cjc-rgmp-x649", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Containous Traefik 1.6.x before 1.6.6, when `--api` is used, exposes the configuration and secret if authentication is missing and the API's port is publicly reachable.. Top 1 search result is go:github.com/containous/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/traefik/traefik."}]}, {"id": "GHSA-wjxw-gh3m-7pm5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA vulnerable node, if configured to use high verbosity logging, can be made to crash when handling specially crafted p2p messages sent from an attacker node. \n\n### Patches\n\nThe following PR addresses the problem: https://github.com/ethereum/go-ethereum/pull/24507\n\n### Workarounds\n\nAside from applying the PR linked above, setting loglevel to default level (`INFO`) makes the node not vulnerable to this attack.\n\n### Credits\n\nThis bug was reported by `nrv` via bounty@ethereum.org, who has gracefully requested that the bounty rewards be donated to M\u00e9decins sans fronti\u00e8res.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [go-ethereum](https://github.com/ethereum/go-ethereum)\n. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ethereum/go-ethereum."}]}, {"id": "GHSA-fcgg-rvwg-jv58", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp go-getter through 2.0.2 does not safely perform downloads. Protocol switching, endless redirect, and configuration bypass were possible via abuse of custom HTTP response header processing.. Top 1 search result is go:github.com/hashicorp/go-getter. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter/v2 go:github.com/hashicorp/go-getter/s3/v2 go:github.com/hashicorp/go-getter/gcs/v2."}]}, {"id": "GHSA-x3jr-pf6g-c48f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A message-forgery issue was discovered in `crypto/openpgp/clearsign/clearsign.go` in supplementary Go cryptography libraries 2019-03-25. According to the OpenPGP Message Format specification in RFC 4880 chapter 7, a cleartext signed message can contain one or more optional \"Hash\" Armor Headers. The \"Hash\" Armor Header specifies the message digest algorithm(s) used for the signature. However, the Go clearsign package ignores the value of this header, which allows an attacker to spoof it. Consequently, an attacker can lead a victim to believe the signature was generated using a different message digest algorithm than what was actually used. Moreover, since the library skips Armor Header parsing in general, an attacker can not only embed arbitrary Armor Headers, but also prepend arbitrary text to cleartext messages without invalidating the signatures.. Top 1 search result is go:golang.org/x/crypto. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/crypto."}]}, {"id": "GHSA-x6r5-vxfg-gq3v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: helm Before 2.7.2 is affected by: CWE-295: Improper Certificate Validation. The impact is: Unauthorized clients could connect to the server because self-signed client certs were aloowed. The component is: helm (many files updated, see https://github.com/helm/helm/pull/3152/files/1096813bf9a425e2aa4ac755b6c991b626dfab50). The attack vector is: A malicious client could connect to the server over the network. The fixed version is: 2.7.2.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm."}]}, {"id": "GHSA-39qc-96h7-956f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Some HTTP/2 implementations are vulnerable to a reset flood, potentially leading to a denial of service. Servers that accept direct connections from untrusted clients could be remotely made to allocate an unlimited amount of memory, until the program crashes. The attacker opens a number of streams and sends an invalid request over each stream that should solicit a stream of RST_STREAM frames from the peer. Depending on how the peer queues the RST_STREAM frames, this can consume excess memory, CPU, or both.\n\n### Specific Go Packages Affected\ngolang.org/x/net/http2. Top 1 search result is go:golang.org/x/net/http2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-5rh7-6gfj-mc87", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gitea 1.7.0 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Attacker is able to have victim execute arbitrary JS in browser. The component is: go-get URL generation - PR to fix: https://github.com/go-gitea/gitea/pull/5905. The attack vector is: victim must open a specifically crafted URL. The fixed version is: 1.7.1 and later.. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:code.gitea.io/gitea."}]}, {"id": "GHSA-p3x5-5xpx-9phm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Versions < 1.5 of the Kubernetes ingress default backend, which handles invalid ingress traffic, exposed prometheus metrics publicly.. Top 1 search result is go:k8s.io/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/ingress-nginx."}]}, {"id": "GHSA-fx6x-h9g4-56f8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in all versions of containernetworking/plugins before version 0.8.6, that allows malicious containers in Kubernetes clusters to perform man-in-the-middle (MitM) attacks. A malicious container can exploit this flaw by sending rogue IPv6 router advertisements to the host or other containers, to redirect traffic to the malicious container.. Top 1 search result is go:github.com/containernetworking/plugins. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containernetworking/plugins."}]}, {"id": "GHSA-hhpm-74pm-hf35", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Kubernetes ingress-nginx component prior to version 0.28.0 allows a user with the ability to create namespaces and to read and create ingress objects to overwrite the password file of another ingress which uses nginx.ingress.kubernetes.io/auth-type: basic and which has a hyphenated namespace or secret name.. Top 1 search result is go:k8s.io/ingress-nginx. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/ingress-nginx."}]}, {"id": "GHSA-83g2-8m93-v3w7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Go through 1.15.12 and 1.16.x through 1.16.4 has a golang.org/x/net/html infinite loop via crafted ParseFragment input.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-g7p7-x6w7-w6qg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An arbitrary file deletion vulnerability in Gitea v1.16.3 allows attackers to cause a Denial of Service (DoS) via deleting the configuration file.. Top 1 search result is go:code.gitea.io/gitea. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:code.gitea.io/gitea."}]}, {"id": "GHSA-7phr-6cc9-4m5q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: `public/app/features/panel/panel_ctrl.ts` in Grafana before 6.2.5 allows HTML Injection in panel drilldown links (via the Title or url field).. Top 1 search result is go:github.com/grafana/grafana. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/grafana/grafana."}]}, {"id": "GHSA-w3r9-r9w7-8h48", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Golang Facebook Thrift servers would not error upon receiving messages declaring containers of sizes larger than the payload. As a result, malicious clients could send short messages which would result in a large memory allocation, potentially leading to denial of service. This issue affects Facebook Thrift prior to v2020.03.16.00.\n\n### Specific Go Packages Affected\ngithub.com/facebook/fbthrift/thrift/lib/go/thrift. Top 1 search result is go:github.com/facebook/fbthrift. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/facebook/fbthrift."}]}, {"id": "GHSA-f7ff-xf87-f22q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An arbitrary file upload vulnerability in Mindoc v2.1-beta.5 allows attackers to execute arbitrary commands via a crafted Zip file.. Top 1 search result is go:github.com/mindoc-org/mindoc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/mindoc-org/mindoc."}]}, {"id": "GHSA-4qvx-qq5w-695p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Consul 0.5.1 through 1.4.0 can use cleartext agent-to-agent RPC communication because the `verify_outgoing` setting is improperly documented. NOTE: the vendor has provided reconfiguration steps that do not require a software upgrade.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/consul."}]}, {"id": "GHSA-cx94-mrg9-rq4j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA buffer that was used for inbound network traffic had no upper limit. Pion DTLS would buffer all network traffic from the remote user until the handshake completes or times out. An attacker could exploit this to cause excessive memory usage.\n\n### Patches\nUpgrade to Pion DTLS v2.1.4\n\n### Workarounds\nNo workarounds available, upgrade to Pion DTLS v2.1.4\n\n### References\nThank you to [Juho Nurminen](https://github.com/jupenur) and the Mattermost team for discovering and reporting this. \n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Pion DTLS](http://github.com/pion/dtls)\n* Email us at [team@pion.ly](mailto:team@pion.ly)\n. Top 1 search result is go:github.com/pion/dtls. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/pion/dtls go:github.com/pion/dtls/v2."}]}, {"id": "GHSA-cm8f-h6j3-p25c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nAn attacker can send packets that will send Pion DTLS into an infinite loop when processing.\n\n### Patches\nUpgrade to Pion DTLS v2.1.4\n\n### Workarounds\nNo workarounds available, upgrade to Pion DTLS v2.1.4\n\n### References\nThank you to [Juho Nurminen](https://github.com/jupenur) and the Mattermost team for discovering and reporting this. \n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Pion DTLS](http://github.com/pion/dtls)\n* Email us at [team@pion.ly](mailto:team@pion.ly)\n. Top 1 search result is go:github.com/pion/dtls. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/pion/dtls go:github.com/pion/dtls/v2."}]}, {"id": "GHSA-mv93-wvcp-7m7r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka `x/net/html`) through 2018-09-25 in Go mishandles <math><template><mn><b></template>, leading to a \"panic: runtime error\" (index out of range) in (*insertionModeStack).pop in node.go, called from inHeadIM, during an html.Parse call.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-8xmx-h8rq-h94j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Consul and Consul Enterprise up to version 1.9.4 key-value (KV) raw mode was vulnerable to cross-site scripting. Fixed in 1.9.5, 1.8.10 and 1.7.14.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/consul go:github.com/hashicorp/consul go:github.com/hashicorp/consul."}]}, {"id": "GHSA-hx8w-ghh8-r4xf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThis vulnerability only affects customers using the [`restricted-admin`](https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/global-permissions/#restricted-admin) role in Rancher. For this role to be active, Rancher must be bootstrapped with the environment variable `CATTLE_RESTRICTED_DEFAULT_ADMIN=true` or the configuration flag `restrictedAdmin=true`.\n\nA flaw was discovered in Rancher versions from 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3 where the `global-data` role in `cattle-global-data` namespace grants write access to the Catalogs. Since each user with any level of catalog access was bound to the `global-data` role, this grants write access to templates (`CatalogTemplates`) and template versions (`CatalogTemplateVersions`) for any user with any level of catalog access. New users created in Rancher are by default assigned to the `user` role (standard user), which is not designed to grant write catalog access. This vulnerability effectively elevates the privilege of any user to write access for the catalog template and catalog template version resources.\n\nA malicious user could abuse this vulnerability to:\n\n1. Make applications or individual versions of applications visible or hidden on the UI, by modifying `version` and `rancherMaxVersion` fields.\n2. Change the logo (field `icon`) of an application or template to an arbitrary image.\n3. Make a chart appear as a trusted or partner chart. This can be abused to make less trusted charts, such as customer defined charts, appear more legitimate than they are, by adding the label `io.rancher.certified: partner`.\n4. Swap template versions between templates of charts inside the same catalog. This can be exploited to swap the files from one chart or version to another, by changing `versionDir` field. When a user on the target cluster deploys their chart, it will deploy the modified version.\n\nThis vulnerability does not allow to modify the base64 encoded `files` fields of the `templateVersions`, so one cannot inject arbitrary data to charts that have already been pulled from their respective catalog.\n\nWithout access to the Catalog, malicious users are limited to injecting apps which already exist in a registered catalog. They would need write access to the catalog or external write access to a source repo to inject arbitrary code.\n\n### Patches\nPatched versions include releases 2.5.13, 2.6.4 and later versions.\n\n### Workarounds\nLimit access in Rancher to trusted users. There is not a direct mitigation besides upgrading to the patched Rancher versions.\n\n**Note:** If you use the `restricted-admin` as the default admin role in your environment, it's highly advised to review `CatalogTemplates` and `CatalogTemplateVersions` for possible malicious modifications.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Reach out to [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n* Open an issue in [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n* Verify our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-pvmg-xgmx-9mxh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A security issue was discovered in ingress-nginx where a user that can create or update ingress objects can use the spec.rules[].http.paths[].path field of an Ingress object (in the networking.k8s.io or extensions API group) to obtain the credentials of the ingress-nginx controller. In the default configuration, that credential has access to all secrets in the cluster.. Top 1 search result is go:k8s.io/ingress-nginx. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/ingress-nginx."}]}, {"id": "GHSA-785h-hrf7-gqxc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Docker Notary before 0.1, gotuf/signed/verify.go has a Signature Algorithm Not Matched to Key vulnerability. Because an attacker controls the field specifying the signature algorithm, they might (for example) be able to forge a signature by forcing a misinterpretation of an RSA-PSS key as Ed25519 elliptic-curve data.. Top 1 search result is go:github.com/docker/notary. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/docker/notary."}]}, {"id": "GHSA-6m8r-jh89-rq7h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') vulnerability in Rancher allows remote attackers to execute JavaScript via malicious links. This issue affects: SUSE Rancher Rancher versions prior to 2.5.6.. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-mm7g-f2gg-cw8g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Kubernetes versions 1.3.x, 1.4.x, 1.5.x, 1.6.x and prior to versions 1.7.14, 1.8.9 and 1.9.4 containers using a secret, configMap, projected or downwardAPI volume can trigger deletion of arbitrary files/directories from the nodes where they are running.. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kubernetes go:k8s.io/kubernetes go:k8s.io/kubernetes."}]}, {"id": "GHSA-927h-x4qj-r242", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The Olivier Poitrey Go CORS handler through 1.3.0 actively converts a wildcard CORS policy into reflecting an arbitrary Origin header value, which is incompatible with the CORS security design, and could lead to CORS misconfiguration security problems.. Top 1 search result is go:github.com/openshift/origin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gofiber/fiber/v2."}]}, {"id": "GHSA-ff28-f46g-r9g8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe malicious user is able to upload a crafted SVG file as the issue attachment to archive XSS. All installations [allow uploading SVG (`text/xml`) files as issue attachments (non-default)](https://github.com/gogs/gogs/blob/e51e01683408e10b3dcd2ace65e259ca7f0fd61b/conf/app.ini#L283-L284) are affected.\n\n### Patches\n\nCorrectly setting the Content Security Policy for the serving endpoint. Users should upgrade to 0.12.7 or the latest 0.13.0+dev.\n\n### Workarounds\n\n[Disable uploading SVG files (`text/xml`) as issue attachments](https://github.com/gogs/gogs/blob/e51e01683408e10b3dcd2ace65e259ca7f0fd61b/conf/app.ini#L283-L284).\n\n### References\n\nhttps://huntr.dev/bounties/34a12146-3a5d-4efc-a0f8-7a3ae04b198d/\n\n### For more information\n\nIf you have any questions or comments about this advisory, please post on https://github.com/gogs/gogs/issues/6919.\n. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gogs.io/gogs."}]}, {"id": "GHSA-5hjh-c26m-xw8w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ProxyScotch is a simple proxy server created for hoppscotch.io. The package github.com/hoppscotch/proxyscotch before 1.0.0 are vulnerable to Server-side Request Forgery (SSRF) when interceptor mode is set to proxy. It occurs when an HTTP request is made by a backend server to an untrusted URL submitted by a user. It leads to a leakage of sensitive information from the server.. Top 1 search result is go:github.com/hoppscotch/proxyscotch. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hoppscotch/proxyscotch."}]}, {"id": "GHSA-9h9f-9q8g-6764", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gophish through 0.8.0 allows XSS via a username.. Top 1 search result is go:github.com/gophish/gophish. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gophish/gophish."}]}, {"id": "GHSA-jgwg-35hf-xqrr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Withdrawn Advisory\n\nThis advisory has been withdrawn because the vulnerability does not affect a package in one of the GitHub Advisory Database's [supported ecosystems](https://github.com/github/advisory-database/blob/main/README.md#supported-ecosystems). This link is maintained to preserve external references.\n\n## Original Description\n\nA flaw was found in the `/oauth/token/request` custom endpoint of the OpenShift OAuth server allowing for XSS generation of CLI tokens due to missing X-Frame-Options and CSRF protections. If not otherwise prevented, a separate XSS vulnerability via JavaScript could further allow for the extraction of these tokens.. Top 1 search result is go:github.com/openshift/oauth-apiserver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openshift/oauth-apiserver."}]}, {"id": "GHSA-qx32-f6g6-fcfr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The route lookup process in beego prior to 1.12.9 and 2.x prior to 2.0.3 allows attackers to bypass access control. When a /`p1`/`p2`/`:name` route is configured, attackers can access it by appending .xml in various places (e.g., p1.xml instead of p1).. Top 1 search result is go:github.com/beego/beego. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/beego/beego/v2 go:github.com/beego/beego."}]}, {"id": "GHSA-vc7h-cmp3-4hw5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Istio 1.3.x before 1.3.5 is vulnerable to denial of service because `continue_on_listener_filters_timeout` is set to True, a related issue to CVE-2019-18836.. Top 1 search result is go:istio.io/istio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:istio.io/istio."}]}, {"id": "GHSA-85c5-ccm8-vr96", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: headerv2.go in mastercactapus proxyprotocol before 0.0.2, as used in the mastercactapus caddy-proxyprotocol plugin through 0.0.2 for Caddy, allows remote attackers to cause a denial of service (webserver panic and daemon crash) via a crafted HAProxy PROXY v2 request with truncated source/destination address data.. Top 1 search result is go:github.com/mastercactapus/proxyprotocol. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/mastercactapus/proxyprotocol."}]}, {"id": "GHSA-hj57-j5cw-2mwp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nUnprivileged software in VMware VMs, including software running in unprivileged containers, can retrieve an Ignition config stored in a hypervisor guestinfo variable or OVF environment.  If the Ignition config contains secrets, this can result in the compromise of sensitive information.\n\n### Patches\nIgnition 2.14.0 and later [adds](https://github.com/coreos/ignition/pull/1350) a new systemd service, `ignition-delete-config.service`, that deletes the Ignition config from supported hypervisors (currently VMware and VirtualBox) during the first boot.  This ensures that unprivileged software cannot retrieve the Ignition config from the hypervisor.\n\nIf you have external tooling that requires the Ignition config to remain accessible in VM metadata after provisioning, and your Ignition config does not include sensitive information, you can prevent Ignition 2.14.0 and later from deleting the config by masking `ignition-delete-config.service`.  For example:\n\n```json\n{\n  \"ignition\": {\n    \"version\": \"3.0.0\"\n  },\n  \"systemd\": {\n    \"units\": [\n      {\n        \"name\": \"ignition-delete-config.service\",\n        \"mask\": true\n      }\n    ]\n  }\n}\n```\n\n### Workarounds\n[Avoid storing secrets](https://coreos.github.io/ignition/operator-notes/#secrets) in Ignition configs. In addition to VMware, many cloud platforms allow unprivileged software in a VM to retrieve the Ignition config from a networked cloud metadata service. While platform-specific mitigation is possible, such as firewall rules that prevent access to the metadata service, it's best to store secrets in a dedicated platform such as [Hashicorp Vault](https://www.vaultproject.io/).\n\n### Advice to Linux distributions\nLinux distributions that ship Ignition should ensure the new `ignition-delete-config.service` is installed and enabled by default.\n\nIn addition, we recommend shipping a service similar to `ignition-delete-config.service` that runs when existing machines are upgraded, similar to the one in https://github.com/coreos/fedora-coreos-config/pull/1738. Consider giving your users advance notice of this change, and providing instructions for masking `ignition-delete-config.service` on existing nodes if users have tooling that requires the Ignition config to remain accessible in VM metadata.\n\n### References\nFor more information, see #1300 and #1350.\n\n### For more information\nIf you have any questions or comments about this advisory, [open an issue in Ignition](https://github.com/coreos/ignition/issues/new/choose) or email the CoreOS [development mailing list](https://lists.fedoraproject.org/archives/list/coreos@lists.fedoraproject.org/).. Top 1 search result is go:github.com/coreos/ignition. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/coreos/ignition/v2 go:github.com/coreos/ignition."}]}, {"id": "GHSA-2jq6-ffph-p4h8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Kubernetes versions 1.5.x, 1.6.x, 1.7.x, 1.8.x, and prior to version 1.9.6, the kubectl cp command insecurely handles tar data returned from the container, and can be caused to overwrite arbitrary local files.. Top 1 search result is go:github.com/kubernetes/kubernetes. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/kubernetes."}]}, {"id": "GHSA-fhm8-cxcv-pwvc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Consul (and Consul Enterprise) 1.4.x before 1.4.3 allows a client to bypass intended access restrictions and obtain the privileges of one other arbitrary token within secondary datacenters, because a token with literally \"<hidden>\" as its secret is used in unusual circumstances.. Top 1 search result is go:github.com/hashicorp/consul. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/consul."}]}, {"id": "GHSA-h86h-8ppg-mxmh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: golang.org/x/net/http/httpguts in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-gxhv-3hwf-wjp9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An out of bound write can occur when patching an Openshift object using the `oc patch` functionality in OpenShift Container Platform before 3.7. An attacker can use this flaw to cause a denial of service attack on the Openshift master api service which provides cluster management.. Top 1 search result is go:github.com/openshift/origin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/evanphx/json-patch go:github.com/evanphx/json-patch."}]}, {"id": "GHSA-xrxm-mvqm-r553", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: All versions of Helm between Helm >=2.0.0 and < 2.12.2 contains a CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in The commands `helm fetch --untar` and `helm lint some.tgz` that can result when chart archive files are unpacked a file may be unpacked outside of the target directory. This attack appears to be exploitable via a victim must run a helm command on a specially crafted chart archive. This vulnerability appears to have been fixed in 2.12.2.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm."}]}, {"id": "GHSA-8mpq-fmr3-6jxv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: LXD before version 0.19-0ubuntu5 `doUidshiftIntoContainer()` has an unsafe `Chmod()` call that races against the stat in the `Filepath.Walk()` function. A symbolic link created in that window could cause any file on the system to have any mode of the attacker's choice.\n\n### Specific Go Packages Affected\ngithub.com/lxc/lxd/shared. Top 1 search result is go:github.com/lxc/lxd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/lxc/lxd."}]}, {"id": "GHSA-fcf9-6fv2-fc5v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka x/net/html) through 2018-09-17 in Go mishandles <template><tBody><isindex/action=0>, leading to a \"panic: runtime error\" in inBodyIM in parse.go during an html.Parse call.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-vmhj-p9hw-vgrf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A flaw was discovered in Podman where it incorrectly allows containers when created to overwrite existing files in volumes, even if they are mounted as read-only. When a user runs a malicious container or a container based on a malicious image with an attached volume that is used for the first time, it is possible to trigger the flaw and overwrite files in the volume. This issue was introduced in version 1.6.0.. Top 1 search result is go:github.com/containers/podman. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman go:github.com/containers/podman/v2."}]}, {"id": "GHSA-p5pc-m4q7-7qm9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Helm 2.x before 2.15.2, commands that deal with loading a chart as a directory or packaging a chart provide an opportunity for a maliciously designed chart to include sensitive content such as `/etc/passwd`, or to execute a denial of service (DoS) via a special file such as /dev/urandom, via symlinks. No version of Tiller is known to be impacted. This is a client-only issue.. Top 1 search result is go:helm.sh/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm."}]}, {"id": "GHSA-hgr8-6h9x-f7q9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Some HTTP/2 implementations are vulnerable to ping floods, potentially leading to a denial of service. The attacker sends continual pings to an HTTP/2 peer, causing the peer to build an internal queue of responses. Depending on how efficiently this data is queued, this can consume excess CPU, memory, or both.\n\n### Specific Go Packages Affected\ngolang.org/x/net/http2. Top 1 search result is go:golang.org/x/net/http2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-28xp-g7f6-7mhf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Syncthing version 0.14.33 and older erronously versions symlinks when they are deleted. If a directory is then created with the same name, a file created in that directory, and the file deleted, it is moved into the symlink target. This can lead to symlink traversal resulting in arbitrary file overwrite.. Top 1 search result is go:github.com/syncthing/syncthing. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/syncthing/syncthing."}]}, {"id": "GHSA-2w2v-xcr9-mj4m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Nomad 0.9.0 through 0.9.1 has Incorrect Access Control via the exec driver.. Top 1 search result is go:github.com/hashicorp/nomad. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/nomad."}]}, {"id": "GHSA-j249-ghv5-7mxv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Docker CE and EE before 18.09.8 (as well as Docker EE before 17.06.2-ee-23 and 18.x before 18.03.1-ee-10), Docker Engine in debug mode may sometimes add secrets to the debug log. This applies to a scenario where docker stack deploy is run to redeploy a stack that includes (non external) secrets. It potentially applies to other API users of the stack API if they resend the secret.. Top 1 search result is go:github.com/docker/docker-ce. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/docker/docker."}]}, {"id": "GHSA-vj95-2f9q-x7h6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The default configuration of glot-www through 2018-05-19 allows remote attackers to execute arbitrary code because glot-code-runner supports os.system within a \"python\" \"files\" \"content\" JSON file.. Top 1 search result is go:github.com/prasmussen/glot-code-runner. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/prasmussen/glot-code-runner."}]}, {"id": "GHSA-vfxc-r2gx-v2vq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Hybrid Group Gobot before 1.13.0. The mqtt subsystem skips verification of root CA certificates by default.\n\n### Specific Go Packages Affected\ngithub.com/hybridgroup/gobot/platforms/mqtt. Top 1 search result is go:github.com/hybridgroup/gobot. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hybridgroup/gobot."}]}, {"id": "GHSA-qwrf-gfpj-qvj6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThe primary use case for Smokescreen is to prevent server-side request forgery (SSRF) attacks in which external attackers leverage the behavior of applications to connect to or scan internal infrastructure.\n\nSmokescreen also offers an option to deny access to additional (e.g., external) URLs by way of a deny list. There was an issue in Smokescreen that made it possible to bypass the deny list feature by surrounding the hostname with square brackets (e.g. `[example.com]`). \n\n### Recommendation\nUpgrade Smokescreen to version 0.0.4 or later.\n\n### Acknowledgements\nThanks to [Axel Chong](https://github.com/haxatron) for reporting the issue.\n\n### For more information\nEmail us at security@stripe.com\n\n. Top 1 search result is go:github.com/stripe/smokescreen. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/stripe/smokescreen."}]}, {"id": "GHSA-x7f3-62pm-9p38", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue in the component ast/parser.go of Open Policy Agent v0.39.0 causes the application to incorrectly interpret every expression, causing a Denial of Service (DoS) via triggering out-of-range memory access.. Top 1 search result is go:github.com/grafana/agent. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/open-policy-agent/opa."}]}, {"id": "GHSA-jwvr-vv7p-gpwq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nThis vulnerability affects customers who utilize non-admin users that are able to create or edit [Global Roles](https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/). The most common use case for this scenario is the [`restricted-admin`](https://rancher.com/docs/rancher/v2.6/en/admin-settings/rbac/global-permissions/#restricted-admin) role.\n\nA flaw was discovered in Rancher versions from 2.5.0 up to and including 2.5.12 and from 2.6.0 up to and including 2.6.3 which allows users who have create or update permissions on Global Roles to escalate their permissions, or those of another user, to admin-level permissions. Global Roles grant users Rancher-wide permissions, such as the ability to create clusters. In the identified versions of Rancher, when users are given permission to edit or create Global Roles, they are not restricted to only granting permissions which they already posses.\n\nThe privilege escalation can be taken advantage of in two ways by users with create or update permissions on Global Roles (including the `restricted-admin`):\n\n1. Editing the global `admin` role to make it the default for new users, then creating a new user that will be elevated to the global `admin` role.\n2. Creating a new global role with permissions already possessed by the `restricted-admin`, assigning this new role to a user, then modifying the global role to grant additional administrive like permissions (`'*'`) to the elevated user.\n\n### Patches\nPatched versions include releases 2.5.13, 2.6.4 and later versions.\n\n### Workarounds\nLimit access in Rancher to trusted users. There is not a direct mitigation besides upgrading to the patched Rancher versions.\n\n**Note:** If you have users who have create or edit permissions on Global Roles but are not admin users (for example, the `restricted-admin`), it is highly advised to review the roles and users created by those users for possible privilege escalations.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Reach out to [SUSE Rancher Security team](https://github.com/rancher/rancher/security/policy) for security related inquiries.\n* Open an issue in [Rancher](https://github.com/rancher/rancher/issues/new/choose) repository.\n* Verify our [support matrix](https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/) and [product support lifecycle](https://www.suse.com/lifecycle/).. Top 1 search result is go:github.com/rancher/rancher. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/rancher/rancher go:github.com/rancher/rancher."}]}, {"id": "GHSA-6pcv-qqx4-mxm3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Minikube versions 0.3.0-0.29.0, minikube exposes the Kubernetes Dashboard listening on the VM IP at port 30000. In VM environments where the IP is easy to predict, the attacker can use DNS rebinding to indirectly make requests to the Kubernetes Dashboard, create a new Kubernetes Deployment running arbitrary code. If minikube mount is in use, the attacker could also directly access the host filesystem.. Top 1 search result is go:k8s.io/minikube. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:k8s.io/minikube."}]}, {"id": "GHSA-fmrf-gvjp-5j5g", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIf an attacker is able to perform a container escape of a container running as root on a host where Cilium is installed, the attacker can leverage Cilium's Kubernetes service account to gain access to cluster privileges that are more permissive than what is minimally required to operate Cilium. In affected releases, this service account had access to modify and delete `Pod` and `Node` resources. \n\n### Patches\n\nThe problem has been fixed and is available on versions >=1.9.16, >=1.10.11, >=1.11.5\n\n### Workarounds\n\nThere are no workarounds available.\n\n### Acknowledgements\n\nThe Cilium community has worked together with members of Isovalent, Amazon and Palo Alto Networks to prepare these mitigations.  Special thanks to Micah Hausler (AWS), Robert Clark (AWS), Yuval Avrahami (Palo Alto Networks), and Shaul Ben Hai (Palo Alto Networks) for their cooperation.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\nEmail us at [security@cilium.io](mailto:security@cilium.io). Top 1 search result is go:github.com/cilium/cilium. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cilium/cilium go:github.com/cilium/cilium go:github.com/cilium/cilium."}]}, {"id": "GHSA-5p4h-3377-7w67", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The html package (aka x/net/html) before 2018-07-13 in Go mishandles \"in frameset\" insertion mode, leading to a \"panic: runtime error\" for html.Parse of <template><object>, <template><applet>, or <template><marquee>. This is related to HTMLTreeBuilder.cpp in WebKit.. Top 1 search result is go:golang.org/x/net. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net."}]}, {"id": "GHSA-9hxg-w7qf-hh93", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In pkg/tool/path.go in Gogs before 0.11.82.1218, a directory traversal in the file-upload functionality can allow an attacker to create a file under data/sessions on the server, a similar issue to CVE-2018-18925.. Top 1 search result is go:gogs.io/gogs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gogs.io/gogs."}]}, {"id": "GHSA-9c9w-9pq7-f35h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gophish before 0.11.0 allows SSRF attacks.. Top 1 search result is go:github.com/gophish/gophish. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gophish/gophish."}]}, {"id": "GHSA-9wm7-rc47-g56m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper bounds checking, a number of methods in dhowden tag before 0.0.0-20201120070457-d52dcb253c63 can trigger a panic via `readAPICFrame` due to attempted out-of-bounds reads. If the package is used to parse user supplied input, this may be used as a vector for a denial of service attack.. Top 1 search result is go:github.com/dhowden/tag. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dhowden/tag."}]}, {"id": "GHSA-28r2-q6m8-9hpx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp go-getter through 2.0.2 does not safely perform downloads. Asymmetric resource exhaustion could occur when go-getter processed malicious HTTP responses.. Top 1 search result is go:github.com/hashicorp/go-getter. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter go:github.com/hashicorp/go-getter/v2 go:github.com/hashicorp/go-getter/s3/v2 go:github.com/hashicorp/go-getter/gcs/v2."}]}, {"id": "GHSA-vjj6-5m9f-wqjw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability has been detected in HyperLedger Fabric v1.4.0, v2.0.0, v2.1.0. This bug can be leveraged by constructing a message whose payload is nil and sending this message with the method 'forwardToLeader'. This bug has been admitted and fixed by the developers of Fabric. If leveraged, any leader node will crash.. Top 1 search result is go:github.com/hyperledger/fabric. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hyperledger/fabric go:github.com/hyperledger/fabric."}]}, {"id": "GHSA-4j5x-f394-xx79", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: gitjacker before 0.1.0 allows remote attackers to execute arbitrary code via a crafted .git directory because of directory traversal.. Top 1 search result is go:github.com/liamg/gitjacker. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/liamg/gitjacker."}]}, {"id": "GHSA-f3fp-gc8g-vw66", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA bug was found in runc where `runc exec --cap` executed processes with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2).\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.\n\n### Patches\nThis bug has been fixed in runc 1.1.2. Users should update to this version as soon as possible.\n\nThis fix changes `runc exec --cap` behavior such that the additional capabilities granted to the process being executed (as specified via `--cap` arguments) do not include inheritable capabilities.\n\nIn addition, `runc spec` is changed to not set any inheritable capabilities in the created example OCI spec (`config.json`) file.\n\n### Credits\nThe opencontainers project would like to thank [Andrew G. Morgan](https://github.com/AndrewGMorgan) for responsibly disclosing this issue in accordance with the [opencontainers org security policy](https://github.com/opencontainers/.github/blob/master/SECURITY.md).\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/opencontainers/runc/issues/new)\n* Email us at [security@opencontainers.org](mailto:security@opencontainers.org) if you think you\u2019ve found a security bug. Top 1 search result is go:github.com/opencontainers/runc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/opencontainers/runc."}]}, {"id": "GHSA-752c-vfpf-cp2w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: resources/public/js/orchestrator.js in openark orchestrator before 3.2.4 allows XSS via the orchestrator-msg parameter.. Top 1 search result is go:github.com/openark/orchestrator. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openark/orchestrator."}]}, {"id": "GHSA-6gcg-hp2x-q54h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nAll unpatched versions of Argo CD starting with v0.7.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server.\n\nA malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. \n* If the target file is a valid JSON or YAML manifest file, and the resource is allowed in the Application, the attacker can read the contents of that manifest file. (In versions <2.3.2, <2.2.8, and <2.1.14, the attacker may read the files contents even if the resource is _not_ allowed in the Application). \n* If the target file is valid JSON but is _not_ a manifest file, the attacker may read the contents of the file. \n* If the target file is not valid JSON or YAML, the attacker may read partial file contents (usually just the first character of the file).\n\nSensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server.\n\n### Patches\n\nA patch for this vulnerability has been released in the following Argo CD versions:\n\n* v2.3.4\n* v2.2.9\n* v2.1.15\n\n### Workarounds\n\n* If you are using >=v2.3.0 and do not have any Jsonnet/directory-type Applications, [disable the Jsonnet/directory config management tool](https://argo-cd.readthedocs.io/en/stable/user-guide/tool_detection/#disable-built-in-tools). The config key is called `jsonnet.enable` since the same build tool is used for both Jsonnet and plain-manifest (\"directory\") sources.\n\n#### Mitigations\n\n* Avoid mounting JSON-formatted secrets as files on the repo-server.\n* Upgrade to >=2.3.0 to significantly reduce the risk of leaking out-of-bounds manifest files. Starting with 2.3.0, repository paths are randomized, and read permissions are restricted when manifests are not being actively being generated. This makes it very difficult to craft and use a malicious symlink.\n* Upgrade to >=2.3.3, >=2.2.8, or >= 2.1.14 to significantly reduce the risk of leaking the contents of (but not the existence of) out-of-bounds manifest files. These versions prevent attackers from loading manifests which are not permitted in the Project which governs the Application. \n\n#### Best practices which can mitigate risk\n\n* Limit who has push access to manifest repositories.\n* Limit who is allowed to configure new source repositories.\n* Limit resource kinds and destinations allowed for Projects, and restrict user access to only the necessary Projects.\n\n### Credits\n\nThis vulnerability was originally discovered as part of the Trail of Bits audit, published March 12, 2021. The behavior was left unchanged at the time.\n\nThe vulnerability was independently re-discovered by @crenshaw-dev, who contributed the patch. A security audit by Ada Logics independently followed up on the Trail of Bits report around the same time.\n\n### References\n\n* List of [types of Applications](https://argo-cd.readthedocs.io/en/stable/user-guide/application_sources/), including directory-type\n* [RBAC documentation](https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/), showing how to limit repository permissions\n* [Project documentation](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/), showing how to limit allowable resource kinds and destinations \n\n### For more information\nOpen an issue in [the Argo CD issue tracker](https://github.com/argoproj/argo-cd/issues) or [discussions](https://github.com/argoproj/argo-cd/discussions)\nJoin us on [Slack](https://argoproj.github.io/community/join-slack) in channel #argo-cd\n. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2 go:github.com/argoproj/argo-cd/v2."}]}, {"id": "GHSA-p5gc-957x-gfw9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The GetBlockHeadersMsg handler in the LES protocol implementation in Go Ethereum (aka geth) before 1.8.11 may lead to an access violation because of an integer signedness error for the array index, which allows attackers to launch a Denial of Service attack by sending a packet with a -1 query.Skip value. The vulnerable remote node would be crashed by such an attack immediately, aka the EPoD (Ethereum Packet of Death) issue.\n\n### Specific Go Packages Affected\ngithub.com/ethereum/go-ethereum/les. Top 1 search result is go:github.com/ethereum/go-ethereum. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ethereum/go-ethereum."}]}, {"id": "GHSA-xj7v-c82w-92q2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In Argo versions prior to v1.5.0-rc1, it was possible for authenticated Argo users to submit API calls to retrieve secrets and other manifests which were stored within git.. Top 1 search result is go:github.com/argoproj/argo-cd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/argoproj/argo-cd."}]}, {"id": "GHSA-c5wc-v287-82pc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: HashiCorp Vault and Vault Enterprise from 1.10.0 to 1.10.2 did not correctly configure and enforce MFA on login after server restarts. This affects the Login MFA feature introduced in Vault and Vault Enterprise 1.10.0 and does not affect the separate Enterprise MFA feature set. Fixed in 1.10.3.. Top 1 search result is go:github.com/hashicorp/vault. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/hashicorp/vault."}]}, {"id": "GHSA-j2h2-cvwh-cr64", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An issue was discovered in Mattermost Server before 5.20.0. Non-members can receive broadcasted team details via the `update_team` WebSocket event, aka MMSA-2020-0012.. Top 1 search result is go:github.com/mattermost/mattermost. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/mattermost/mattermost."}]}, {"id": "GHSA-4wpp-w5r4-7v5v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: We've discovered a vulnerability in which attackers could forge HTTP requests to manipulate the `charm` data directory to access or delete anything on the server. This has been patched in https://github.com/charmbracelet/charm/commit/3c90668f955c7ce5ef721e4fc9faee7053232fd3 and is available in release [v0.12.1](https://github.com/charmbracelet/charm/releases/tag/v0.12.1). We recommend that all users running self-hosted `charm` instances update immediately.\n\nThis vulnerability was found in-house and we haven't been notified of any potential exploiters.\n\n### Additional notes\n\n* Encrypted user data uploaded to the Charm server is safe as Charm servers cannot decrypt user data. This includes filenames, paths, and all key-value data.\n* Users running the official Charm [Docker images](https://github.com/charmbracelet/charm/blob/main/docker.md) are at minimal risk because the exploit is limited to the containerized filesystem.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open a [discussion](https://github.com/charmbracelet/charm/discussions)\n* Email us at [vt100@charm.sh](mailto:vt100@charm.sh)\n* Chat with us on [Slack](https://charm.sh/slack)\n\n* * *\n\n<a href=\"https://charm.sh/\"><img alt=\"the Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\"></a>\n\nCharm\u70ed\u7231\u5f00\u6e90 \u2022 Charm loves open source. Top 1 search result is go:github.com/charmbracelet/charm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/charmbracelet/charm."}]}, {"id": "GHSA-4v48-4q5m-8vx4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nPrometheus can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.\n\nPasswords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.\n\nHowever, a flaw in the way this mechanism was implemented in the [exporter toolkit](https://github.com/prometheus/exporter-toolkit) makes it possible with people who know the hashed password to authenticate against Prometheus.\n\nA request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.\n\n### Patches\n\nPrometheus 2.37.4 ([LTS](https://prometheus.io/docs/introduction/release-cycle/)) and 2.40.4 have been released to address this issue.\n\n### Workarounds\n\nThere is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.. Top 1 search result is go:github.com/prometheus/exporter-toolkit. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/prometheus/prometheus go:github.com/prometheus/prometheus go:github.com/prometheus/prometheus/v2 go:github.com/prometheus/prometheus/v2."}]}, {"id": "GHSA-p228-4mrh-ww7r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nProcessing issue, nodes are affected when trying to process a cross-shard relayed transaction with a smart contract deploy transaction data. The problem was a bad correlation between the transaction caches and the processing component. If the above-mentioned transaction was sent with more gas than required, the smart contract result (SCR transaction) that should have returned the leftover gas, would have been wrongly added to a cache that the processing unit did not consider. The node stopped notarizing metachain blocks. The fix was actually to extend the SCR transaction search in all other caches if it wasn't found in the correct (expected) sharded-cache. \n\n### Patches\nAll versions >= v1.3.50 will contain this patch\n\n### Workarounds\nFor the moment there is no workaround\n\n### References\nN/A\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [elrond-go main repo](https://github.com/ElrondNetwork/elrond-go)\n. Top 1 search result is go:go.opentelemetry.io/contrib/instrumentation/gopkg.in/macaron.v1/otelmacaron. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ElrondNetwork/elrond-go."}]}, {"id": "GHSA-68gw-r2x5-7r5r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Authorization Bypass Through User-Controlled Key in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-xxfx-w2rw-gh63", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The csaf_provider package before 0.8.2 allows XSS via a crafted CSAF document uploaded as text/html. The endpoint upload allows valid CSAF advisories (JSON format) to be uploaded with Content-Type text/html and filenames ending in .html. When subsequently accessed via web browser, these advisories are served and interpreted as HTML pages. Such uploaded advisories can contain JavaScript code that will execute within the browser context of users inspecting the advisory.. Top 1 search result is go:github.com/csaf-poc/csaf_distribution. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/csaf-poc/csaf_distribution."}]}, {"id": "GHSA-3fm3-m23v-5r46", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to support of Gzip compression in request bodies, as well as a lack of limiting response body sizes, a malicious server can cause a client to consume a significant amount of system resources, which may be used as a denial of service vector.. Top 1 search result is go:github.com/darklynx/request-baskets. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/tendermint/tendermint."}]}, {"id": "GHSA-vh43-cc6x-prpr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Verification of Source of a Communication Channel in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-jwrv-x6rx-8vfm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in Macaron i18n. It has been declared as problematic. Affected by this vulnerability is an unknown functionality of the file i18n.go. The manipulation leads to open redirect. The attack can be launched remotely. Upgrading to version 0.5.0 can address this issue. The name of the patch is 329b0c4844cc16a5a253c011b55180598e707735. It is recommended to upgrade the affected component. The identifier VDB-216745 was assigned to this vulnerability.. Top 1 search result is go:github.com/go-macaron/i18n. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/go-macaron/i18n."}]}, {"id": "GHSA-hhxg-px5h-jc32", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in Macaron csrf and classified as problematic. Affected by this issue is some unknown functionality of the file `csrf.go`. The manipulation of the argument Generate leads to sensitive cookie without secure attribute. The attack may be launched remotely. The name of the patch is dadd1711a617000b70e5e408a76531b73187031c. It is recommended to apply a patch to fix this issue. VDB-217058 is the identifier assigned to this vulnerability.. Top 1 search result is go:github.com/go-macaron/csrf. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/go-macaron/csrf."}]}, {"id": "GHSA-qr52-59r6-49f4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Access Control in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-mfmp-8mqg-q4wm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to Improper Access Control.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-p82q-rxpm-hjpc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n_What kind of vulnerability is it? Who is impacted?_\nThe [NMI](https://azure.github.io/aad-pod-identity/docs/concepts/nmi/) component in AAD Pod Identity intercepts and validates token requests based on regex. In this case, a token request made with backslash in the request (example: `/metadata/identity\\oauth2\\token/`) would bypass the NMI validation and be sent to [IMDS](https://learn.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service?tabs=windows) allowing a pod in the cluster to access identities that it shouldn't have access to.\n\n### Patches\n_Has the problem been patched? What versions should users upgrade to?_\n- We analyzed this bug and determined that we needed to fix it. This fix has been included in AAD Pod Identity release [v1.8.13](https://github.com/Azure/aad-pod-identity/releases/tag/v1.8.13)\n- If using the [AKS pod-managed identities add-on](https://learn.microsoft.com/en-us/azure/aks/use-azure-ad-pod-identity), no action is required. The clusters should now be running the `v1.8.13` release.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\nOpen an issue in [Azure/aad-pod-identity](https://github.com/Azure/aad-pod-identity)\n. Top 1 search result is go:github.com/Azure/aad-pod-identity. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/Azure/aad-pod-identity."}]}, {"id": "GHSA-h2ph-vhm7-g4hp", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThere is a potential vulnerability in Traefik displaying the Authorization header in its debug logs.\n\nTraefik uses [oxy](https://github.com/vulcand/oxy) to provide the following features:\n\n- Round Robin: https://doc.traefik.io/traefik/routing/services/#weighted-round-robin-service\n- Buffering: https://doc.traefik.io/traefik/middlewares/http/buffering/\n- Circuit Breaker: https://doc.traefik.io/traefik/middlewares/http/circuitbreaker/\n- In-Flight Requests: https://doc.traefik.io/traefik/middlewares/http/inflightreq/\n\nIn such cases, if the log level is set to DEBUG, the credentials provided using the Authorization header are displayed in the debug logs:\n\n```\nlevel=debug msg=\"vulcand/oxy/roundrobin/rr: completed ServeHttp on request\" Request=\"{\\\\\"Method\\\\\":\\\\\"POST\\\\\",\\\\\"URL\\\\\":{\\\\\"Scheme\\\\\":\\\\\"\\\\\",\\\\\"Opaque\\\\\":\\\\\"\\\\\",\\\\\"User\\\\\":null,\\\\\"Host\\\\\":\\\\\"\\\\\",\\\\\"Path\\\\\":\\\\\"/<redacted>/<redacted>\\\\\",\\\\\"RawPath\\\\\":\\\\\"\\\\\",\\\\\"ForceQuery\\\\\":false,\\\\\"RawQuery\\\\\":\\\\\"\\\\\",\\\\\"Fragment\\\\\":\\\\\"\\\\\",\\\\\"RawFragment\\\\\":\\\\\"\\\\\"},\\\\\"Proto\\\\\":\\\\\"HTTP/2.0\\\\\",\\\\\"ProtoMajor\\\\\":2,\\\\\"ProtoMinor\\\\\":0,\\\\\"Header\\\\\":{\\\\\"Authorization\\\\\":[\\\\\"Bearer <token value was here>\\\\\"],\\\\\"Content-Type\\\\\":[\\\\\"application/grpc\\\\\"],\\\\\"Grpc-Accept-Encoding\\\\\":[\\\\\"gzip\\\\\"],\\\\\"Grpc-Timeout\\\\\":[\\\\\"29999886u\\\\\"],\\\\\"Te\\\\\":[\\\\\"trailers\\\\\"],\\\\\"User-Agent\\\\\":[\\\\\"<redacted>\\\\\"],<remainder of log message removed>\n```\n\n### Patches\n\nhttps://github.com/traefik/traefik/pull/9574\nhttps://github.com/traefik/traefik/releases/tag/v2.9.6\n\n### Workarounds\n\nSet the log level to `INFO`, `WARN`, or `ERROR`.\n\n### For more information\n\nIf you have any questions or comments about this advisory, please [open an issue](https://github.com/traefik/traefik/issues).. Top 1 search result is go:github.com/traefik/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/traefik/traefik/v2."}]}, {"id": "GHSA-r88r-gmrh-7j83", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to unbounded alias chasing, a maliciously crafted YAML file can cause the system to consume significant system resources. If parsing user input, this may be used as a denial of service vector.. Top 1 search result is go:github.com/go-yaml/yaml. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gopkg.in/yaml.v2 go:github.com/go-yaml/yaml."}]}, {"id": "GHSA-4348-x292-h437", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A race condition can cause incorrect HTTP request routing.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ntbosscher/gobase."}]}, {"id": "GHSA-cwh7-28vg-jmpr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in pastebinit up to 0.2.2 and classified as problematic. Affected by this issue is the function pasteHandler of the file server.go. The manipulation of the argument `r.URL.Path` leads to path traversal. Upgrading to version 0.2.3 can address this issue. The name of the patch is 1af2facb6d95976c532b7f8f82747d454a092272. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217040.. Top 1 search result is go:github.com/jessfraz/pastebinit. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/jessfraz/pastebinit."}]}, {"id": "GHSA-fjgq-224f-fq37", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper path santiziation in github.com/goadesign/goa before v3.0.9, v2.0.10, or v1.4.3 allow remote attackers to read files outside of the intended directory. Top 1 search result is go:github.com/goadesign/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/goadesign/goa go:goa.design/goa go:goa.design/goa/v3."}]}, {"id": "GHSA-gfj4-wg89-m22r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, users can edit and delete all other users' shortcuts.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-m3q4-7qmj-657m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Overview\nDuring our internal security assessment, it was discovered that OpenFGA versions v0.3.0 is vulnerable to authorization bypass under certain conditions.\n\n### Am I Affected?\nYou are affected by this vulnerability if **all** of the following applies:\n\n1.  You are using OpenFGA v0.3.0\n2. You created a model using modeling language v1.1 that applies a type restriction to an object e.g. `define viewer: [user]`\n3. You created tuples based on the aforementioned model, e.g. `document:1#viewer@user:jon`\n4. You updated the previous model by adding a new type and replacing the previous restriction with the newly added type e.g. `define viewer: [employee]`\n5. You use the tuples created against the first model (step 3) and issue checks against the updated model e.g. `user=user:jon, relation=viewer, object:document:1`\n\n### How to fix that?\nUpgrade to version v0.3.1\n\n### Backward Compatibility\nThis update is backward compatible.. Top 1 search result is go:github.com/openfga/openfga. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openfga/openfga."}]}, {"id": "GHSA-m5pr-wm6q-x4g2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Comparison of Object References Instead of Object Contents in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-3839-6r69-m497", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Randomly-generated alphanumeric strings contain significantly less entropy than expected. The `RandomAlphaNumeric` and `CryptoRandomAlphaNumeric` functions always return strings containing at least one digit from 0 to 9. This significantly reduces the amount of entropy in short strings generated by these functions.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/Masterminds/goutils."}]}, {"id": "GHSA-67fx-wx78-jx33", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Fuzz testing, by Ada Logics and sponsored by the CNCF, identified input to functions in the `_chartutil_` package that can cause a segmentation violation. Applications that use functions from the `_chartutil_` package in the Helm SDK can have a Denial of Service attack when they use this package and it panics.\n\n### Impact\n\nThe `_chartutil_` package contains a parser that loads a JSON Schema validation file. For example, the Helm client when rendering a chart will validate its values with the schema file. The `_chartutil_` package parses the schema file and loads it into structures Go can work with. Some schema files can cause array data structures to be created causing a memory violation.\n\nApplications that use the `_chartutil_` package in the Helm SDK to parse a schema file can suffer a Denial of Service when that input causes a panic that cannot be recovered from.\n\nThe Helm Client will panic with a schema file that causes a memory violation panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.\n\n### Patches\n\nThis issue has been resolved in 3.10.3. \n\n### Workarounds\n\nSDK users can validate schema files that are correctly formatted before passing them to the `_chartutil_` functions.\n\n### For more information\n\nHelm's security policy is spelled out in detail in our [SECURITY](https://github.com/helm/community/blob/master/SECURITY.md) document.\n\n### Credits\n\nDisclosed by Ada Logics in a fuzzing audit sponsored by CNCF.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm/v3."}]}, {"id": "GHSA-468w-8x39-gj5v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ## Impact\n\nThere is a potential vulnerability in Traefik managing the TLS connections.\n\nA router configured with a not well-formatted [TLSOption](https://doc.traefik.io/traefik/v2.9/https/tls/#tls-options) is exposed with an empty TLSOption.\n\nFor instance, a route secured using an mTLS connection set with a wrong CA file is exposed without verifying the client certificates.\n\n## Patches\n\nhttps://github.com/traefik/traefik/releases/tag/v2.9.6\n\n## Workarounds\n\nCheck the logs to detect the following error messages and fix your TLS options:\n\n- Empty CA:\n\n```\n{\"level\":\"error\",\"msg\":\"invalid clientAuthType: RequireAndVerifyClientCert, CAFiles is required\",\"routerName\":\"Router0@file\"}\n```\n\n- Bad CA content (or bad path):\n\n```\n{\"level\":\"error\",\"msg\":\"invalid certificate(s) content\",\"routerName\":\"Router0@file\"}\n```\n\n- Unknown Client Auth Type:\n\n```\n{\"level\":\"error\",\"msg\":\"unknown client auth type \\\"FooClientAuthType\\\"\",\"routerName\":\"Router0@file\"}\n```\n\n- Invalid cipherSuites\n\n```\n{\"level\":\"error\",\"msg\":\"invalid CipherSuite: foobar\",\"routerName\":\"Router0@file\"}\n```\n\n- Invalid curvePreferences\n\n```\n{\"level\":\"error\",\"msg\":\"invalid CurveID in curvePreferences: foobar\",\"routerName\":\"Router0@file\"}\n``` \n\n## For more information\n\nIf you have any questions or comments about this advisory, please [open an issue](https://github.com/traefik/traefik/issues).. Top 1 search result is go:github.com/traefik/traefik. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/traefik/traefik/v2."}]}, {"id": "GHSA-qvx2-59g8-8hph", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in docconv up to 1.2.0 and classified as problematic. This issue affects the function `ConvertDocx/ConvertODT/ConvertPages/ConvertXML/XMLToText`. The manipulation leads to uncontrolled memory allocation. The attack may be initiated remotely. Upgrading to version 1.2.1 can address this issue. The name of the patch is 42bcff666855ab978e67a9041d0cdea552f20301. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216779.. Top 1 search result is go:code.sajari.com/docconv. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/sajari/docconv go:code.sajari.com/docconv."}]}, {"id": "GHSA-c8jh-vcjh-fx2w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos is an open-source, self-hosted memo hub with knowledge management and socialization. Memos prior to 0.9.0 has a feature to upload file and display it, and by uploading a crafted SVG file, an attacker could perform a stored cross-site scripting attack with the image direct link. This was patched in version 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-rprg-4v7q-87v7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.. Top 1 search result is go:github.com/containers/buildah. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containers/podman/v4."}]}, {"id": "GHSA-x45c-cvp8-q4fm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Capsule implements a multi-tenant and policy-based environment in a Kubernetes cluster. A ServiceAccount deployed in a Tenant Namespace, when granted with `PATCH` capabilities on its own Namespace, is able to edit it and remove the Owner Reference, breaking the reconciliation of the Capsule Operator and removing all the enforcement like Pod Security annotations, Network Policies, Limit Range and Resource Quota items.\n\nWith that said, an attacker could detach the Namespace from a Tenant that is forbidding starting privileged Pods using the Pod Security labels by removing the OwnerReference, removing the enforcement labels, and being able to start privileged containers that would be able to start a generic Kubernetes privilege escalation.\n\n### Patches\n\nPatches have been released for version 0.1.3 and all users must upgrade to this release.\n\n### Workarounds\n\nN.A.\n\n### References\n\nN.A.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [github.com/clastix/capsule](https://github.com/clastix/capsule)\n* Reach out on [#capsule](https://kubernetes.slack.com/archives/C03GETTJQRL) channel available on Kubernetes Slack workspace\n. Top 1 search result is go:github.com/clastix/capsule. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/clastix/capsule."}]}, {"id": "GHSA-gw9m-2m5v-c6x5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos prior to 0.9.1. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-cq2g-pw6q-hf7j", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA local file inclusion vulnerability exists in Cortex versions v1.13.0, v1.13.1 and v1.14.0, where a malicious actor could remotely read local files as a result of parsing maliciously crafted Alertmanager configurations when submitted to the [Alertmanager Set Configuration API](https://cortexmetrics.io/docs/api/#set-alertmanager-configuration). Only users of the Cortex Alertmanager service using `-experimental.alertmanager.enable-api` or `enable_api: true` are affected.\n\n### Specific Go Packages Affected\ngithub.com/cortexproject/cortex/pkg/alertmanager\n\n### Patches\nAffected Cortex users are advised to upgrade to versions 1.13.2 or 1.14.1.\n\n### Workarounds\nPatching is ultimately advised. Using out-of-bound validation, Cortex administrators may reject Alertmanager configurations containing the `api_key_file` setting in the `opsgenie_configs` section and `opsgenie_api_key_file` in the `global` section before sending to the [Set Alertmanager Configuration API](https://cortexmetrics.io/docs/api/#set-alertmanager-configuration) as a workaround.\n\n### References\n- Fixed Versions:\n   - https://github.com/cortexproject/cortex/releases/tag/v1.14.1\n   - https://github.com/cortexproject/cortex/releases/tag/v1.13.2\n- https://cortexmetrics.io/docs/api/#set-alertmanager-configuration\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [cortex](https://github.com/cortexproject/cortex/issues/new/choose)\n* Email us at [cortex-team@googlegroups.com](mailto:cortex-team@googlegroups.com).\n. Top 1 search result is go:github.com/prometheus/alertmanager. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cortexproject/cortex go:github.com/cortexproject/cortex."}]}, {"id": "GHSA-qrrf-xvcf-p64q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, an attacker can delete other users' posts via post id, which can be done via brute force.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-xrjj-mj9h-534m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.. Top 1 search result is go:k8s.io/client-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/net/http2."}]}, {"id": "GHSA-6cmv-2548-82v4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability, which was classified as problematic, has been found in leanote. This issue affects the function define of the file `public/js/plugins/history.js`. The manipulation of the argument content leads to cross site scripting. The attack may be initiated remotely. The name of the patch is https:/github.com/leanote/leanote/commit/0f9733c890077942150696dcc6d2b1482b7a0a19. It is recommended to apply a patch to fix this issue. The identifier VDB-216461 was assigned to this vulnerability.. Top 1 search result is go:github.com/leanote/leanote. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/leanote/leanote."}]}, {"id": "GHSA-vp56-r7qv-783v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper santization of user input, HTTPEngine.Handle allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.. Top 1 search result is go:golang.org/x/net/http2. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/go-aah/aah go:aahframe.work."}]}, {"id": "GHSA-pwhr-p68w-296x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-jpf8-h7h7-3ppm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/whyrusleeping/tar-utils."}]}, {"id": "GHSA-9h6h-9g78-86f7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIf you make use of the **report receiver server** (experimental), a client may be able to forge requests such that arbitrary files on the host can be overwritten (subject to permissions of the yapscan server), leading to loss of data. This is particularly problematic if you do not authenticate clients and/or run the server with elevated permissions.\n\n### Patches\n\nVulnerable versions:\n\n- v0.18.0\n- v0.19.0 (unreleased)\n\nThis problem is patched in version v0.19.1\n\n### Workarounds\n\nUpdate to the newer version is highly encouraged!\n\nMeasures to reduce the risk of this include authenticating clients (see `--client-ca` flag) and containerization of the yapscan server.\n\n### References\n\nThe tracking issue is #35. There you can find the commits, fixing the issue.\n. Top 1 search result is go:github.com/fkie-cad/yapscan. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/fkie-cad/yapscan."}]}, {"id": "GHSA-hrm3-3xm6-x33h", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Authentication is globally bypassed in github.com/nanobox-io/golang-nanoauth between v0.0.0-20160722212129-ac0cc4484ad4 and v0.0.0-20200131131040-063a3fb69896 if ListenAndServe is called with an empty token.. Top 1 search result is go:github.com/nanobox-io/golang-nanoauth. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/nanobox-io/golang-nanoauth."}]}, {"id": "GHSA-9v48-2h5x-fvpm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Access Control in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-jpgg-cp2x-qrw3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Web Sockets do not execute any AuthenticateMethod methods which may be set, leading to a nil pointer dereference if the returned UserData pointer is assumed to be non-nil, or authentication bypass. This issue only affects WebSockets with an AuthenticateMethod hook. Request handlers that do not explicitly use WebSockets are not vulnerable.. Top 1 search result is go:github.com/gorilla/websocket. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ecnepsnai/web."}]}, {"id": "GHSA-87mm-qxm5-cp3f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. The owner name of RRSIG RRs is not validated, permitting an attacker to present the RRSIG for an attacker-controlled domain in a response for any other domain.. Top 1 search result is go:github.com/ewen-lbh/ffcss. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/peterzen/goresolver."}]}, {"id": "GHSA-qw36-rw5q-gxcq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to Improper Authorization.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-967g-cjx4-h7j6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: go-codec-dagpb is an implementation of the DAG-PB spec for Go. The dag-pb codec can panic when decoding invalid blocks. This issue has been patched in version 1.3.1.. Top 1 search result is go:github.com/ipld/go-codec-dagpb. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ipld/go-codec-dagpb."}]}, {"id": "GHSA-r3p3-5f35-h6mf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Privilege Management in GitHub repository usememos/memos prior to 0.9.1.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-w57v-6xp4-rm2v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos is an open-source, self-hosted memo hub with knowledge management and socialization. Versions prior to 0.9.0 improperly maintain access control allowing an attacker to take over an account by changing header values in the HTTP request.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-f5c5-hmw9-v8hx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/yi-ge/unzip."}]}, {"id": "GHSA-6cr6-fmvc-vw2p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Noise is a Go implementation of the Noise Protocol Framework. The Noise protocol implementation suffers from weakened cryptographic security after encrypting 2^64 messages, and a potential denial of service attack. After 2^64 (~18.4 quintillion) messages are encrypted with the Encrypt function, the nonce counter will wrap around, causing multiple messages to be encrypted with the same key and nonce. In a separate issue, the Decrypt function increments the nonce state even when it fails to decrypt a message. If an attacker can provide an invalid input to the Decrypt function, this will cause the nonce state to desynchronize between the peers, resulting in a failure to encrypt all subsequent messages.. Top 1 search result is go:github.com/flynn/noise. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/flynn/noise."}]}, {"id": "GHSA-42q2-m54f-jh95", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, an attacker can post malicious content to another user's memos page via POST request.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-33m8-f4hw-wm3q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Denial of Service in GitHub repository usememos/memos 0.9.0 and prior. A patch is available on the `main` branch at commit number f888c628408501daf639de07b90a72ab443b0f4c.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-rgj5-jj5q-v3v7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Memos, an open-source, self-hosted memo hub, is vulnerable to stored Cross-site Scripting (XSS) in versions 0.8.3 and prior. A patch is available and anticipated to be part of version 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-f93f-55c2-8c89", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Casdoor before v1.126.1 was discovered to contain an arbitrary file deletion vulnerability via the `uploadFile` function.. Top 1 search result is go:github.com/casdoor/casdoor. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/casdoor/casdoor."}]}, {"id": "GHSA-j593-h5v3-45x6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior has endpoint that leaks user information like names, email, role, and OpenID to an authenticated user. A patch is available at commit 05b41804e33a34102f1f75bb2d69195dda6a1210 on the `main` branch.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-6rx9-889q-vv2r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Fuzz testing, by Ada Logics and sponsored by the CNCF, identified input to functions in the _strvals_ package that can cause a stack overflow. In Go, a stack overflow cannot be recovered from. Applications that use functions from the _strvals_ package in the Helm SDK can have a Denial of Service attack when they use this package and it panics.\n\n### Impact\n\nThe _strvals_ package contains a parser that turns strings into Go structures. For example, the Helm client has command line flags like `--set`, `--set-string`, and others that enable the user to pass in strings that are merged into the values. The _strvals_ package converts these strings into structures Go can work with. Some string inputs can cause array data structures to be created causing a stack overflow.\n\nApplications that use the _strvals_ package in the Helm SDK to parse user supplied input can suffer a Denial of Service when that input causes a panic that cannot be recovered from.\n\nThe Helm Client will panic with input to `--set`, `--set-string`, and other value setting flags that causes a stack overflow. Helm is not a long running service so the panic will not affect future uses of the Helm client.\n\n### Patches\n\nThis issue has been resolved in 3.10.3. \n\n### Workarounds\n\nSDK users can validate strings supplied by users won't create large arrays causing significant memory usage before passing them to the _strvals_ functions.\n\n### For more information\n\nHelm's security policy is spelled out in detail in our [SECURITY](https://github.com/helm/community/blob/master/SECURITY.md) document.\n\n### Credits\n\nDisclosed by Ada Logics in a fuzzing audit sponsored by CNCF.. Top 1 search result is go:github.com/helm/helm. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm/v3."}]}, {"id": "GHSA-m3cq-xcx9-3gvm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nUsers of Kyverno on versions 1.8.3 or 1.8.4 who use `verifyImages` rules to verify container image signatures, and do not prevent use of unknown registries.\n\n### Patches\n\nThis issue has been fixed in version [1.8.5](https://github.com/kyverno/kyverno/releases/tag/v1.8.5)\n\n### Workarounds\n\nConfigure a Kyverno policy to restrict registries to a set of secure trusted image registries ([sample](https://kyverno.io/policies/best-practices/restrict_image_registries/restrict_image_registries/)).\n\n### References\n\n\n. Top 1 search result is go:github.com/kyverno/kyverno. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/kyverno/kyverno."}]}, {"id": "GHSA-cm9x-c3rh-7rc4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nIt is possible to craft an environment variable with newlines to add entries to a container's /etc/passwd. It is possible to circumvent admission validation of username/UID by adding such an entry.\n\nNote: because the pod author is in control of the container's /etc/passwd, this is not considered a new risk factor. However, this advisory is being opened for transparency and as a way of tracking fixes.\n\n### Patches\n1.26.0 will have the fix. More patches will be posted as they're available.\n\n### Workarounds\nAdditional security controls like SELinux should prevent any damage a container is able to do with root on the host. Using SELinux is recommended because this class of attack is already possible by manually editing the container's /etc/passwd \n\n### References\n. Top 1 search result is go:github.com/etcd-io/etcd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cri-o/cri-o."}]}, {"id": "GHSA-cwrm-33qq-4w2x", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-mq5q-gpgv-pwxw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, a user can archive any private memos, delete any shortcut, and edit any shortcut from other users via API.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-mfvq-m3jj-8864", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to Improper Verification of Source of a Communication Channel.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-qcw2-492v-57xj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos is an open-source, self-hosted memo hub with knowledge management and socialization. Memos prior to 0.9.0 is missing the Secure cookie attribute, making it vulnerable to session hijacking.\n. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-j453-hm5x-c46w", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper sanitization of user input on Windows, the static file handler allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.. Top 1 search result is go:go.temporal.io/server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/labstack/echo/v4."}]}, {"id": "GHSA-h4q8-96p6-jcgr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nIn ghinstallation v1, when the request to refresh an installation token failed, the HTTP request and response would be returned for debugging.\n\nhttps://github.com/bradleyfalzon/ghinstallation/blob/24e56b3fb7669f209134a01eff731d7e2ef72a5c/transport.go#L172-L174\n\nThe request contained the bearer JWT for the App, and was returned back to clients. This token is short lived (10 minute maximum).\n\n### Patches\n\n- This has already been patched in d24f14f8be70d94129d76026e8b0f4f9170c8c3e, and is available in releases >= v2.0.0.\n\n### References\n_Are there any links users can visit to find out more?_\n\n- See https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps#authenticating-as-an-installation for the App installation flow.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [ghinstallation](https://github.com/bradleyfalzon/ghinstallation)\n. Top 1 search result is go:github.com/bradleyfalzon/ghinstallation. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/bradleyfalzon/ghinstallation."}]}, {"id": "GHSA-957m-g6rf-4c2m", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Alist v3.5.1 is vulnerable to Cross Site Scripting (XSS) via the bulletin board.. Top 1 search result is go:github.com/Xhofe/alist. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/alist-org/alist/v3."}]}, {"id": "GHSA-vwg4-846x-f94v", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos is an open-source, self-hosted memo hub with knowledge management and socialization. Memos versions prior to 0.9.0 are vulnerable to improper authorization, which can allow a user to modify the nickname, username and email of other users without permission.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-rmhx-9h5h-3xh3", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-x39j-h85h-3f46", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA `ProtoNode` may be modified in such a way as to cause various encode errors which will trigger a panic on common method calls that don't allow for error returns.\n\nA `ProtoNode` should only be able to encode to valid DAG-PB, attempting to encode invalid DAG-PB forms will result in an error from the codec. Manipulation of an existing (newly created or decoded) `ProtoNode` using the modifier methods did not account for certain states that would place the `ProtoNode` into an unencodeable form.\n\nDue to conformance with the [`github.com/ipfs/go-block-format#Block`](https://pkg.go.dev/github.com/ipfs/go-block-format#Block) and [`github.com/ipfs/go-ipld-format#Node`](https://pkg.go.dev/github.com/ipfs/go-ipld-format#Node) interfaces, certain methods, which internally require a re-encode if state has changed, will panic due to the inability to return an error.\n\nAdditionally, use of the `ProtoNode#SetCidBuilder()` method to set a non-functioning `CidBuilder` (such as one that refers to a multihash where an implementation of that hash function is not available) may cause the same methods to panic as a new CID is required but cannot be created.\n\n### Patches\n\nReleases involving fixes for this issue are [v0.8.0](https://github.com/ipfs/go-merkledag/releases/tag/v0.8.0) and [v0.8.1](https://github.com/ipfs/go-merkledag/releases/tag/v0.8.1). The recommended minimum version is **v0.8.1**.\n\n* Additional checks are performed on `ProtoNode` state changes to avoid the possibility of creating unencodeable forms, errors are returned where this is the case.\n* The builder passed in to `SetCidBuilder()` is inspected to attempt to determine if it is usable to generate CIDs, otherwise an error is returned.\n* The panics have been removed and replaced with default values (empty byte slice for `RawData()` and a default zero-bytes DAG-PB CID for methods involving CIDs).\n\n### Workarounds\n\nThese workarounds are available when using impacted versions to avoid panic conditions, and may be generally appropriate in order to provide meaningful feedback to users and avoid generating bad, or unexpected encoded data:\n\n* Sanitise inputs when allowing user-input to set a new `CidBuilder` on a `ProtoNode`.\n* Sanitise `Tsize` (`Link#Size`) values such that they are a reasonable byte-size for sub-DAGs where derived from user-input.\n\n### References\n\n* https://github.com/ipfs/kubo/issues/9297\n* https://github.com/ipfs/go-merkledag/issues/90\n* https://github.com/ipfs/go-merkledag/releases/tag/v0.8.0\n* https://github.com/ipfs/go-merkledag/pull/91\n* https://github.com/ipfs/go-merkledag/pull/92\n* https://github.com/ipfs/go-merkledag/pull/93\n* https://github.com/ipfs/go-merkledag/releases/tag/v0.8.1\n\n\n### Credit\n\nThanks to [@mrd0ll4r](https://github.com/mrd0ll4r) for reporting the original error to Kubo!. Top 1 search result is go:github.com/ipld/go-codec-dagpb. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/ipfs/go-merkledag."}]}, {"id": "GHSA-jcr6-mmjj-pchw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Usage of the CORS handler may apply improper CORS headers, allowing the requester to explicitly control the value of the Access-Control-Allow-Origin header, which bypasses the expected behavior of the Same Origin Policy.. Top 1 search result is go:github.com/kiali/kiali. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gorilla/handlers."}]}, {"id": "GHSA-4gjr-vgfx-9qvw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Alist v3.4.0 is vulnerable to File Upload. A user with only file upload permission can upload any file to any folder (even a password protected one). Version 3.5.1 contains a patch.. Top 1 search result is go:github.com/Xhofe/alist. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/alist-org/alist/v3."}]}, {"id": "GHSA-6q6q-88xp-6f2r", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Parsing malicious or large YAML documents can consume excessive amounts of CPU or memory. Top 1 search result is go:github.com/go-yaml/yaml. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:gopkg.in/yaml.v2."}]}, {"id": "GHSA-6jvc-q2x7-pchv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it.. Top 1 search result is go:github.com/aws/aws-sdk-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/aws/aws-sdk-go."}]}, {"id": "GHSA-47xh-qxqv-mgvg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\n> A request forgery attack can be performed on Varnish Cache servers that have the HTTP/2 protocol turned on. An attacker may introduce characters through the HTTP/2 pseudo-headers that are invalid in the context of an HTTP/1 request line, causing the Varnish server to produce invalid HTTP/1 requests to the backend. This may in turn be used to successfully exploit vulnerabilities in a server behind the Varnish server.\n> -- https://varnish-cache.org/security/VSV00011.html#vsv00011\n\n### Patches\n\nThis is fixed in Varnish 6.0.11; Varnish 6.0.11 is available in `kube-httpcache` versions v0.7.1 and later.\n\n### Workarounds\n\nSee [upstream mitigation hints](https://varnish-cache.org/security/VSV00011.html#mitigation).\n\n### References\n\n- https://varnish-cache.org/security/VSV00011.html#vsv00011\n\n. Top 1 search result is go:github.com/mindoc-org/mindoc. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/mittwald/kube-httpcache."}]}, {"id": "GHSA-f83p-pg86-p922", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior allows an attacker to archive any user's public or private post.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-642q-2q68-9j3p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-v92p-phmp-xffr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-53c4-hhmh-vw5q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Fuzz testing, by Ada Logics and sponsored by the CNCF, identified input to functions in the `_repo_` package that can cause a segmentation violation. Applications that use functions from the `_repo_` package in the Helm SDK can have a Denial of Service attack when they use this package and it panics.\n\n### Impact\n\nThe `_repo_` package contains a handler that processes the index file of a repository. For example, the Helm client adds references to chart repositories where charts are managed. The `_repo_` package parses the index file of the repository and loads it into structures Go can work with. Some index files can cause array data structures to be created causing a memory violation.\n\nApplications that use the `_repo_` package in the Helm SDK to parse an index file can suffer a Denial of Service when that input causes a panic that cannot be recovered from.\n\nThe Helm Client will panic with an index file that causes a memory violation panic. Helm is not a long running service so the panic will not affect future uses of the Helm client.\n\n### Patches\n\nThis issue has been resolved in 3.10.3. \n\n### Workarounds\n\nSDK users can validate index files that are correctly formatted before passing them to the `_repo_` functions.\n\n### For more information\n\nHelm's security policy is spelled out in detail in our [SECURITY](https://github.com/helm/community/blob/master/SECURITY.md) document.\n\n### Credits\n\nDisclosed by Ada Logics in a fuzzing audit sponsored by CNCF.. Top 1 search result is go:github.com/aws/aws-sdk-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:helm.sh/helm/v3."}]}, {"id": "GHSA-j7qp-mfxf-8xjw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nVersions older than `v0.18.0` of go-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p\u2019s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host\u2019s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of go-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.\n\nIn the original version of the attack, the malicious node would continue opening new streams on a stream multiplexer that doesn\u2019t provide sufficient back pressure (yamux or mplex). It is easy to defend against this one attack, but there are countless variations of this attack:\n* Opening streams and causing a non-trivial memory allocation (e.g., for multistream or protobuf parsing)\n* Creating a lot of sybil nodes and opening new connections across nodes\n\n### Patches (What to do as a go-libp2p consumer:)\n1. Update your go-libp2p dependency to go-libp2p v0.18.0 or greater (current version as of publish date is [v0.24.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.24.0).)\n    - Note: **It's recommend that you update to `v0.21.0` onwards** as you\u2019ll get some useful functionality that will help in production environments like better metrics around resource usage, Grafana dashboards around resource usage, allow list support, and default autoscaling limits. [Please see the v0.21.0 release notes for more info.](https://github.com/libp2p/go-libp2p/releases/tag/v0.21.0))\n\n2. Determine appropriate limits for your application - go-libp2p sets up a resource manager with the default limits if none are provided. For default definitions please see [limits_defaults.go](https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/limit_defaults.go). These limits are also set to automatically scale, this is done using the [AutoScale method of the ScalingLimitConfig](https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#scaling-limits). We recommend you [tune your limits as described here](https://github.com/libp2p/go-libp2p/blob/master/p2p/host/resource-manager/README.md#how-to-tune-your-limits).\n\n3. Configure your node to be attack resilient. See [how to respond to an attack and identify misbehaving peers here](https://docs.libp2p.io/concepts/security/dos-mitigation/#responding-to-an-attack). Then setup automatic blocking with fail2ban using canonical libp2p log lines: [guide on how to do so here](https://docs.libp2p.io/concepts/security/dos-mitigation/#how-to-automate-blocking-with-fail2ban).\n\n#### Examples\n* Lotus\u2019 integration can be found in https://github.com/filecoin-project/lotus/blob/master/node/modules/lp2p/rcmgr.go. Lotus reads user-configured resource limits from a limits.json file into the root directory. This allows users to share their resource manager configuration independent of any other configurations.\n* Kubo\u2019s (formerly go-ipfs) integration can be found in https://github.com/ipfs/go-ipfs/blob/master/core/node/libp2p/rcmgr.go. Kubo reads the limits from the IPFS config file.\n\n**Note:** go-libp2p still implements the [connection manager](https://github.com/libp2p/go-libp2p/tree/master/p2p/net/connmgr) mentioned above. The connection manager is a component independent of the resource manager, which aims to keep the number of libp2p connections between a low and a high watermark. When modifying connection limits, it\u2019s advantageous to keep the configuration of these components consistent, i.e., when setting a limit of N concurrent connections in the resource manager, the high watermark should be at most (and ideally slightly less) than N.\n\n### Workarounds\nAlthough there are no workarounds within go-libp2p, some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using `iptables` or `ufw` ) or making use of a load balancer in front of libp2p nodes.\n\nHowever these require direct action & responsibility on your part and are no substitutes for upgrading go-libp2p. Therefore, we highly recommend upgrading your go-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about go-libp2p resource utilization.\n\n### References\nPlease see our DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: https://docs.libp2p.io/reference/dos-mitigation/. \n\nPlease see the related disclosure for rust-libp2p: https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8 and js-libp2p: https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv\n\n#### For more information\n\nIf you have any questions or comments about this advisory email us at [security@libp2p.io](mailto:security@libp2p.io). Top 1 search result is go:github.com/libp2p/go-libp2p. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/libp2p/go-libp2p."}]}, {"id": "GHSA-6w5w-wx8w-2cq9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to full account takeover via changing user name, email address, and display name.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-pmg2-rph8-p8r6", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In versions of Alist prior to 3.6.0, a user with only file upload permission can bypass the base path restriction by using '... /' to bypass the base path restriction and upload files to an arbitrary path.\n. Top 1 search result is go:github.com/Xhofe/alist. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/alist-org/alist/v3."}]}, {"id": "GHSA-6fx9-29x2-fmfj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Access Control in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-p6fg-723f-hgpw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to unchecked type assertions, maliciously crafted messages can cause panics, which may be used as a denial of service vector.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/shiyanhui/dht."}]}, {"id": "GHSA-hc5q-26h8-r9wf", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, an unauthorized user can access any private memo by URL hacking a memo on the editing screen.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-5jqp-wmhj-g33f", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-gw62-c7w4-x449", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability classified as problematic has been found in studygolang. This affects an unknown part of the file static/js/topics.js. The manipulation of the argument contentHtml leads to cross site scripting. It is possible to initiate the attack remotely. The name of the patch is 0fb30f9640bd5fa0cae58922eac6c00bb1a94391. It is recommended to apply a patch to fix this issue. The identifier VDB-216477 was assigned to this vulnerability.. Top 1 search result is go:github.com/studygolang/studygolang. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/studygolang/studygolang."}]}, {"id": "GHSA-2qjp-425j-52j9", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nA bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io). Top 1 search result is go:github.com/containerd/containerd. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/containerd/containerd go:github.com/containerd/containerd."}]}, {"id": "GHSA-j8x2-2m5w-j939", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA privilege escalation issue exists within the Amazon CloudWatch Agent for Windows in versions up to and including v1.247354. When users trigger a repair of the Agent, a pop-up window opens with SYSTEM permissions. Users with administrative access to affected hosts may use this to create a new command prompt as NT AUTHORITY\\SYSTEM. \n \nTo trigger this issue, the third party must be able to access the affected host and elevate their privileges such that they\u2019re able to trigger the agent repair process. They must also be able to install the tools required to trigger the issue. \n\nThis issue does not affect the CloudWatch Agent for macOS or Linux. \n\n### Patches\nMaintainers recommend that Agent users upgrade to the latest available version of the CloudWatch Agent to address this issue. \n\n### Workarounds\nThere is no recommended work around. Affected users must update the installed version of the CloudWatch Agent to address this issue.\n\n### References\nhttps://github.com/aws/amazon-cloudwatch-agent/commit/6119858864c317ff26f41f576c169148d1250837\n\n### For more information \n \nIf you have any questions or comments about this advisory, contact AWS/Amazon Security via their [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/) or directly via email to [aws-security@amazon.com](mailto:aws-security@amazon.com). Please do not create a public GitHub issue.\n. Top 1 search result is go:github.com/aws/amazon-cloudwatch-agent. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/aws/amazon-cloudwatch-agent."}]}, {"id": "GHSA-ppp9-7jff-5vj2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.. Top 1 search result is go:golang.org/x/text. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:golang.org/x/text."}]}, {"id": "GHSA-gxqf-4g4p-q3hc", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-5vw4-v588-pgv8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Token validation methods are susceptible to a timing side-channel during HMAC comparison. With a large enough number of requests over a low latency connection, an attacker may use this to determine the expected HMAC.. Top 1 search result is go:github.com/minio/minio. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/robbert229/jwt."}]}, {"id": "GHSA-fv6c-rfg3-gvjw", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Incorrect Use of Privileged APIs in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-4fv8-w65m-3932", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\nA potential race condition issue exists within the Amazon EFS mount helper in efs-utils versions v1.34.3 and below, and aws-efs-csi-driver versions v1.4.7 and below. When using TLS to mount file systems, the mount helper allocates a local port for stunnel to receive NFS connections prior to applying the TLS tunnel. In affected versions, concurrent mount operations can allocate the same local port, leading to either failed mount operations or an inappropriate mapping from an EFS customer\u2019s local mount points to that customer\u2019s EFS file systems.\n\nAffected versions: efs-utils <= v1.34.3, aws-efs-csi-driver <= v1.4.7\n\n### Patches\nThe patches are included in efs-utils version v1.34.4 and newer, and in aws-efs-csi-driver v1.4.8 and newer.\n\n### Workarounds\nThere is no recommended work around. We recommend affected users update the installed version of efs-utils to v1.34.4+ or aws-efs-csi-driver to v1.4.8+ to address this issue.\n\n### References\nhttps://github.com/aws/efs-utils/commit/f3a8f88167d55caa2f78aeb72d4dc1987a9ed62d\nhttps://github.com/aws/efs-utils/issues/125\nhttps://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/282\nhttps://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/635\n. Top 1 search result is go:github.com/kubernetes-sigs/aws-efs-csi-driver. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/kubernetes-sigs/aws-efs-csi-driver."}]}, {"id": "GHSA-8w5q-5fpq-v4pm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-jr65-gpj5-cw74", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: go-resolver's DNSSEC validation is not performed correctly. An attacker can cause this package to report successful validation for invalid, attacker-controlled records. Root DNSSEC public keys are not validated, permitting an attacker to present a self-signed root key and delegation chain.. Top 1 search result is go:github.com/multiversx/mx-chain-go. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/peterzen/goresolver."}]}, {"id": "GHSA-6whj-8g9g-5jvx", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Improper Handling of Insufficient Permissions or Privileges in GitHub repository usememos/memos prior to 0.9.1.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-qf9q-3wwx-8qjv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, a user can view any content from private memos from other users via the API.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-c2v4-8r9g-g5xj", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-qcf5-m2c6-89f2", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to Improper Authorization.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-4wp2-8rm2-jgmh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: LZ4 bindings use a deprecated C API that is vulnerable to memory corruption, which could lead to arbitrary code execution if called with untrusted user input.. Top 1 search result is go:github.com/git-lfs/git-lfs. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/cloudflare/golz4."}]}, {"id": "GHSA-c5hq-35h7-r9x4", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-Site Request Forgery (CSRF) in GitHub repository usememos/memos 0.9.0 and prior.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-x9p9-v3x6-68mq", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-7rg2-cxvp-9p7p", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nPrometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.\n\nPasswords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.\n\nHowever, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.\n\nA request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.\n\n### Patches\n\nThe exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.\n\n### Workarounds\n\nThere is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.\n\n### Credit\n\nWe want to thank Lei Wan reporting this security issue.\n. Top 1 search result is go:github.com/prometheus/prometheus. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/prometheus/exporter-toolkit go:github.com/prometheus/exporter-toolkit."}]}, {"id": "GHSA-q9qr-jwpw-3qvv", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: CSRF tokens are generated using math/rand, which is not a cryptographically secure random number generator, allowing an attacker to predict values and bypass CSRF protections with relatively few requests.. Top 1 search result is go:github.com/go-macaron/csrf. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/dinever/golf."}]}, {"id": "GHSA-ghx2-6v4g-9wmm", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: In usememos/memos 0.9.0 and prior, a user with login permission can delete all notes of the whole application via `API DELETE https://demo.usememos.com/api/memo/$idnote`. The vulnerability will lose all user notes data throughout the system, causing damage to user data.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-m7qp-cj9p-gj85", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: A vulnerability was found in OpenShift OSIN. It has been classified as problematic. This affects the function `ClientSecretMatches/CheckClientSecret`. The manipulation of the argument secret leads to observable timing discrepancy. The name of the patch is 8612686d6dda34ae9ef6b5a974e4b7accb4fea29. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216987.. Top 1 search result is go:github.com/openshift/osin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/openshift/osin."}]}, {"id": "GHSA-rx2m-xr4x-54hh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: usememos/memos 0.9.0 and prior is vulnerable to Improper Authorization.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-hggr-p7v6-73p5", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Unsanitized input in the query parser in github.com/revel/revel before v1.0.0 allows remote attackers to cause resource exhaustion via memory allocation.. Top 1 search result is go:github.com/revel/revel. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/revel/revel."}]}, {"id": "GHSA-f552-97qx-c694", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.0.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-xr7p-8q82-878q", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Description\n\nteler prior to version <= 2.0.0-rc.4 is vulnerable to DOM-based cross-site scripting (XSS) in the teler dashboard. When teler requests messages from the event stream on the `/events` endpoint, the log data displayed on the dashboard are not sanitized.\n\n### Impact\n\nThis only affects authenticated users and can only be exploited based on detected threats if the log contains a DOM scripting payload. This indicates a low severity and there is no significant impact on the users.\n\n### Affected Version\n\nThis issue was introduced from version `v2.0.0-rc` to `v2.0.0-rc.3` & `v2.0.0-dev`.\n\n### Patches\n\nThis vulnerability has been fixed on version `v2.0.0-rc.4` & `v2.0.0-dev.2`.\n\n### Workarounds\n\nHere are some workarounds to handle this case:\n- Deactivate the live event dashboard from the configuration file, or\n- Upgrade teler version to `v2.0.0-rc.4` or `v2.0.0-dev.2` & above.\n\n### References\n\n- https://github.com/kitabisa/teler/commit/20f59eda2420ac64e29f199a61230a0abc875e8e\n. Top 1 search result is go:ktbs.dev/teler. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:teler.app go:teler.app."}]}, {"id": "GHSA-pp3p-6jjh-rmg7", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An Improper Access Control vulnerability in usememos/memos 0.9.0 and prior can result in a user deleting others' public and private memos.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-6vm3-jj99-7229", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Gin is a HTTP web framework written in Go (Golang). Unsanitized input in the default logger in github.com/gin-gonic/gin before v1.6.0 allows remote attackers to inject arbitrary log lines.. Top 1 search result is go:github.com/gin-gonic/gin. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gin-gonic/gin."}]}, {"id": "GHSA-rmj9-q58g-9qgg", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper path santization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/artdarek/go-unzip."}]}, {"id": "GHSA-xv6x-456v-24xh", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ### Impact\n\nThe XSS vulnerability allows authenticated users to upload .html files. With that, an attacker could execute client side scripts **if** another user opened a link, such as:\n\n```\nhttps://push.example.org/image/[alphanumeric string].html\n```\n\nAn attacker could potentially take over the account of the user that clicked the link. Keep in mind, the Gotify UI won't natively expose such a malicious link, so an attacker has to get the user to open the malicious link in a context outside of Gotify.\n\n### Patches\n\nThe vulnerability has been fixed in version 2.2.2.\n\n### Workarounds\n\nYou can block access to non image files via a reverse proxy in the `./image` directory.\n\n### References\n\nhttps://github.com/gotify/server/pull/534\nhttps://github.com/gotify/server/pull/535\n\n---\n\nThanks to rickshang (aka \u65e0\u5728\u65e0\u4e0d\u5728) for discovering and reporting this bug.. Top 1 search result is go:github.com/gotify/server. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/gotify/server."}]}, {"id": "GHSA-7qpw-2j9m-rw8c", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: An Insufficient Granularity of Access Control in usememos/memos prior to 0.9.0 can allow an attacker to delete a memo from the archives.. Top 1 search result is go:github.com/usememos/memos. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/usememos/memos."}]}, {"id": "GHSA-5x84-q523-vvwr", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: Due to improper validation of caller input, validation is silently disabled if the provided expected token is malformed, causing any user supplied token to be considered valid.. Top 1 search result is go:goa.design/goa. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/justinas/nosurf."}]}, {"id": "GHSA-cjcc-46j8-xmr8", "conversations": [{"from": "human", "value": "Below is a Go vulnerability description. Please identify the software name affected by it. Input: ** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in destiny.gg chat. It has been rated as problematic. This issue affects the function websocket.Upgrader of the file main.go. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is bebd256fc3063111fb4503ca25e005ebf6e73780. It is recommended to apply a patch to fix this issue. The identifier VDB-216521 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.. Top 1 search result is go:github.com/gorilla/websocket. What is the affected package?"}, {"from": "gpt", "value": "The affected package is go:github.com/destinygg/chat."}]}]